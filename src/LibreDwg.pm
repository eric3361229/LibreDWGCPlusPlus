# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package LibreDwg;
use base qw(Exporter);
use base qw(DynaLoader);
package LibreDwgc;
bootstrap LibreDwg;
package LibreDwg;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package LibreDwg;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package LibreDwg;

*dwg_read_file = *LibreDwgc::dwg_read_file;
*dwg_free = *LibreDwgc::dwg_free;
*dwg_bmp = *LibreDwgc::dwg_bmp;
*dwg_model_x_min = *LibreDwgc::dwg_model_x_min;
*dwg_model_x_max = *LibreDwgc::dwg_model_x_max;
*dwg_model_y_min = *LibreDwgc::dwg_model_y_min;
*dwg_model_y_max = *LibreDwgc::dwg_model_y_max;
*dwg_model_z_min = *LibreDwgc::dwg_model_z_min;
*dwg_model_z_max = *LibreDwgc::dwg_model_z_max;
*dwg_model_page_x_min = *LibreDwgc::dwg_model_page_x_min;
*dwg_model_page_x_max = *LibreDwgc::dwg_model_page_x_max;
*dwg_model_page_y_min = *LibreDwgc::dwg_model_page_y_min;
*dwg_model_page_y_max = *LibreDwgc::dwg_model_page_y_max;
*dwg_get_layer_count = *LibreDwgc::dwg_get_layer_count;
*dwg_get_layers = *LibreDwgc::dwg_get_layers;
*dwg_get_entity_count = *LibreDwgc::dwg_get_entity_count;
*dwg_get_entities = *LibreDwgc::dwg_get_entities;
*dwg_get_entity_layer = *LibreDwgc::dwg_get_entity_layer;
*dwg_next_object = *LibreDwgc::dwg_next_object;
*dwg_get_object = *LibreDwgc::dwg_get_object;
*get_first_owned_object = *LibreDwgc::get_first_owned_object;
*get_next_owned_object = *LibreDwgc::get_next_owned_object;
*dwg_print_object = *LibreDwgc::dwg_print_object;
*dwg_page_x_min = *LibreDwgc::dwg_page_x_min;
*dwg_page_x_max = *LibreDwgc::dwg_page_x_max;
*dwg_page_y_min = *LibreDwgc::dwg_page_y_min;
*dwg_page_y_max = *LibreDwgc::dwg_page_y_max;

############# Class : LibreDwg::Dwg_Bitcode_2RD ##############

package LibreDwg::Dwg_Bitcode_2RD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Bitcode_2RD_x_get;
*swig_x_set = *LibreDwgc::Dwg_Bitcode_2RD_x_set;
*swig_y_get = *LibreDwgc::Dwg_Bitcode_2RD_y_get;
*swig_y_set = *LibreDwgc::Dwg_Bitcode_2RD_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Bitcode_2RD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Bitcode_2RD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Bitcode_2BD ##############

package LibreDwg::Dwg_Bitcode_2BD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Bitcode_2BD_x_get;
*swig_x_set = *LibreDwgc::Dwg_Bitcode_2BD_x_set;
*swig_y_get = *LibreDwgc::Dwg_Bitcode_2BD_y_get;
*swig_y_set = *LibreDwgc::Dwg_Bitcode_2BD_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Bitcode_2BD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Bitcode_2BD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Bitcode_3RD ##############

package LibreDwg::Dwg_Bitcode_3RD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Bitcode_3RD_x_get;
*swig_x_set = *LibreDwgc::Dwg_Bitcode_3RD_x_set;
*swig_y_get = *LibreDwgc::Dwg_Bitcode_3RD_y_get;
*swig_y_set = *LibreDwgc::Dwg_Bitcode_3RD_y_set;
*swig_z_get = *LibreDwgc::Dwg_Bitcode_3RD_z_get;
*swig_z_set = *LibreDwgc::Dwg_Bitcode_3RD_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Bitcode_3RD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Bitcode_3RD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Bitcode_3BD ##############

package LibreDwg::Dwg_Bitcode_3BD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Bitcode_3BD_x_get;
*swig_x_set = *LibreDwgc::Dwg_Bitcode_3BD_x_set;
*swig_y_get = *LibreDwgc::Dwg_Bitcode_3BD_y_get;
*swig_y_set = *LibreDwgc::Dwg_Bitcode_3BD_y_set;
*swig_z_get = *LibreDwgc::Dwg_Bitcode_3BD_z_get;
*swig_z_set = *LibreDwgc::Dwg_Bitcode_3BD_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Bitcode_3BD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Bitcode_3BD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Handle ##############

package LibreDwg::Dwg_Handle;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_code_get = *LibreDwgc::Dwg_Handle_code_get;
*swig_code_set = *LibreDwgc::Dwg_Handle_code_set;
*swig_size_get = *LibreDwgc::Dwg_Handle_size_get;
*swig_size_set = *LibreDwgc::Dwg_Handle_size_set;
*swig_value_get = *LibreDwgc::Dwg_Handle_value_get;
*swig_value_set = *LibreDwgc::Dwg_Handle_value_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Handle(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Handle($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_Ref ##############

package LibreDwg::Dwg_Object_Ref;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_obj_get = *LibreDwgc::Dwg_Object_Ref_obj_get;
*swig_obj_set = *LibreDwgc::Dwg_Object_Ref_obj_set;
*swig_handleref_get = *LibreDwgc::Dwg_Object_Ref_handleref_get;
*swig_handleref_set = *LibreDwgc::Dwg_Object_Ref_handleref_set;
*swig_absolute_ref_get = *LibreDwgc::Dwg_Object_Ref_absolute_ref_get;
*swig_absolute_ref_set = *LibreDwgc::Dwg_Object_Ref_absolute_ref_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_Ref(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_Ref($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Color ##############

package LibreDwg::Dwg_Color;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_index_get = *LibreDwgc::Dwg_Color_index_get;
*swig_index_set = *LibreDwgc::Dwg_Color_index_set;
*swig_rgb_get = *LibreDwgc::Dwg_Color_rgb_get;
*swig_rgb_set = *LibreDwgc::Dwg_Color_rgb_set;
*swig_byte_get = *LibreDwgc::Dwg_Color_byte_get;
*swig_byte_set = *LibreDwgc::Dwg_Color_byte_set;
*swig_name_get = *LibreDwgc::Dwg_Color_name_get;
*swig_name_set = *LibreDwgc::Dwg_Color_name_set;
*swig_book_name_get = *LibreDwgc::Dwg_Color_book_name_get;
*swig_book_name_set = *LibreDwgc::Dwg_Color_book_name_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Color(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Color($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::_dwg_binary_chunk ##############

package LibreDwg::_dwg_binary_chunk;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDwgc::_dwg_binary_chunk_size_get;
*swig_size_set = *LibreDwgc::_dwg_binary_chunk_size_set;
*swig_data_get = *LibreDwgc::_dwg_binary_chunk_data_get;
*swig_data_set = *LibreDwgc::_dwg_binary_chunk_data_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new__dwg_binary_chunk(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete__dwg_binary_chunk($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Resbuf ##############

package LibreDwg::Dwg_Resbuf;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDwgc::Dwg_Resbuf_type_get;
*swig_type_set = *LibreDwgc::Dwg_Resbuf_type_set;
*swig__next_get = *LibreDwgc::Dwg_Resbuf__next_get;
*swig__next_set = *LibreDwgc::Dwg_Resbuf__next_set;
*swig_value_get = *LibreDwgc::Dwg_Resbuf_value_get;
*swig_value_set = *LibreDwgc::Dwg_Resbuf_value_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Resbuf(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Resbuf($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Resbuf_value ##############

package LibreDwg::Dwg_Resbuf_value;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_str_get = *LibreDwgc::Dwg_Resbuf_value_str_get;
*swig_str_set = *LibreDwgc::Dwg_Resbuf_value_str_set;
*swig_pt_get = *LibreDwgc::Dwg_Resbuf_value_pt_get;
*swig_pt_set = *LibreDwgc::Dwg_Resbuf_value_pt_set;
*swig_i8_get = *LibreDwgc::Dwg_Resbuf_value_i8_get;
*swig_i8_set = *LibreDwgc::Dwg_Resbuf_value_i8_set;
*swig_i16_get = *LibreDwgc::Dwg_Resbuf_value_i16_get;
*swig_i16_set = *LibreDwgc::Dwg_Resbuf_value_i16_set;
*swig_i32_get = *LibreDwgc::Dwg_Resbuf_value_i32_get;
*swig_i32_set = *LibreDwgc::Dwg_Resbuf_value_i32_set;
*swig_dbl_get = *LibreDwgc::Dwg_Resbuf_value_dbl_get;
*swig_dbl_set = *LibreDwgc::Dwg_Resbuf_value_dbl_set;
*swig_hdl_get = *LibreDwgc::Dwg_Resbuf_value_hdl_get;
*swig_hdl_set = *LibreDwgc::Dwg_Resbuf_value_hdl_set;
*swig_chunk_get = *LibreDwgc::Dwg_Resbuf_value_chunk_get;
*swig_chunk_set = *LibreDwgc::Dwg_Resbuf_value_chunk_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Resbuf_value(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Resbuf_value($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Header_Variables ##############

package LibreDwg::Dwg_Header_Variables;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_bitsize_get = *LibreDwgc::Dwg_Header_Variables_bitsize_get;
*swig_bitsize_set = *LibreDwgc::Dwg_Header_Variables_bitsize_set;
*swig_unknown_0_get = *LibreDwgc::Dwg_Header_Variables_unknown_0_get;
*swig_unknown_0_set = *LibreDwgc::Dwg_Header_Variables_unknown_0_set;
*swig_unknown_1_get = *LibreDwgc::Dwg_Header_Variables_unknown_1_get;
*swig_unknown_1_set = *LibreDwgc::Dwg_Header_Variables_unknown_1_set;
*swig_unknown_2_get = *LibreDwgc::Dwg_Header_Variables_unknown_2_get;
*swig_unknown_2_set = *LibreDwgc::Dwg_Header_Variables_unknown_2_set;
*swig_unknown_3_get = *LibreDwgc::Dwg_Header_Variables_unknown_3_get;
*swig_unknown_3_set = *LibreDwgc::Dwg_Header_Variables_unknown_3_set;
*swig_unknown_4_get = *LibreDwgc::Dwg_Header_Variables_unknown_4_get;
*swig_unknown_4_set = *LibreDwgc::Dwg_Header_Variables_unknown_4_set;
*swig_unknown_5_get = *LibreDwgc::Dwg_Header_Variables_unknown_5_get;
*swig_unknown_5_set = *LibreDwgc::Dwg_Header_Variables_unknown_5_set;
*swig_unknown_6_get = *LibreDwgc::Dwg_Header_Variables_unknown_6_get;
*swig_unknown_6_set = *LibreDwgc::Dwg_Header_Variables_unknown_6_set;
*swig_unknown_7_get = *LibreDwgc::Dwg_Header_Variables_unknown_7_get;
*swig_unknown_7_set = *LibreDwgc::Dwg_Header_Variables_unknown_7_set;
*swig_unknown_8_get = *LibreDwgc::Dwg_Header_Variables_unknown_8_get;
*swig_unknown_8_set = *LibreDwgc::Dwg_Header_Variables_unknown_8_set;
*swig_unknown_9_get = *LibreDwgc::Dwg_Header_Variables_unknown_9_get;
*swig_unknown_9_set = *LibreDwgc::Dwg_Header_Variables_unknown_9_set;
*swig_unknown_10_get = *LibreDwgc::Dwg_Header_Variables_unknown_10_get;
*swig_unknown_10_set = *LibreDwgc::Dwg_Header_Variables_unknown_10_set;
*swig_current_viewport_entity_header_get = *LibreDwgc::Dwg_Header_Variables_current_viewport_entity_header_get;
*swig_current_viewport_entity_header_set = *LibreDwgc::Dwg_Header_Variables_current_viewport_entity_header_set;
*swig_DIMASO_get = *LibreDwgc::Dwg_Header_Variables_DIMASO_get;
*swig_DIMASO_set = *LibreDwgc::Dwg_Header_Variables_DIMASO_set;
*swig_DIMSHO_get = *LibreDwgc::Dwg_Header_Variables_DIMSHO_get;
*swig_DIMSHO_set = *LibreDwgc::Dwg_Header_Variables_DIMSHO_set;
*swig_DIMSAV_get = *LibreDwgc::Dwg_Header_Variables_DIMSAV_get;
*swig_DIMSAV_set = *LibreDwgc::Dwg_Header_Variables_DIMSAV_set;
*swig_PLINEGEN_get = *LibreDwgc::Dwg_Header_Variables_PLINEGEN_get;
*swig_PLINEGEN_set = *LibreDwgc::Dwg_Header_Variables_PLINEGEN_set;
*swig_ORTHOMODE_get = *LibreDwgc::Dwg_Header_Variables_ORTHOMODE_get;
*swig_ORTHOMODE_set = *LibreDwgc::Dwg_Header_Variables_ORTHOMODE_set;
*swig_REGENMODE_get = *LibreDwgc::Dwg_Header_Variables_REGENMODE_get;
*swig_REGENMODE_set = *LibreDwgc::Dwg_Header_Variables_REGENMODE_set;
*swig_FILLMODE_get = *LibreDwgc::Dwg_Header_Variables_FILLMODE_get;
*swig_FILLMODE_set = *LibreDwgc::Dwg_Header_Variables_FILLMODE_set;
*swig_QTEXTMODE_get = *LibreDwgc::Dwg_Header_Variables_QTEXTMODE_get;
*swig_QTEXTMODE_set = *LibreDwgc::Dwg_Header_Variables_QTEXTMODE_set;
*swig_PSLTSCALE_get = *LibreDwgc::Dwg_Header_Variables_PSLTSCALE_get;
*swig_PSLTSCALE_set = *LibreDwgc::Dwg_Header_Variables_PSLTSCALE_set;
*swig_LIMCHECK_get = *LibreDwgc::Dwg_Header_Variables_LIMCHECK_get;
*swig_LIMCHECK_set = *LibreDwgc::Dwg_Header_Variables_LIMCHECK_set;
*swig_BLIPMODE_get = *LibreDwgc::Dwg_Header_Variables_BLIPMODE_get;
*swig_BLIPMODE_set = *LibreDwgc::Dwg_Header_Variables_BLIPMODE_set;
*swig_unknown_11_get = *LibreDwgc::Dwg_Header_Variables_unknown_11_get;
*swig_unknown_11_set = *LibreDwgc::Dwg_Header_Variables_unknown_11_set;
*swig_user_timer_onoff_get = *LibreDwgc::Dwg_Header_Variables_user_timer_onoff_get;
*swig_user_timer_onoff_set = *LibreDwgc::Dwg_Header_Variables_user_timer_onoff_set;
*swig_SKPOLY_get = *LibreDwgc::Dwg_Header_Variables_SKPOLY_get;
*swig_SKPOLY_set = *LibreDwgc::Dwg_Header_Variables_SKPOLY_set;
*swig_ANGDIR_get = *LibreDwgc::Dwg_Header_Variables_ANGDIR_get;
*swig_ANGDIR_set = *LibreDwgc::Dwg_Header_Variables_ANGDIR_set;
*swig_SPLFRAME_get = *LibreDwgc::Dwg_Header_Variables_SPLFRAME_get;
*swig_SPLFRAME_set = *LibreDwgc::Dwg_Header_Variables_SPLFRAME_set;
*swig_ATTREQ_get = *LibreDwgc::Dwg_Header_Variables_ATTREQ_get;
*swig_ATTREQ_set = *LibreDwgc::Dwg_Header_Variables_ATTREQ_set;
*swig_ATTDIA_get = *LibreDwgc::Dwg_Header_Variables_ATTDIA_get;
*swig_ATTDIA_set = *LibreDwgc::Dwg_Header_Variables_ATTDIA_set;
*swig_MIRRTEXT_get = *LibreDwgc::Dwg_Header_Variables_MIRRTEXT_get;
*swig_MIRRTEXT_set = *LibreDwgc::Dwg_Header_Variables_MIRRTEXT_set;
*swig_WORLDVIEW_get = *LibreDwgc::Dwg_Header_Variables_WORLDVIEW_get;
*swig_WORLDVIEW_set = *LibreDwgc::Dwg_Header_Variables_WORLDVIEW_set;
*swig_WIREFRAME_get = *LibreDwgc::Dwg_Header_Variables_WIREFRAME_get;
*swig_WIREFRAME_set = *LibreDwgc::Dwg_Header_Variables_WIREFRAME_set;
*swig_TILEMODE_get = *LibreDwgc::Dwg_Header_Variables_TILEMODE_get;
*swig_TILEMODE_set = *LibreDwgc::Dwg_Header_Variables_TILEMODE_set;
*swig_PLIMCHECK_get = *LibreDwgc::Dwg_Header_Variables_PLIMCHECK_get;
*swig_PLIMCHECK_set = *LibreDwgc::Dwg_Header_Variables_PLIMCHECK_set;
*swig_VISRETAIN_get = *LibreDwgc::Dwg_Header_Variables_VISRETAIN_get;
*swig_VISRETAIN_set = *LibreDwgc::Dwg_Header_Variables_VISRETAIN_set;
*swig_DELOBJ_get = *LibreDwgc::Dwg_Header_Variables_DELOBJ_get;
*swig_DELOBJ_set = *LibreDwgc::Dwg_Header_Variables_DELOBJ_set;
*swig_DISPSILH_get = *LibreDwgc::Dwg_Header_Variables_DISPSILH_get;
*swig_DISPSILH_set = *LibreDwgc::Dwg_Header_Variables_DISPSILH_set;
*swig_PELLIPSE_get = *LibreDwgc::Dwg_Header_Variables_PELLIPSE_get;
*swig_PELLIPSE_set = *LibreDwgc::Dwg_Header_Variables_PELLIPSE_set;
*swig_SAVEIMAGES_get = *LibreDwgc::Dwg_Header_Variables_SAVEIMAGES_get;
*swig_SAVEIMAGES_set = *LibreDwgc::Dwg_Header_Variables_SAVEIMAGES_set;
*swig_PROXYGRAPHICS_get = *LibreDwgc::Dwg_Header_Variables_PROXYGRAPHICS_get;
*swig_PROXYGRAPHICS_set = *LibreDwgc::Dwg_Header_Variables_PROXYGRAPHICS_set;
*swig_DRAGMODE_get = *LibreDwgc::Dwg_Header_Variables_DRAGMODE_get;
*swig_DRAGMODE_set = *LibreDwgc::Dwg_Header_Variables_DRAGMODE_set;
*swig_TREEDEPTH_get = *LibreDwgc::Dwg_Header_Variables_TREEDEPTH_get;
*swig_TREEDEPTH_set = *LibreDwgc::Dwg_Header_Variables_TREEDEPTH_set;
*swig_LUNITS_get = *LibreDwgc::Dwg_Header_Variables_LUNITS_get;
*swig_LUNITS_set = *LibreDwgc::Dwg_Header_Variables_LUNITS_set;
*swig_LUPREC_get = *LibreDwgc::Dwg_Header_Variables_LUPREC_get;
*swig_LUPREC_set = *LibreDwgc::Dwg_Header_Variables_LUPREC_set;
*swig_AUNITS_get = *LibreDwgc::Dwg_Header_Variables_AUNITS_get;
*swig_AUNITS_set = *LibreDwgc::Dwg_Header_Variables_AUNITS_set;
*swig_AUPREC_get = *LibreDwgc::Dwg_Header_Variables_AUPREC_get;
*swig_AUPREC_set = *LibreDwgc::Dwg_Header_Variables_AUPREC_set;
*swig_OSMODE_get = *LibreDwgc::Dwg_Header_Variables_OSMODE_get;
*swig_OSMODE_set = *LibreDwgc::Dwg_Header_Variables_OSMODE_set;
*swig_ATTMODE_get = *LibreDwgc::Dwg_Header_Variables_ATTMODE_get;
*swig_ATTMODE_set = *LibreDwgc::Dwg_Header_Variables_ATTMODE_set;
*swig_COORDS_get = *LibreDwgc::Dwg_Header_Variables_COORDS_get;
*swig_COORDS_set = *LibreDwgc::Dwg_Header_Variables_COORDS_set;
*swig_PDMODE_get = *LibreDwgc::Dwg_Header_Variables_PDMODE_get;
*swig_PDMODE_set = *LibreDwgc::Dwg_Header_Variables_PDMODE_set;
*swig_PICKSTYLE_get = *LibreDwgc::Dwg_Header_Variables_PICKSTYLE_get;
*swig_PICKSTYLE_set = *LibreDwgc::Dwg_Header_Variables_PICKSTYLE_set;
*swig_unknown_12_get = *LibreDwgc::Dwg_Header_Variables_unknown_12_get;
*swig_unknown_12_set = *LibreDwgc::Dwg_Header_Variables_unknown_12_set;
*swig_unknown_13_get = *LibreDwgc::Dwg_Header_Variables_unknown_13_get;
*swig_unknown_13_set = *LibreDwgc::Dwg_Header_Variables_unknown_13_set;
*swig_unknown_14_get = *LibreDwgc::Dwg_Header_Variables_unknown_14_get;
*swig_unknown_14_set = *LibreDwgc::Dwg_Header_Variables_unknown_14_set;
*swig_USERI1_get = *LibreDwgc::Dwg_Header_Variables_USERI1_get;
*swig_USERI1_set = *LibreDwgc::Dwg_Header_Variables_USERI1_set;
*swig_USERI2_get = *LibreDwgc::Dwg_Header_Variables_USERI2_get;
*swig_USERI2_set = *LibreDwgc::Dwg_Header_Variables_USERI2_set;
*swig_USERI3_get = *LibreDwgc::Dwg_Header_Variables_USERI3_get;
*swig_USERI3_set = *LibreDwgc::Dwg_Header_Variables_USERI3_set;
*swig_USERI4_get = *LibreDwgc::Dwg_Header_Variables_USERI4_get;
*swig_USERI4_set = *LibreDwgc::Dwg_Header_Variables_USERI4_set;
*swig_USERI5_get = *LibreDwgc::Dwg_Header_Variables_USERI5_get;
*swig_USERI5_set = *LibreDwgc::Dwg_Header_Variables_USERI5_set;
*swig_SPLINESEGS_get = *LibreDwgc::Dwg_Header_Variables_SPLINESEGS_get;
*swig_SPLINESEGS_set = *LibreDwgc::Dwg_Header_Variables_SPLINESEGS_set;
*swig_SURFU_get = *LibreDwgc::Dwg_Header_Variables_SURFU_get;
*swig_SURFU_set = *LibreDwgc::Dwg_Header_Variables_SURFU_set;
*swig_SURFV_get = *LibreDwgc::Dwg_Header_Variables_SURFV_get;
*swig_SURFV_set = *LibreDwgc::Dwg_Header_Variables_SURFV_set;
*swig_SURFTYPE_get = *LibreDwgc::Dwg_Header_Variables_SURFTYPE_get;
*swig_SURFTYPE_set = *LibreDwgc::Dwg_Header_Variables_SURFTYPE_set;
*swig_SURFTAB1_get = *LibreDwgc::Dwg_Header_Variables_SURFTAB1_get;
*swig_SURFTAB1_set = *LibreDwgc::Dwg_Header_Variables_SURFTAB1_set;
*swig_SURFTAB2_get = *LibreDwgc::Dwg_Header_Variables_SURFTAB2_get;
*swig_SURFTAB2_set = *LibreDwgc::Dwg_Header_Variables_SURFTAB2_set;
*swig_SPLINETYPE_get = *LibreDwgc::Dwg_Header_Variables_SPLINETYPE_get;
*swig_SPLINETYPE_set = *LibreDwgc::Dwg_Header_Variables_SPLINETYPE_set;
*swig_SHADEDGE_get = *LibreDwgc::Dwg_Header_Variables_SHADEDGE_get;
*swig_SHADEDGE_set = *LibreDwgc::Dwg_Header_Variables_SHADEDGE_set;
*swig_SHADEDIF_get = *LibreDwgc::Dwg_Header_Variables_SHADEDIF_get;
*swig_SHADEDIF_set = *LibreDwgc::Dwg_Header_Variables_SHADEDIF_set;
*swig_UNITMODE_get = *LibreDwgc::Dwg_Header_Variables_UNITMODE_get;
*swig_UNITMODE_set = *LibreDwgc::Dwg_Header_Variables_UNITMODE_set;
*swig_MAXACTVP_get = *LibreDwgc::Dwg_Header_Variables_MAXACTVP_get;
*swig_MAXACTVP_set = *LibreDwgc::Dwg_Header_Variables_MAXACTVP_set;
*swig_ISOLINES_get = *LibreDwgc::Dwg_Header_Variables_ISOLINES_get;
*swig_ISOLINES_set = *LibreDwgc::Dwg_Header_Variables_ISOLINES_set;
*swig_CMLJUST_get = *LibreDwgc::Dwg_Header_Variables_CMLJUST_get;
*swig_CMLJUST_set = *LibreDwgc::Dwg_Header_Variables_CMLJUST_set;
*swig_TEXTQLTY_get = *LibreDwgc::Dwg_Header_Variables_TEXTQLTY_get;
*swig_TEXTQLTY_set = *LibreDwgc::Dwg_Header_Variables_TEXTQLTY_set;
*swig_unknown_14b_get = *LibreDwgc::Dwg_Header_Variables_unknown_14b_get;
*swig_unknown_14b_set = *LibreDwgc::Dwg_Header_Variables_unknown_14b_set;
*swig_LTSCALE_get = *LibreDwgc::Dwg_Header_Variables_LTSCALE_get;
*swig_LTSCALE_set = *LibreDwgc::Dwg_Header_Variables_LTSCALE_set;
*swig_VTEXTSIZE_get = *LibreDwgc::Dwg_Header_Variables_VTEXTSIZE_get;
*swig_VTEXTSIZE_set = *LibreDwgc::Dwg_Header_Variables_VTEXTSIZE_set;
*swig_TRACEWID_get = *LibreDwgc::Dwg_Header_Variables_TRACEWID_get;
*swig_TRACEWID_set = *LibreDwgc::Dwg_Header_Variables_TRACEWID_set;
*swig_SKETCHINC_get = *LibreDwgc::Dwg_Header_Variables_SKETCHINC_get;
*swig_SKETCHINC_set = *LibreDwgc::Dwg_Header_Variables_SKETCHINC_set;
*swig_FILLETRAD_get = *LibreDwgc::Dwg_Header_Variables_FILLETRAD_get;
*swig_FILLETRAD_set = *LibreDwgc::Dwg_Header_Variables_FILLETRAD_set;
*swig_THICKNESS_get = *LibreDwgc::Dwg_Header_Variables_THICKNESS_get;
*swig_THICKNESS_set = *LibreDwgc::Dwg_Header_Variables_THICKNESS_set;
*swig_ANGBASE_get = *LibreDwgc::Dwg_Header_Variables_ANGBASE_get;
*swig_ANGBASE_set = *LibreDwgc::Dwg_Header_Variables_ANGBASE_set;
*swig_PDSIZE_get = *LibreDwgc::Dwg_Header_Variables_PDSIZE_get;
*swig_PDSIZE_set = *LibreDwgc::Dwg_Header_Variables_PDSIZE_set;
*swig_PLINEWID_get = *LibreDwgc::Dwg_Header_Variables_PLINEWID_get;
*swig_PLINEWID_set = *LibreDwgc::Dwg_Header_Variables_PLINEWID_set;
*swig_USERR1_get = *LibreDwgc::Dwg_Header_Variables_USERR1_get;
*swig_USERR1_set = *LibreDwgc::Dwg_Header_Variables_USERR1_set;
*swig_USERR2_get = *LibreDwgc::Dwg_Header_Variables_USERR2_get;
*swig_USERR2_set = *LibreDwgc::Dwg_Header_Variables_USERR2_set;
*swig_USERR3_get = *LibreDwgc::Dwg_Header_Variables_USERR3_get;
*swig_USERR3_set = *LibreDwgc::Dwg_Header_Variables_USERR3_set;
*swig_USERR4_get = *LibreDwgc::Dwg_Header_Variables_USERR4_get;
*swig_USERR4_set = *LibreDwgc::Dwg_Header_Variables_USERR4_set;
*swig_USERR5_get = *LibreDwgc::Dwg_Header_Variables_USERR5_get;
*swig_USERR5_set = *LibreDwgc::Dwg_Header_Variables_USERR5_set;
*swig_CHAMFERA_get = *LibreDwgc::Dwg_Header_Variables_CHAMFERA_get;
*swig_CHAMFERA_set = *LibreDwgc::Dwg_Header_Variables_CHAMFERA_set;
*swig_CHAMFERB_get = *LibreDwgc::Dwg_Header_Variables_CHAMFERB_get;
*swig_CHAMFERB_set = *LibreDwgc::Dwg_Header_Variables_CHAMFERB_set;
*swig_CHAMFERC_get = *LibreDwgc::Dwg_Header_Variables_CHAMFERC_get;
*swig_CHAMFERC_set = *LibreDwgc::Dwg_Header_Variables_CHAMFERC_set;
*swig_CHAMFERD_get = *LibreDwgc::Dwg_Header_Variables_CHAMFERD_get;
*swig_CHAMFERD_set = *LibreDwgc::Dwg_Header_Variables_CHAMFERD_set;
*swig_FACETRES_get = *LibreDwgc::Dwg_Header_Variables_FACETRES_get;
*swig_FACETRES_set = *LibreDwgc::Dwg_Header_Variables_FACETRES_set;
*swig_CMLSCALE_get = *LibreDwgc::Dwg_Header_Variables_CMLSCALE_get;
*swig_CMLSCALE_set = *LibreDwgc::Dwg_Header_Variables_CMLSCALE_set;
*swig_CELTSCALE_get = *LibreDwgc::Dwg_Header_Variables_CELTSCALE_get;
*swig_CELTSCALE_set = *LibreDwgc::Dwg_Header_Variables_CELTSCALE_set;
*swig_MENUNAME_get = *LibreDwgc::Dwg_Header_Variables_MENUNAME_get;
*swig_MENUNAME_set = *LibreDwgc::Dwg_Header_Variables_MENUNAME_set;
*swig_TDCREATE_JULIAN_DAY_get = *LibreDwgc::Dwg_Header_Variables_TDCREATE_JULIAN_DAY_get;
*swig_TDCREATE_JULIAN_DAY_set = *LibreDwgc::Dwg_Header_Variables_TDCREATE_JULIAN_DAY_set;
*swig_TDCREATE_MILLISECONDS_get = *LibreDwgc::Dwg_Header_Variables_TDCREATE_MILLISECONDS_get;
*swig_TDCREATE_MILLISECONDS_set = *LibreDwgc::Dwg_Header_Variables_TDCREATE_MILLISECONDS_set;
*swig_TDUPDATE_JULIAN_DAY_get = *LibreDwgc::Dwg_Header_Variables_TDUPDATE_JULIAN_DAY_get;
*swig_TDUPDATE_JULIAN_DAY_set = *LibreDwgc::Dwg_Header_Variables_TDUPDATE_JULIAN_DAY_set;
*swig_TDUPDATE_MILLISECONDS_get = *LibreDwgc::Dwg_Header_Variables_TDUPDATE_MILLISECONDS_get;
*swig_TDUPDATE_MILLISECONDS_set = *LibreDwgc::Dwg_Header_Variables_TDUPDATE_MILLISECONDS_set;
*swig_unknown_15_get = *LibreDwgc::Dwg_Header_Variables_unknown_15_get;
*swig_unknown_15_set = *LibreDwgc::Dwg_Header_Variables_unknown_15_set;
*swig_unknown_16_get = *LibreDwgc::Dwg_Header_Variables_unknown_16_get;
*swig_unknown_16_set = *LibreDwgc::Dwg_Header_Variables_unknown_16_set;
*swig_unknown_17_get = *LibreDwgc::Dwg_Header_Variables_unknown_17_get;
*swig_unknown_17_set = *LibreDwgc::Dwg_Header_Variables_unknown_17_set;
*swig_TDINDWG_DAYS_get = *LibreDwgc::Dwg_Header_Variables_TDINDWG_DAYS_get;
*swig_TDINDWG_DAYS_set = *LibreDwgc::Dwg_Header_Variables_TDINDWG_DAYS_set;
*swig_TDINDWG_MILLISECONDS_get = *LibreDwgc::Dwg_Header_Variables_TDINDWG_MILLISECONDS_get;
*swig_TDINDWG_MILLISECONDS_set = *LibreDwgc::Dwg_Header_Variables_TDINDWG_MILLISECONDS_set;
*swig_TDUSRTIMER_DAYS_get = *LibreDwgc::Dwg_Header_Variables_TDUSRTIMER_DAYS_get;
*swig_TDUSRTIMER_DAYS_set = *LibreDwgc::Dwg_Header_Variables_TDUSRTIMER_DAYS_set;
*swig_TDUSRTIMER_MILLISECONDS_get = *LibreDwgc::Dwg_Header_Variables_TDUSRTIMER_MILLISECONDS_get;
*swig_TDUSRTIMER_MILLISECONDS_set = *LibreDwgc::Dwg_Header_Variables_TDUSRTIMER_MILLISECONDS_set;
*swig_CECOLOR_get = *LibreDwgc::Dwg_Header_Variables_CECOLOR_get;
*swig_CECOLOR_set = *LibreDwgc::Dwg_Header_Variables_CECOLOR_set;
*swig_HANDSEED_get = *LibreDwgc::Dwg_Header_Variables_HANDSEED_get;
*swig_HANDSEED_set = *LibreDwgc::Dwg_Header_Variables_HANDSEED_set;
*swig_CLAYER_get = *LibreDwgc::Dwg_Header_Variables_CLAYER_get;
*swig_CLAYER_set = *LibreDwgc::Dwg_Header_Variables_CLAYER_set;
*swig_TEXTSTYLE_get = *LibreDwgc::Dwg_Header_Variables_TEXTSTYLE_get;
*swig_TEXTSTYLE_set = *LibreDwgc::Dwg_Header_Variables_TEXTSTYLE_set;
*swig_CELTYPE_get = *LibreDwgc::Dwg_Header_Variables_CELTYPE_get;
*swig_CELTYPE_set = *LibreDwgc::Dwg_Header_Variables_CELTYPE_set;
*swig_CMATERIAL_get = *LibreDwgc::Dwg_Header_Variables_CMATERIAL_get;
*swig_CMATERIAL_set = *LibreDwgc::Dwg_Header_Variables_CMATERIAL_set;
*swig_DIMSTYLE_get = *LibreDwgc::Dwg_Header_Variables_DIMSTYLE_get;
*swig_DIMSTYLE_set = *LibreDwgc::Dwg_Header_Variables_DIMSTYLE_set;
*swig_CMLSTYLE_get = *LibreDwgc::Dwg_Header_Variables_CMLSTYLE_get;
*swig_CMLSTYLE_set = *LibreDwgc::Dwg_Header_Variables_CMLSTYLE_set;
*swig_PSVPSCALE_get = *LibreDwgc::Dwg_Header_Variables_PSVPSCALE_get;
*swig_PSVPSCALE_set = *LibreDwgc::Dwg_Header_Variables_PSVPSCALE_set;
*swig_INSBASE_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_INSBASE_PSPACE_get;
*swig_INSBASE_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_INSBASE_PSPACE_set;
*swig_EXTMIN_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_EXTMIN_PSPACE_get;
*swig_EXTMIN_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_EXTMIN_PSPACE_set;
*swig_EXTMAX_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_EXTMAX_PSPACE_get;
*swig_EXTMAX_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_EXTMAX_PSPACE_set;
*swig_LIMMIN_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_LIMMIN_PSPACE_get;
*swig_LIMMIN_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_LIMMIN_PSPACE_set;
*swig_LIMMAX_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_LIMMAX_PSPACE_get;
*swig_LIMMAX_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_LIMMAX_PSPACE_set;
*swig_ELEVATION_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_ELEVATION_PSPACE_get;
*swig_ELEVATION_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_ELEVATION_PSPACE_set;
*swig_UCSORG_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSORG_PSPACE_get;
*swig_UCSORG_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSORG_PSPACE_set;
*swig_UCSXDIR_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSXDIR_PSPACE_get;
*swig_UCSXDIR_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSXDIR_PSPACE_set;
*swig_UCSYDIR_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSYDIR_PSPACE_get;
*swig_UCSYDIR_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSYDIR_PSPACE_set;
*swig_UCSNAME_PSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSNAME_PSPACE_get;
*swig_UCSNAME_PSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSNAME_PSPACE_set;
*swig_PUCSBASE_get = *LibreDwgc::Dwg_Header_Variables_PUCSBASE_get;
*swig_PUCSBASE_set = *LibreDwgc::Dwg_Header_Variables_PUCSBASE_set;
*swig_PUCSORTHOVIEW_get = *LibreDwgc::Dwg_Header_Variables_PUCSORTHOVIEW_get;
*swig_PUCSORTHOVIEW_set = *LibreDwgc::Dwg_Header_Variables_PUCSORTHOVIEW_set;
*swig_PUCSORTHOREF_get = *LibreDwgc::Dwg_Header_Variables_PUCSORTHOREF_get;
*swig_PUCSORTHOREF_set = *LibreDwgc::Dwg_Header_Variables_PUCSORTHOREF_set;
*swig_PUCSORGTOP_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGTOP_get;
*swig_PUCSORGTOP_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGTOP_set;
*swig_PUCSORGBOTTOM_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGBOTTOM_get;
*swig_PUCSORGBOTTOM_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGBOTTOM_set;
*swig_PUCSORGLEFT_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGLEFT_get;
*swig_PUCSORGLEFT_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGLEFT_set;
*swig_PUCSORGRIGHT_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGRIGHT_get;
*swig_PUCSORGRIGHT_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGRIGHT_set;
*swig_PUCSORGFRONT_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGFRONT_get;
*swig_PUCSORGFRONT_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGFRONT_set;
*swig_PUCSORGBACK_get = *LibreDwgc::Dwg_Header_Variables_PUCSORGBACK_get;
*swig_PUCSORGBACK_set = *LibreDwgc::Dwg_Header_Variables_PUCSORGBACK_set;
*swig_INSBASE_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_INSBASE_MSPACE_get;
*swig_INSBASE_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_INSBASE_MSPACE_set;
*swig_EXTMIN_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_EXTMIN_MSPACE_get;
*swig_EXTMIN_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_EXTMIN_MSPACE_set;
*swig_EXTMAX_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_EXTMAX_MSPACE_get;
*swig_EXTMAX_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_EXTMAX_MSPACE_set;
*swig_LIMMIN_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_LIMMIN_MSPACE_get;
*swig_LIMMIN_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_LIMMIN_MSPACE_set;
*swig_LIMMAX_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_LIMMAX_MSPACE_get;
*swig_LIMMAX_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_LIMMAX_MSPACE_set;
*swig_ELEVATION_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_ELEVATION_MSPACE_get;
*swig_ELEVATION_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_ELEVATION_MSPACE_set;
*swig_UCSORG_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSORG_MSPACE_get;
*swig_UCSORG_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSORG_MSPACE_set;
*swig_UCSXDIR_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSXDIR_MSPACE_get;
*swig_UCSXDIR_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSXDIR_MSPACE_set;
*swig_UCSYDIR_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSYDIR_MSPACE_get;
*swig_UCSYDIR_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSYDIR_MSPACE_set;
*swig_UCSNAME_MSPACE_get = *LibreDwgc::Dwg_Header_Variables_UCSNAME_MSPACE_get;
*swig_UCSNAME_MSPACE_set = *LibreDwgc::Dwg_Header_Variables_UCSNAME_MSPACE_set;
*swig_UCSBASE_get = *LibreDwgc::Dwg_Header_Variables_UCSBASE_get;
*swig_UCSBASE_set = *LibreDwgc::Dwg_Header_Variables_UCSBASE_set;
*swig_UCSORTHOVIEW_get = *LibreDwgc::Dwg_Header_Variables_UCSORTHOVIEW_get;
*swig_UCSORTHOVIEW_set = *LibreDwgc::Dwg_Header_Variables_UCSORTHOVIEW_set;
*swig_UCSORTHOREF_get = *LibreDwgc::Dwg_Header_Variables_UCSORTHOREF_get;
*swig_UCSORTHOREF_set = *LibreDwgc::Dwg_Header_Variables_UCSORTHOREF_set;
*swig_UCSORGTOP_get = *LibreDwgc::Dwg_Header_Variables_UCSORGTOP_get;
*swig_UCSORGTOP_set = *LibreDwgc::Dwg_Header_Variables_UCSORGTOP_set;
*swig_UCSORGBOTTOM_get = *LibreDwgc::Dwg_Header_Variables_UCSORGBOTTOM_get;
*swig_UCSORGBOTTOM_set = *LibreDwgc::Dwg_Header_Variables_UCSORGBOTTOM_set;
*swig_UCSORGLEFT_get = *LibreDwgc::Dwg_Header_Variables_UCSORGLEFT_get;
*swig_UCSORGLEFT_set = *LibreDwgc::Dwg_Header_Variables_UCSORGLEFT_set;
*swig_UCSORGRIGHT_get = *LibreDwgc::Dwg_Header_Variables_UCSORGRIGHT_get;
*swig_UCSORGRIGHT_set = *LibreDwgc::Dwg_Header_Variables_UCSORGRIGHT_set;
*swig_UCSORGFRONT_get = *LibreDwgc::Dwg_Header_Variables_UCSORGFRONT_get;
*swig_UCSORGFRONT_set = *LibreDwgc::Dwg_Header_Variables_UCSORGFRONT_set;
*swig_UCSORGBACK_get = *LibreDwgc::Dwg_Header_Variables_UCSORGBACK_get;
*swig_UCSORGBACK_set = *LibreDwgc::Dwg_Header_Variables_UCSORGBACK_set;
*swig_DIMPOST_get = *LibreDwgc::Dwg_Header_Variables_DIMPOST_get;
*swig_DIMPOST_set = *LibreDwgc::Dwg_Header_Variables_DIMPOST_set;
*swig_DIMAPOST_get = *LibreDwgc::Dwg_Header_Variables_DIMAPOST_get;
*swig_DIMAPOST_set = *LibreDwgc::Dwg_Header_Variables_DIMAPOST_set;
*swig_DIMTOL_get = *LibreDwgc::Dwg_Header_Variables_DIMTOL_get;
*swig_DIMTOL_set = *LibreDwgc::Dwg_Header_Variables_DIMTOL_set;
*swig_DIMLIM_get = *LibreDwgc::Dwg_Header_Variables_DIMLIM_get;
*swig_DIMLIM_set = *LibreDwgc::Dwg_Header_Variables_DIMLIM_set;
*swig_DIMTIH_get = *LibreDwgc::Dwg_Header_Variables_DIMTIH_get;
*swig_DIMTIH_set = *LibreDwgc::Dwg_Header_Variables_DIMTIH_set;
*swig_DIMTOH_get = *LibreDwgc::Dwg_Header_Variables_DIMTOH_get;
*swig_DIMTOH_set = *LibreDwgc::Dwg_Header_Variables_DIMTOH_set;
*swig_DIMSE1_get = *LibreDwgc::Dwg_Header_Variables_DIMSE1_get;
*swig_DIMSE1_set = *LibreDwgc::Dwg_Header_Variables_DIMSE1_set;
*swig_DIMSE2_get = *LibreDwgc::Dwg_Header_Variables_DIMSE2_get;
*swig_DIMSE2_set = *LibreDwgc::Dwg_Header_Variables_DIMSE2_set;
*swig_DIMALT_get = *LibreDwgc::Dwg_Header_Variables_DIMALT_get;
*swig_DIMALT_set = *LibreDwgc::Dwg_Header_Variables_DIMALT_set;
*swig_DIMTOFL_get = *LibreDwgc::Dwg_Header_Variables_DIMTOFL_get;
*swig_DIMTOFL_set = *LibreDwgc::Dwg_Header_Variables_DIMTOFL_set;
*swig_DIMSAH_get = *LibreDwgc::Dwg_Header_Variables_DIMSAH_get;
*swig_DIMSAH_set = *LibreDwgc::Dwg_Header_Variables_DIMSAH_set;
*swig_DIMTIX_get = *LibreDwgc::Dwg_Header_Variables_DIMTIX_get;
*swig_DIMTIX_set = *LibreDwgc::Dwg_Header_Variables_DIMTIX_set;
*swig_DIMSOXD_get = *LibreDwgc::Dwg_Header_Variables_DIMSOXD_get;
*swig_DIMSOXD_set = *LibreDwgc::Dwg_Header_Variables_DIMSOXD_set;
*swig_DIMALTD_get = *LibreDwgc::Dwg_Header_Variables_DIMALTD_get;
*swig_DIMALTD_set = *LibreDwgc::Dwg_Header_Variables_DIMALTD_set;
*swig_DIMZIN_get = *LibreDwgc::Dwg_Header_Variables_DIMZIN_get;
*swig_DIMZIN_set = *LibreDwgc::Dwg_Header_Variables_DIMZIN_set;
*swig_DIMSD1_get = *LibreDwgc::Dwg_Header_Variables_DIMSD1_get;
*swig_DIMSD1_set = *LibreDwgc::Dwg_Header_Variables_DIMSD1_set;
*swig_DIMSD2_get = *LibreDwgc::Dwg_Header_Variables_DIMSD2_get;
*swig_DIMSD2_set = *LibreDwgc::Dwg_Header_Variables_DIMSD2_set;
*swig_DIMTOLJ_get = *LibreDwgc::Dwg_Header_Variables_DIMTOLJ_get;
*swig_DIMTOLJ_set = *LibreDwgc::Dwg_Header_Variables_DIMTOLJ_set;
*swig_DIMJUST_get = *LibreDwgc::Dwg_Header_Variables_DIMJUST_get;
*swig_DIMJUST_set = *LibreDwgc::Dwg_Header_Variables_DIMJUST_set;
*swig_DIMFIT_get = *LibreDwgc::Dwg_Header_Variables_DIMFIT_get;
*swig_DIMFIT_set = *LibreDwgc::Dwg_Header_Variables_DIMFIT_set;
*swig_DIMUPT_get = *LibreDwgc::Dwg_Header_Variables_DIMUPT_get;
*swig_DIMUPT_set = *LibreDwgc::Dwg_Header_Variables_DIMUPT_set;
*swig_DIMTZIN_get = *LibreDwgc::Dwg_Header_Variables_DIMTZIN_get;
*swig_DIMTZIN_set = *LibreDwgc::Dwg_Header_Variables_DIMTZIN_set;
*swig_DIMMALTZ_get = *LibreDwgc::Dwg_Header_Variables_DIMMALTZ_get;
*swig_DIMMALTZ_set = *LibreDwgc::Dwg_Header_Variables_DIMMALTZ_set;
*swig_DIMMALTTZ_get = *LibreDwgc::Dwg_Header_Variables_DIMMALTTZ_get;
*swig_DIMMALTTZ_set = *LibreDwgc::Dwg_Header_Variables_DIMMALTTZ_set;
*swig_DIMTAD_get = *LibreDwgc::Dwg_Header_Variables_DIMTAD_get;
*swig_DIMTAD_set = *LibreDwgc::Dwg_Header_Variables_DIMTAD_set;
*swig_DIMUNIT_get = *LibreDwgc::Dwg_Header_Variables_DIMUNIT_get;
*swig_DIMUNIT_set = *LibreDwgc::Dwg_Header_Variables_DIMUNIT_set;
*swig_DIMAUNIT_get = *LibreDwgc::Dwg_Header_Variables_DIMAUNIT_get;
*swig_DIMAUNIT_set = *LibreDwgc::Dwg_Header_Variables_DIMAUNIT_set;
*swig_DIMDEC_get = *LibreDwgc::Dwg_Header_Variables_DIMDEC_get;
*swig_DIMDEC_set = *LibreDwgc::Dwg_Header_Variables_DIMDEC_set;
*swig_DIMTDEC_get = *LibreDwgc::Dwg_Header_Variables_DIMTDEC_get;
*swig_DIMTDEC_set = *LibreDwgc::Dwg_Header_Variables_DIMTDEC_set;
*swig_DIMALTU_get = *LibreDwgc::Dwg_Header_Variables_DIMALTU_get;
*swig_DIMALTU_set = *LibreDwgc::Dwg_Header_Variables_DIMALTU_set;
*swig_DIMALTTD_get = *LibreDwgc::Dwg_Header_Variables_DIMALTTD_get;
*swig_DIMALTTD_set = *LibreDwgc::Dwg_Header_Variables_DIMALTTD_set;
*swig_DIMTXSTY_get = *LibreDwgc::Dwg_Header_Variables_DIMTXSTY_get;
*swig_DIMTXSTY_set = *LibreDwgc::Dwg_Header_Variables_DIMTXSTY_set;
*swig_DIMSCALE_get = *LibreDwgc::Dwg_Header_Variables_DIMSCALE_get;
*swig_DIMSCALE_set = *LibreDwgc::Dwg_Header_Variables_DIMSCALE_set;
*swig_DIMASZ_get = *LibreDwgc::Dwg_Header_Variables_DIMASZ_get;
*swig_DIMASZ_set = *LibreDwgc::Dwg_Header_Variables_DIMASZ_set;
*swig_DIMEXO_get = *LibreDwgc::Dwg_Header_Variables_DIMEXO_get;
*swig_DIMEXO_set = *LibreDwgc::Dwg_Header_Variables_DIMEXO_set;
*swig_DIMDLI_get = *LibreDwgc::Dwg_Header_Variables_DIMDLI_get;
*swig_DIMDLI_set = *LibreDwgc::Dwg_Header_Variables_DIMDLI_set;
*swig_DIMEXE_get = *LibreDwgc::Dwg_Header_Variables_DIMEXE_get;
*swig_DIMEXE_set = *LibreDwgc::Dwg_Header_Variables_DIMEXE_set;
*swig_DIMRND_get = *LibreDwgc::Dwg_Header_Variables_DIMRND_get;
*swig_DIMRND_set = *LibreDwgc::Dwg_Header_Variables_DIMRND_set;
*swig_DIMDLE_get = *LibreDwgc::Dwg_Header_Variables_DIMDLE_get;
*swig_DIMDLE_set = *LibreDwgc::Dwg_Header_Variables_DIMDLE_set;
*swig_DIMMTP_get = *LibreDwgc::Dwg_Header_Variables_DIMMTP_get;
*swig_DIMMTP_set = *LibreDwgc::Dwg_Header_Variables_DIMMTP_set;
*swig_DIMMTM_get = *LibreDwgc::Dwg_Header_Variables_DIMMTM_get;
*swig_DIMMTM_set = *LibreDwgc::Dwg_Header_Variables_DIMMTM_set;
*swig_DIMFXL_get = *LibreDwgc::Dwg_Header_Variables_DIMFXL_get;
*swig_DIMFXL_set = *LibreDwgc::Dwg_Header_Variables_DIMFXL_set;
*swig_DIMJOGANG_get = *LibreDwgc::Dwg_Header_Variables_DIMJOGANG_get;
*swig_DIMJOGANG_set = *LibreDwgc::Dwg_Header_Variables_DIMJOGANG_set;
*swig_DIMTFILL_get = *LibreDwgc::Dwg_Header_Variables_DIMTFILL_get;
*swig_DIMTFILL_set = *LibreDwgc::Dwg_Header_Variables_DIMTFILL_set;
*swig_DIMTFILLCLR_get = *LibreDwgc::Dwg_Header_Variables_DIMTFILLCLR_get;
*swig_DIMTFILLCLR_set = *LibreDwgc::Dwg_Header_Variables_DIMTFILLCLR_set;
*swig_DIMAZIN_get = *LibreDwgc::Dwg_Header_Variables_DIMAZIN_get;
*swig_DIMAZIN_set = *LibreDwgc::Dwg_Header_Variables_DIMAZIN_set;
*swig_DIMARCSYM_get = *LibreDwgc::Dwg_Header_Variables_DIMARCSYM_get;
*swig_DIMARCSYM_set = *LibreDwgc::Dwg_Header_Variables_DIMARCSYM_set;
*swig_DIMTXT_get = *LibreDwgc::Dwg_Header_Variables_DIMTXT_get;
*swig_DIMTXT_set = *LibreDwgc::Dwg_Header_Variables_DIMTXT_set;
*swig_DIMCEN_get = *LibreDwgc::Dwg_Header_Variables_DIMCEN_get;
*swig_DIMCEN_set = *LibreDwgc::Dwg_Header_Variables_DIMCEN_set;
*swig_DIMTSZ_get = *LibreDwgc::Dwg_Header_Variables_DIMTSZ_get;
*swig_DIMTSZ_set = *LibreDwgc::Dwg_Header_Variables_DIMTSZ_set;
*swig_DIMALTF_get = *LibreDwgc::Dwg_Header_Variables_DIMALTF_get;
*swig_DIMALTF_set = *LibreDwgc::Dwg_Header_Variables_DIMALTF_set;
*swig_DIMLFAC_get = *LibreDwgc::Dwg_Header_Variables_DIMLFAC_get;
*swig_DIMLFAC_set = *LibreDwgc::Dwg_Header_Variables_DIMLFAC_set;
*swig_DIMTVP_get = *LibreDwgc::Dwg_Header_Variables_DIMTVP_get;
*swig_DIMTVP_set = *LibreDwgc::Dwg_Header_Variables_DIMTVP_set;
*swig_DIMTFAC_get = *LibreDwgc::Dwg_Header_Variables_DIMTFAC_get;
*swig_DIMTFAC_set = *LibreDwgc::Dwg_Header_Variables_DIMTFAC_set;
*swig_DIMGAP_get = *LibreDwgc::Dwg_Header_Variables_DIMGAP_get;
*swig_DIMGAP_set = *LibreDwgc::Dwg_Header_Variables_DIMGAP_set;
*swig_DIMPOST_T_get = *LibreDwgc::Dwg_Header_Variables_DIMPOST_T_get;
*swig_DIMPOST_T_set = *LibreDwgc::Dwg_Header_Variables_DIMPOST_T_set;
*swig_DIMAPOST_T_get = *LibreDwgc::Dwg_Header_Variables_DIMAPOST_T_get;
*swig_DIMAPOST_T_set = *LibreDwgc::Dwg_Header_Variables_DIMAPOST_T_set;
*swig_DIMBLK_T_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK_T_get;
*swig_DIMBLK_T_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK_T_set;
*swig_DIMBLK1_T_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK1_T_get;
*swig_DIMBLK1_T_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK1_T_set;
*swig_DIMBLK2_T_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK2_T_get;
*swig_DIMBLK2_T_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK2_T_set;
*swig_DIMALTRND_get = *LibreDwgc::Dwg_Header_Variables_DIMALTRND_get;
*swig_DIMALTRND_set = *LibreDwgc::Dwg_Header_Variables_DIMALTRND_set;
*swig_DIMCLRD_get = *LibreDwgc::Dwg_Header_Variables_DIMCLRD_get;
*swig_DIMCLRD_set = *LibreDwgc::Dwg_Header_Variables_DIMCLRD_set;
*swig_DIMCLRE_get = *LibreDwgc::Dwg_Header_Variables_DIMCLRE_get;
*swig_DIMCLRE_set = *LibreDwgc::Dwg_Header_Variables_DIMCLRE_set;
*swig_DIMCLRT_get = *LibreDwgc::Dwg_Header_Variables_DIMCLRT_get;
*swig_DIMCLRT_set = *LibreDwgc::Dwg_Header_Variables_DIMCLRT_set;
*swig_DIMADEC_get = *LibreDwgc::Dwg_Header_Variables_DIMADEC_get;
*swig_DIMADEC_set = *LibreDwgc::Dwg_Header_Variables_DIMADEC_set;
*swig_DIMFRAC_get = *LibreDwgc::Dwg_Header_Variables_DIMFRAC_get;
*swig_DIMFRAC_set = *LibreDwgc::Dwg_Header_Variables_DIMFRAC_set;
*swig_DIMLUNIT_get = *LibreDwgc::Dwg_Header_Variables_DIMLUNIT_get;
*swig_DIMLUNIT_set = *LibreDwgc::Dwg_Header_Variables_DIMLUNIT_set;
*swig_DIMDSEP_get = *LibreDwgc::Dwg_Header_Variables_DIMDSEP_get;
*swig_DIMDSEP_set = *LibreDwgc::Dwg_Header_Variables_DIMDSEP_set;
*swig_DIMTMOVE_get = *LibreDwgc::Dwg_Header_Variables_DIMTMOVE_get;
*swig_DIMTMOVE_set = *LibreDwgc::Dwg_Header_Variables_DIMTMOVE_set;
*swig_DIMALTZ_get = *LibreDwgc::Dwg_Header_Variables_DIMALTZ_get;
*swig_DIMALTZ_set = *LibreDwgc::Dwg_Header_Variables_DIMALTZ_set;
*swig_DIMALTTZ_get = *LibreDwgc::Dwg_Header_Variables_DIMALTTZ_get;
*swig_DIMALTTZ_set = *LibreDwgc::Dwg_Header_Variables_DIMALTTZ_set;
*swig_DIMATFIT_get = *LibreDwgc::Dwg_Header_Variables_DIMATFIT_get;
*swig_DIMATFIT_set = *LibreDwgc::Dwg_Header_Variables_DIMATFIT_set;
*swig_DIMFXLON_get = *LibreDwgc::Dwg_Header_Variables_DIMFXLON_get;
*swig_DIMFXLON_set = *LibreDwgc::Dwg_Header_Variables_DIMFXLON_set;
*swig_DIMTXTSTY_get = *LibreDwgc::Dwg_Header_Variables_DIMTXTSTY_get;
*swig_DIMTXTSTY_set = *LibreDwgc::Dwg_Header_Variables_DIMTXTSTY_set;
*swig_DIMLDRBLK_get = *LibreDwgc::Dwg_Header_Variables_DIMLDRBLK_get;
*swig_DIMLDRBLK_set = *LibreDwgc::Dwg_Header_Variables_DIMLDRBLK_set;
*swig_DIMBLK_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK_get;
*swig_DIMBLK_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK_set;
*swig_DIMBLK1_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK1_get;
*swig_DIMBLK1_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK1_set;
*swig_DIMBLK2_get = *LibreDwgc::Dwg_Header_Variables_DIMBLK2_get;
*swig_DIMBLK2_set = *LibreDwgc::Dwg_Header_Variables_DIMBLK2_set;
*swig_DIMLTYPE_get = *LibreDwgc::Dwg_Header_Variables_DIMLTYPE_get;
*swig_DIMLTYPE_set = *LibreDwgc::Dwg_Header_Variables_DIMLTYPE_set;
*swig_DIMLTEX1_get = *LibreDwgc::Dwg_Header_Variables_DIMLTEX1_get;
*swig_DIMLTEX1_set = *LibreDwgc::Dwg_Header_Variables_DIMLTEX1_set;
*swig_DIMLTEX2_get = *LibreDwgc::Dwg_Header_Variables_DIMLTEX2_get;
*swig_DIMLTEX2_set = *LibreDwgc::Dwg_Header_Variables_DIMLTEX2_set;
*swig_DIMLWD_get = *LibreDwgc::Dwg_Header_Variables_DIMLWD_get;
*swig_DIMLWD_set = *LibreDwgc::Dwg_Header_Variables_DIMLWD_set;
*swig_DIMLWE_get = *LibreDwgc::Dwg_Header_Variables_DIMLWE_get;
*swig_DIMLWE_set = *LibreDwgc::Dwg_Header_Variables_DIMLWE_set;
*swig_BLOCK_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_BLOCK_CONTROL_OBJECT_get;
*swig_BLOCK_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_BLOCK_CONTROL_OBJECT_set;
*swig_LAYER_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_LAYER_CONTROL_OBJECT_get;
*swig_LAYER_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_LAYER_CONTROL_OBJECT_set;
*swig_STYLE_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_STYLE_CONTROL_OBJECT_get;
*swig_STYLE_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_STYLE_CONTROL_OBJECT_set;
*swig_LINETYPE_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_LINETYPE_CONTROL_OBJECT_get;
*swig_LINETYPE_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_LINETYPE_CONTROL_OBJECT_set;
*swig_VIEW_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_VIEW_CONTROL_OBJECT_get;
*swig_VIEW_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_VIEW_CONTROL_OBJECT_set;
*swig_UCS_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_UCS_CONTROL_OBJECT_get;
*swig_UCS_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_UCS_CONTROL_OBJECT_set;
*swig_VPORT_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_VPORT_CONTROL_OBJECT_get;
*swig_VPORT_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_VPORT_CONTROL_OBJECT_set;
*swig_APPID_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_APPID_CONTROL_OBJECT_get;
*swig_APPID_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_APPID_CONTROL_OBJECT_set;
*swig_DIMSTYLE_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_DIMSTYLE_CONTROL_OBJECT_get;
*swig_DIMSTYLE_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_DIMSTYLE_CONTROL_OBJECT_set;
*swig_VIEWPORT_ENTITY_HEADER_CONTROL_OBJECT_get = *LibreDwgc::Dwg_Header_Variables_VIEWPORT_ENTITY_HEADER_CONTROL_OBJECT_get;
*swig_VIEWPORT_ENTITY_HEADER_CONTROL_OBJECT_set = *LibreDwgc::Dwg_Header_Variables_VIEWPORT_ENTITY_HEADER_CONTROL_OBJECT_set;
*swig_DICTIONARY_ACAD_GROUP_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_ACAD_GROUP_get;
*swig_DICTIONARY_ACAD_GROUP_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_ACAD_GROUP_set;
*swig_DICTIONARY_ACAD_MLINESTYLE_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_ACAD_MLINESTYLE_get;
*swig_DICTIONARY_ACAD_MLINESTYLE_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_ACAD_MLINESTYLE_set;
*swig_DICTIONARY_NAMED_OBJECTS_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_NAMED_OBJECTS_get;
*swig_DICTIONARY_NAMED_OBJECTS_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_NAMED_OBJECTS_set;
*swig_unknown_18_get = *LibreDwgc::Dwg_Header_Variables_unknown_18_get;
*swig_unknown_18_set = *LibreDwgc::Dwg_Header_Variables_unknown_18_set;
*swig_unknown_19_get = *LibreDwgc::Dwg_Header_Variables_unknown_19_get;
*swig_unknown_19_set = *LibreDwgc::Dwg_Header_Variables_unknown_19_set;
*swig_HYPERLINKBASE_get = *LibreDwgc::Dwg_Header_Variables_HYPERLINKBASE_get;
*swig_HYPERLINKBASE_set = *LibreDwgc::Dwg_Header_Variables_HYPERLINKBASE_set;
*swig_STYLESHEET_get = *LibreDwgc::Dwg_Header_Variables_STYLESHEET_get;
*swig_STYLESHEET_set = *LibreDwgc::Dwg_Header_Variables_STYLESHEET_set;
*swig_DICTIONARY_LAYOUTS_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_LAYOUTS_get;
*swig_DICTIONARY_LAYOUTS_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_LAYOUTS_set;
*swig_DICTIONARY_PLOTSETTINGS_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_PLOTSETTINGS_get;
*swig_DICTIONARY_PLOTSETTINGS_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_PLOTSETTINGS_set;
*swig_DICTIONARY_PLOTSTYLES_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_PLOTSTYLES_get;
*swig_DICTIONARY_PLOTSTYLES_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_PLOTSTYLES_set;
*swig_DICTIONARY_MATERIALS_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_MATERIALS_get;
*swig_DICTIONARY_MATERIALS_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_MATERIALS_set;
*swig_DICTIONARY_COLORS_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_COLORS_get;
*swig_DICTIONARY_COLORS_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_COLORS_set;
*swig_DICTIONARY_VISUALSTYLE_get = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_VISUALSTYLE_get;
*swig_DICTIONARY_VISUALSTYLE_set = *LibreDwgc::Dwg_Header_Variables_DICTIONARY_VISUALSTYLE_set;
*swig_FLAGS_get = *LibreDwgc::Dwg_Header_Variables_FLAGS_get;
*swig_FLAGS_set = *LibreDwgc::Dwg_Header_Variables_FLAGS_set;
*swig_INSUNITS_get = *LibreDwgc::Dwg_Header_Variables_INSUNITS_get;
*swig_INSUNITS_set = *LibreDwgc::Dwg_Header_Variables_INSUNITS_set;
*swig_CEPSNTYPE_get = *LibreDwgc::Dwg_Header_Variables_CEPSNTYPE_get;
*swig_CEPSNTYPE_set = *LibreDwgc::Dwg_Header_Variables_CEPSNTYPE_set;
*swig_CPSNID_get = *LibreDwgc::Dwg_Header_Variables_CPSNID_get;
*swig_CPSNID_set = *LibreDwgc::Dwg_Header_Variables_CPSNID_set;
*swig_FINGERPRINTGUID_get = *LibreDwgc::Dwg_Header_Variables_FINGERPRINTGUID_get;
*swig_FINGERPRINTGUID_set = *LibreDwgc::Dwg_Header_Variables_FINGERPRINTGUID_set;
*swig_VERSIONGUID_get = *LibreDwgc::Dwg_Header_Variables_VERSIONGUID_get;
*swig_VERSIONGUID_set = *LibreDwgc::Dwg_Header_Variables_VERSIONGUID_set;
*swig_SORTENTS_get = *LibreDwgc::Dwg_Header_Variables_SORTENTS_get;
*swig_SORTENTS_set = *LibreDwgc::Dwg_Header_Variables_SORTENTS_set;
*swig_IDEXCTL_get = *LibreDwgc::Dwg_Header_Variables_IDEXCTL_get;
*swig_IDEXCTL_set = *LibreDwgc::Dwg_Header_Variables_IDEXCTL_set;
*swig_HIDETEXT_get = *LibreDwgc::Dwg_Header_Variables_HIDETEXT_get;
*swig_HIDETEXT_set = *LibreDwgc::Dwg_Header_Variables_HIDETEXT_set;
*swig_XCLIPFRAME_get = *LibreDwgc::Dwg_Header_Variables_XCLIPFRAME_get;
*swig_XCLIPFRAME_set = *LibreDwgc::Dwg_Header_Variables_XCLIPFRAME_set;
*swig_DIMASSOC_get = *LibreDwgc::Dwg_Header_Variables_DIMASSOC_get;
*swig_DIMASSOC_set = *LibreDwgc::Dwg_Header_Variables_DIMASSOC_set;
*swig_HALOGAP_get = *LibreDwgc::Dwg_Header_Variables_HALOGAP_get;
*swig_HALOGAP_set = *LibreDwgc::Dwg_Header_Variables_HALOGAP_set;
*swig_OBSCUREDCOLOR_get = *LibreDwgc::Dwg_Header_Variables_OBSCUREDCOLOR_get;
*swig_OBSCUREDCOLOR_set = *LibreDwgc::Dwg_Header_Variables_OBSCUREDCOLOR_set;
*swig_INTERSECTIONCOLOR_get = *LibreDwgc::Dwg_Header_Variables_INTERSECTIONCOLOR_get;
*swig_INTERSECTIONCOLOR_set = *LibreDwgc::Dwg_Header_Variables_INTERSECTIONCOLOR_set;
*swig_OBSCUREDLTYPE_get = *LibreDwgc::Dwg_Header_Variables_OBSCUREDLTYPE_get;
*swig_OBSCUREDLTYPE_set = *LibreDwgc::Dwg_Header_Variables_OBSCUREDLTYPE_set;
*swig_INTERSECTIONDISPLAY_get = *LibreDwgc::Dwg_Header_Variables_INTERSECTIONDISPLAY_get;
*swig_INTERSECTIONDISPLAY_set = *LibreDwgc::Dwg_Header_Variables_INTERSECTIONDISPLAY_set;
*swig_PROJECTNAME_get = *LibreDwgc::Dwg_Header_Variables_PROJECTNAME_get;
*swig_PROJECTNAME_set = *LibreDwgc::Dwg_Header_Variables_PROJECTNAME_set;
*swig_BLOCK_RECORD_PAPER_SPACE_get = *LibreDwgc::Dwg_Header_Variables_BLOCK_RECORD_PAPER_SPACE_get;
*swig_BLOCK_RECORD_PAPER_SPACE_set = *LibreDwgc::Dwg_Header_Variables_BLOCK_RECORD_PAPER_SPACE_set;
*swig_BLOCK_RECORD_MODEL_SPACE_get = *LibreDwgc::Dwg_Header_Variables_BLOCK_RECORD_MODEL_SPACE_get;
*swig_BLOCK_RECORD_MODEL_SPACE_set = *LibreDwgc::Dwg_Header_Variables_BLOCK_RECORD_MODEL_SPACE_set;
*swig_LTYPE_BYLAYER_get = *LibreDwgc::Dwg_Header_Variables_LTYPE_BYLAYER_get;
*swig_LTYPE_BYLAYER_set = *LibreDwgc::Dwg_Header_Variables_LTYPE_BYLAYER_set;
*swig_LTYPE_BYBLOCK_get = *LibreDwgc::Dwg_Header_Variables_LTYPE_BYBLOCK_get;
*swig_LTYPE_BYBLOCK_set = *LibreDwgc::Dwg_Header_Variables_LTYPE_BYBLOCK_set;
*swig_LTYPE_CONTINUOUS_get = *LibreDwgc::Dwg_Header_Variables_LTYPE_CONTINUOUS_get;
*swig_LTYPE_CONTINUOUS_set = *LibreDwgc::Dwg_Header_Variables_LTYPE_CONTINUOUS_set;
*swig_unknown_20_get = *LibreDwgc::Dwg_Header_Variables_unknown_20_get;
*swig_unknown_20_set = *LibreDwgc::Dwg_Header_Variables_unknown_20_set;
*swig_unknown_21_get = *LibreDwgc::Dwg_Header_Variables_unknown_21_get;
*swig_unknown_21_set = *LibreDwgc::Dwg_Header_Variables_unknown_21_set;
*swig_unknown_22_get = *LibreDwgc::Dwg_Header_Variables_unknown_22_get;
*swig_unknown_22_set = *LibreDwgc::Dwg_Header_Variables_unknown_22_set;
*swig_unknown_23_get = *LibreDwgc::Dwg_Header_Variables_unknown_23_get;
*swig_unknown_23_set = *LibreDwgc::Dwg_Header_Variables_unknown_23_set;
*swig_unknown_24_get = *LibreDwgc::Dwg_Header_Variables_unknown_24_get;
*swig_unknown_24_set = *LibreDwgc::Dwg_Header_Variables_unknown_24_set;
*swig_unknown_25_get = *LibreDwgc::Dwg_Header_Variables_unknown_25_get;
*swig_unknown_25_set = *LibreDwgc::Dwg_Header_Variables_unknown_25_set;
*swig_unknown_26_get = *LibreDwgc::Dwg_Header_Variables_unknown_26_get;
*swig_unknown_26_set = *LibreDwgc::Dwg_Header_Variables_unknown_26_set;
*swig_unknown_27_get = *LibreDwgc::Dwg_Header_Variables_unknown_27_get;
*swig_unknown_27_set = *LibreDwgc::Dwg_Header_Variables_unknown_27_set;
*swig_unknown_28_get = *LibreDwgc::Dwg_Header_Variables_unknown_28_get;
*swig_unknown_28_set = *LibreDwgc::Dwg_Header_Variables_unknown_28_set;
*swig_unknown_29_get = *LibreDwgc::Dwg_Header_Variables_unknown_29_get;
*swig_unknown_29_set = *LibreDwgc::Dwg_Header_Variables_unknown_29_set;
*swig_unknown_30_get = *LibreDwgc::Dwg_Header_Variables_unknown_30_get;
*swig_unknown_30_set = *LibreDwgc::Dwg_Header_Variables_unknown_30_set;
*swig_unknown_31_get = *LibreDwgc::Dwg_Header_Variables_unknown_31_get;
*swig_unknown_31_set = *LibreDwgc::Dwg_Header_Variables_unknown_31_set;
*swig_unknown_32_get = *LibreDwgc::Dwg_Header_Variables_unknown_32_get;
*swig_unknown_32_set = *LibreDwgc::Dwg_Header_Variables_unknown_32_set;
*swig_unknown_33_get = *LibreDwgc::Dwg_Header_Variables_unknown_33_get;
*swig_unknown_33_set = *LibreDwgc::Dwg_Header_Variables_unknown_33_set;
*swig_unknown_34_get = *LibreDwgc::Dwg_Header_Variables_unknown_34_get;
*swig_unknown_34_set = *LibreDwgc::Dwg_Header_Variables_unknown_34_set;
*swig_unknown_35_get = *LibreDwgc::Dwg_Header_Variables_unknown_35_get;
*swig_unknown_35_set = *LibreDwgc::Dwg_Header_Variables_unknown_35_set;
*swig_unknown_36_get = *LibreDwgc::Dwg_Header_Variables_unknown_36_get;
*swig_unknown_36_set = *LibreDwgc::Dwg_Header_Variables_unknown_36_set;
*swig_unknown_37_get = *LibreDwgc::Dwg_Header_Variables_unknown_37_get;
*swig_unknown_37_set = *LibreDwgc::Dwg_Header_Variables_unknown_37_set;
*swig_unknown_38_get = *LibreDwgc::Dwg_Header_Variables_unknown_38_get;
*swig_unknown_38_set = *LibreDwgc::Dwg_Header_Variables_unknown_38_set;
*swig_unknown_39_get = *LibreDwgc::Dwg_Header_Variables_unknown_39_get;
*swig_unknown_39_set = *LibreDwgc::Dwg_Header_Variables_unknown_39_set;
*swig_unknown_40_get = *LibreDwgc::Dwg_Header_Variables_unknown_40_get;
*swig_unknown_40_set = *LibreDwgc::Dwg_Header_Variables_unknown_40_set;
*swig_unknown_41_get = *LibreDwgc::Dwg_Header_Variables_unknown_41_get;
*swig_unknown_41_set = *LibreDwgc::Dwg_Header_Variables_unknown_41_set;
*swig_unknown_42_get = *LibreDwgc::Dwg_Header_Variables_unknown_42_get;
*swig_unknown_42_set = *LibreDwgc::Dwg_Header_Variables_unknown_42_set;
*swig_unknown_43_get = *LibreDwgc::Dwg_Header_Variables_unknown_43_get;
*swig_unknown_43_set = *LibreDwgc::Dwg_Header_Variables_unknown_43_set;
*swig_unknown_44_get = *LibreDwgc::Dwg_Header_Variables_unknown_44_get;
*swig_unknown_44_set = *LibreDwgc::Dwg_Header_Variables_unknown_44_set;
*swig_unknown_45_get = *LibreDwgc::Dwg_Header_Variables_unknown_45_get;
*swig_unknown_45_set = *LibreDwgc::Dwg_Header_Variables_unknown_45_set;
*swig_unknown_46_get = *LibreDwgc::Dwg_Header_Variables_unknown_46_get;
*swig_unknown_46_set = *LibreDwgc::Dwg_Header_Variables_unknown_46_set;
*swig_unknown_47_get = *LibreDwgc::Dwg_Header_Variables_unknown_47_get;
*swig_unknown_47_set = *LibreDwgc::Dwg_Header_Variables_unknown_47_set;
*swig_unknown_48_get = *LibreDwgc::Dwg_Header_Variables_unknown_48_get;
*swig_unknown_48_set = *LibreDwgc::Dwg_Header_Variables_unknown_48_set;
*swig_unknown_49_get = *LibreDwgc::Dwg_Header_Variables_unknown_49_get;
*swig_unknown_49_set = *LibreDwgc::Dwg_Header_Variables_unknown_49_set;
*swig_unknown_50_get = *LibreDwgc::Dwg_Header_Variables_unknown_50_get;
*swig_unknown_50_set = *LibreDwgc::Dwg_Header_Variables_unknown_50_set;
*swig_unknown_51_get = *LibreDwgc::Dwg_Header_Variables_unknown_51_get;
*swig_unknown_51_set = *LibreDwgc::Dwg_Header_Variables_unknown_51_set;
*swig_unknown_52_get = *LibreDwgc::Dwg_Header_Variables_unknown_52_get;
*swig_unknown_52_set = *LibreDwgc::Dwg_Header_Variables_unknown_52_set;
*swig_unknown_53_get = *LibreDwgc::Dwg_Header_Variables_unknown_53_get;
*swig_unknown_53_set = *LibreDwgc::Dwg_Header_Variables_unknown_53_set;
*swig_unknown_54_get = *LibreDwgc::Dwg_Header_Variables_unknown_54_get;
*swig_unknown_54_set = *LibreDwgc::Dwg_Header_Variables_unknown_54_set;
*swig_unknown_55_get = *LibreDwgc::Dwg_Header_Variables_unknown_55_get;
*swig_unknown_55_set = *LibreDwgc::Dwg_Header_Variables_unknown_55_set;
*swig_unknown_56_get = *LibreDwgc::Dwg_Header_Variables_unknown_56_get;
*swig_unknown_56_set = *LibreDwgc::Dwg_Header_Variables_unknown_56_set;
*swig_unknown_57_get = *LibreDwgc::Dwg_Header_Variables_unknown_57_get;
*swig_unknown_57_set = *LibreDwgc::Dwg_Header_Variables_unknown_57_set;
*swig_CRC_get = *LibreDwgc::Dwg_Header_Variables_CRC_get;
*swig_CRC_set = *LibreDwgc::Dwg_Header_Variables_CRC_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Header_Variables(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Header_Variables($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_TEXT ##############

package LibreDwg::Dwg_Entity_TEXT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_dataflags_get = *LibreDwgc::Dwg_Entity_TEXT_dataflags_get;
*swig_dataflags_set = *LibreDwgc::Dwg_Entity_TEXT_dataflags_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_TEXT_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_TEXT_elevation_set;
*swig_insertion_pt_get = *LibreDwgc::Dwg_Entity_TEXT_insertion_pt_get;
*swig_insertion_pt_set = *LibreDwgc::Dwg_Entity_TEXT_insertion_pt_set;
*swig_alignment_pt_get = *LibreDwgc::Dwg_Entity_TEXT_alignment_pt_get;
*swig_alignment_pt_set = *LibreDwgc::Dwg_Entity_TEXT_alignment_pt_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_TEXT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_TEXT_extrusion_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_TEXT_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_TEXT_thickness_set;
*swig_oblique_ang_get = *LibreDwgc::Dwg_Entity_TEXT_oblique_ang_get;
*swig_oblique_ang_set = *LibreDwgc::Dwg_Entity_TEXT_oblique_ang_set;
*swig_rotation_ang_get = *LibreDwgc::Dwg_Entity_TEXT_rotation_ang_get;
*swig_rotation_ang_set = *LibreDwgc::Dwg_Entity_TEXT_rotation_ang_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_TEXT_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_TEXT_height_set;
*swig_width_factor_get = *LibreDwgc::Dwg_Entity_TEXT_width_factor_get;
*swig_width_factor_set = *LibreDwgc::Dwg_Entity_TEXT_width_factor_set;
*swig_text_value_get = *LibreDwgc::Dwg_Entity_TEXT_text_value_get;
*swig_text_value_set = *LibreDwgc::Dwg_Entity_TEXT_text_value_set;
*swig_generation_get = *LibreDwgc::Dwg_Entity_TEXT_generation_get;
*swig_generation_set = *LibreDwgc::Dwg_Entity_TEXT_generation_set;
*swig_horiz_alignment_get = *LibreDwgc::Dwg_Entity_TEXT_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDwgc::Dwg_Entity_TEXT_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDwgc::Dwg_Entity_TEXT_vert_alignment_get;
*swig_vert_alignment_set = *LibreDwgc::Dwg_Entity_TEXT_vert_alignment_set;
*swig_style_get = *LibreDwgc::Dwg_Entity_TEXT_style_get;
*swig_style_set = *LibreDwgc::Dwg_Entity_TEXT_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_TEXT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_TEXT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_ATTRIB ##############

package LibreDwg::Dwg_Entity_ATTRIB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_elevation_get = *LibreDwgc::Dwg_Entity_ATTRIB_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_ATTRIB_elevation_set;
*swig_insertion_pt_get = *LibreDwgc::Dwg_Entity_ATTRIB_insertion_pt_get;
*swig_insertion_pt_set = *LibreDwgc::Dwg_Entity_ATTRIB_insertion_pt_set;
*swig_alignment_pt_get = *LibreDwgc::Dwg_Entity_ATTRIB_alignment_pt_get;
*swig_alignment_pt_set = *LibreDwgc::Dwg_Entity_ATTRIB_alignment_pt_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_ATTRIB_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_ATTRIB_extrusion_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_ATTRIB_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_ATTRIB_thickness_set;
*swig_oblique_ang_get = *LibreDwgc::Dwg_Entity_ATTRIB_oblique_ang_get;
*swig_oblique_ang_set = *LibreDwgc::Dwg_Entity_ATTRIB_oblique_ang_set;
*swig_rotation_ang_get = *LibreDwgc::Dwg_Entity_ATTRIB_rotation_ang_get;
*swig_rotation_ang_set = *LibreDwgc::Dwg_Entity_ATTRIB_rotation_ang_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_ATTRIB_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_ATTRIB_height_set;
*swig_width_factor_get = *LibreDwgc::Dwg_Entity_ATTRIB_width_factor_get;
*swig_width_factor_set = *LibreDwgc::Dwg_Entity_ATTRIB_width_factor_set;
*swig_text_value_get = *LibreDwgc::Dwg_Entity_ATTRIB_text_value_get;
*swig_text_value_set = *LibreDwgc::Dwg_Entity_ATTRIB_text_value_set;
*swig_generation_get = *LibreDwgc::Dwg_Entity_ATTRIB_generation_get;
*swig_generation_set = *LibreDwgc::Dwg_Entity_ATTRIB_generation_set;
*swig_horiz_alignment_get = *LibreDwgc::Dwg_Entity_ATTRIB_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDwgc::Dwg_Entity_ATTRIB_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDwgc::Dwg_Entity_ATTRIB_vert_alignment_get;
*swig_vert_alignment_set = *LibreDwgc::Dwg_Entity_ATTRIB_vert_alignment_set;
*swig_dataflags_get = *LibreDwgc::Dwg_Entity_ATTRIB_dataflags_get;
*swig_dataflags_set = *LibreDwgc::Dwg_Entity_ATTRIB_dataflags_set;
*swig_tag_get = *LibreDwgc::Dwg_Entity_ATTRIB_tag_get;
*swig_tag_set = *LibreDwgc::Dwg_Entity_ATTRIB_tag_set;
*swig_field_length_get = *LibreDwgc::Dwg_Entity_ATTRIB_field_length_get;
*swig_field_length_set = *LibreDwgc::Dwg_Entity_ATTRIB_field_length_set;
*swig_flags_get = *LibreDwgc::Dwg_Entity_ATTRIB_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_ATTRIB_flags_set;
*swig_lock_position_flag_get = *LibreDwgc::Dwg_Entity_ATTRIB_lock_position_flag_get;
*swig_lock_position_flag_set = *LibreDwgc::Dwg_Entity_ATTRIB_lock_position_flag_set;
*swig_style_get = *LibreDwgc::Dwg_Entity_ATTRIB_style_get;
*swig_style_set = *LibreDwgc::Dwg_Entity_ATTRIB_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_ATTRIB(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_ATTRIB($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_ATTDEF ##############

package LibreDwg::Dwg_Entity_ATTDEF;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_elevation_get = *LibreDwgc::Dwg_Entity_ATTDEF_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_ATTDEF_elevation_set;
*swig_insertion_pt_get = *LibreDwgc::Dwg_Entity_ATTDEF_insertion_pt_get;
*swig_insertion_pt_set = *LibreDwgc::Dwg_Entity_ATTDEF_insertion_pt_set;
*swig_alignment_pt_get = *LibreDwgc::Dwg_Entity_ATTDEF_alignment_pt_get;
*swig_alignment_pt_set = *LibreDwgc::Dwg_Entity_ATTDEF_alignment_pt_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_ATTDEF_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_ATTDEF_extrusion_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_ATTDEF_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_ATTDEF_thickness_set;
*swig_oblique_ang_get = *LibreDwgc::Dwg_Entity_ATTDEF_oblique_ang_get;
*swig_oblique_ang_set = *LibreDwgc::Dwg_Entity_ATTDEF_oblique_ang_set;
*swig_rotation_ang_get = *LibreDwgc::Dwg_Entity_ATTDEF_rotation_ang_get;
*swig_rotation_ang_set = *LibreDwgc::Dwg_Entity_ATTDEF_rotation_ang_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_ATTDEF_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_ATTDEF_height_set;
*swig_width_factor_get = *LibreDwgc::Dwg_Entity_ATTDEF_width_factor_get;
*swig_width_factor_set = *LibreDwgc::Dwg_Entity_ATTDEF_width_factor_set;
*swig_default_value_get = *LibreDwgc::Dwg_Entity_ATTDEF_default_value_get;
*swig_default_value_set = *LibreDwgc::Dwg_Entity_ATTDEF_default_value_set;
*swig_generation_get = *LibreDwgc::Dwg_Entity_ATTDEF_generation_get;
*swig_generation_set = *LibreDwgc::Dwg_Entity_ATTDEF_generation_set;
*swig_horiz_alignment_get = *LibreDwgc::Dwg_Entity_ATTDEF_horiz_alignment_get;
*swig_horiz_alignment_set = *LibreDwgc::Dwg_Entity_ATTDEF_horiz_alignment_set;
*swig_vert_alignment_get = *LibreDwgc::Dwg_Entity_ATTDEF_vert_alignment_get;
*swig_vert_alignment_set = *LibreDwgc::Dwg_Entity_ATTDEF_vert_alignment_set;
*swig_dataflags_get = *LibreDwgc::Dwg_Entity_ATTDEF_dataflags_get;
*swig_dataflags_set = *LibreDwgc::Dwg_Entity_ATTDEF_dataflags_set;
*swig_tag_get = *LibreDwgc::Dwg_Entity_ATTDEF_tag_get;
*swig_tag_set = *LibreDwgc::Dwg_Entity_ATTDEF_tag_set;
*swig_field_length_get = *LibreDwgc::Dwg_Entity_ATTDEF_field_length_get;
*swig_field_length_set = *LibreDwgc::Dwg_Entity_ATTDEF_field_length_set;
*swig_flags_get = *LibreDwgc::Dwg_Entity_ATTDEF_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_ATTDEF_flags_set;
*swig_lock_position_flag_get = *LibreDwgc::Dwg_Entity_ATTDEF_lock_position_flag_get;
*swig_lock_position_flag_set = *LibreDwgc::Dwg_Entity_ATTDEF_lock_position_flag_set;
*swig_prompt_get = *LibreDwgc::Dwg_Entity_ATTDEF_prompt_get;
*swig_prompt_set = *LibreDwgc::Dwg_Entity_ATTDEF_prompt_set;
*swig_style_get = *LibreDwgc::Dwg_Entity_ATTDEF_style_get;
*swig_style_set = *LibreDwgc::Dwg_Entity_ATTDEF_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_ATTDEF(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_ATTDEF($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_BLOCK ##############

package LibreDwg::Dwg_Entity_BLOCK;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *LibreDwgc::Dwg_Entity_BLOCK_name_get;
*swig_name_set = *LibreDwgc::Dwg_Entity_BLOCK_name_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_BLOCK(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_BLOCK($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_ENDBLK ##############

package LibreDwg::Dwg_Entity_ENDBLK;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_dummy_get = *LibreDwgc::Dwg_Entity_ENDBLK_dummy_get;
*swig_dummy_set = *LibreDwgc::Dwg_Entity_ENDBLK_dummy_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_ENDBLK(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_ENDBLK($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SEQEND ##############

package LibreDwg::Dwg_Entity_SEQEND;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_dummy_get = *LibreDwgc::Dwg_Entity_SEQEND_dummy_get;
*swig_dummy_set = *LibreDwgc::Dwg_Entity_SEQEND_dummy_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SEQEND(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SEQEND($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_INSERT ##############

package LibreDwg::Dwg_Entity_INSERT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ins_pt_get = *LibreDwgc::Dwg_Entity_INSERT_ins_pt_get;
*swig_ins_pt_set = *LibreDwgc::Dwg_Entity_INSERT_ins_pt_set;
*swig_scale_flag_get = *LibreDwgc::Dwg_Entity_INSERT_scale_flag_get;
*swig_scale_flag_set = *LibreDwgc::Dwg_Entity_INSERT_scale_flag_set;
*swig_scale_get = *LibreDwgc::Dwg_Entity_INSERT_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_INSERT_scale_set;
*swig_rotation_ang_get = *LibreDwgc::Dwg_Entity_INSERT_rotation_ang_get;
*swig_rotation_ang_set = *LibreDwgc::Dwg_Entity_INSERT_rotation_ang_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_INSERT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_INSERT_extrusion_set;
*swig_has_attribs_get = *LibreDwgc::Dwg_Entity_INSERT_has_attribs_get;
*swig_has_attribs_set = *LibreDwgc::Dwg_Entity_INSERT_has_attribs_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_INSERT_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_INSERT_owned_obj_count_set;
*swig_block_header_get = *LibreDwgc::Dwg_Entity_INSERT_block_header_get;
*swig_block_header_set = *LibreDwgc::Dwg_Entity_INSERT_block_header_set;
*swig_first_attrib_get = *LibreDwgc::Dwg_Entity_INSERT_first_attrib_get;
*swig_first_attrib_set = *LibreDwgc::Dwg_Entity_INSERT_first_attrib_set;
*swig_last_attrib_get = *LibreDwgc::Dwg_Entity_INSERT_last_attrib_get;
*swig_last_attrib_set = *LibreDwgc::Dwg_Entity_INSERT_last_attrib_set;
*swig_attrib_handles_get = *LibreDwgc::Dwg_Entity_INSERT_attrib_handles_get;
*swig_attrib_handles_set = *LibreDwgc::Dwg_Entity_INSERT_attrib_handles_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_INSERT_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_INSERT_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_INSERT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_INSERT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_MINSERT ##############

package LibreDwg::Dwg_Entity_MINSERT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ins_pt_get = *LibreDwgc::Dwg_Entity_MINSERT_ins_pt_get;
*swig_ins_pt_set = *LibreDwgc::Dwg_Entity_MINSERT_ins_pt_set;
*swig_scale_flag_get = *LibreDwgc::Dwg_Entity_MINSERT_scale_flag_get;
*swig_scale_flag_set = *LibreDwgc::Dwg_Entity_MINSERT_scale_flag_set;
*swig_scale_get = *LibreDwgc::Dwg_Entity_MINSERT_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_MINSERT_scale_set;
*swig_rotation_ang_get = *LibreDwgc::Dwg_Entity_MINSERT_rotation_ang_get;
*swig_rotation_ang_set = *LibreDwgc::Dwg_Entity_MINSERT_rotation_ang_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_MINSERT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_MINSERT_extrusion_set;
*swig_has_attribs_get = *LibreDwgc::Dwg_Entity_MINSERT_has_attribs_get;
*swig_has_attribs_set = *LibreDwgc::Dwg_Entity_MINSERT_has_attribs_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_MINSERT_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_MINSERT_owned_obj_count_set;
*swig_numcols_get = *LibreDwgc::Dwg_Entity_MINSERT_numcols_get;
*swig_numcols_set = *LibreDwgc::Dwg_Entity_MINSERT_numcols_set;
*swig_numrows_get = *LibreDwgc::Dwg_Entity_MINSERT_numrows_get;
*swig_numrows_set = *LibreDwgc::Dwg_Entity_MINSERT_numrows_set;
*swig_col_spacing_get = *LibreDwgc::Dwg_Entity_MINSERT_col_spacing_get;
*swig_col_spacing_set = *LibreDwgc::Dwg_Entity_MINSERT_col_spacing_set;
*swig_row_spacing_get = *LibreDwgc::Dwg_Entity_MINSERT_row_spacing_get;
*swig_row_spacing_set = *LibreDwgc::Dwg_Entity_MINSERT_row_spacing_set;
*swig_block_header_get = *LibreDwgc::Dwg_Entity_MINSERT_block_header_get;
*swig_block_header_set = *LibreDwgc::Dwg_Entity_MINSERT_block_header_set;
*swig_first_attrib_get = *LibreDwgc::Dwg_Entity_MINSERT_first_attrib_get;
*swig_first_attrib_set = *LibreDwgc::Dwg_Entity_MINSERT_first_attrib_set;
*swig_last_attrib_get = *LibreDwgc::Dwg_Entity_MINSERT_last_attrib_get;
*swig_last_attrib_set = *LibreDwgc::Dwg_Entity_MINSERT_last_attrib_set;
*swig_attrib_handles_get = *LibreDwgc::Dwg_Entity_MINSERT_attrib_handles_get;
*swig_attrib_handles_set = *LibreDwgc::Dwg_Entity_MINSERT_attrib_handles_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_MINSERT_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_MINSERT_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_MINSERT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_MINSERT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_VERTEX_2D ##############

package LibreDwg::Dwg_Entity_VERTEX_2D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_flags_set;
*swig_point_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_point_set;
*swig_start_width_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_start_width_get;
*swig_start_width_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_start_width_set;
*swig_end_width_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_end_width_get;
*swig_end_width_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_end_width_set;
*swig_bulge_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_bulge_get;
*swig_bulge_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_bulge_set;
*swig_tangent_dir_get = *LibreDwgc::Dwg_Entity_VERTEX_2D_tangent_dir_get;
*swig_tangent_dir_set = *LibreDwgc::Dwg_Entity_VERTEX_2D_tangent_dir_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_VERTEX_2D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_VERTEX_2D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_VERTEX_3D ##############

package LibreDwg::Dwg_Entity_VERTEX_3D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_VERTEX_3D_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_VERTEX_3D_flags_set;
*swig_point_get = *LibreDwgc::Dwg_Entity_VERTEX_3D_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity_VERTEX_3D_point_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_VERTEX_3D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_VERTEX_3D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_VERTEX_PFACE_FACE ##############

package LibreDwg::Dwg_Entity_VERTEX_PFACE_FACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_vertind_get = *LibreDwgc::Dwg_Entity_VERTEX_PFACE_FACE_vertind_get;
*swig_vertind_set = *LibreDwgc::Dwg_Entity_VERTEX_PFACE_FACE_vertind_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_VERTEX_PFACE_FACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_VERTEX_PFACE_FACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_POLYLINE_2D ##############

package LibreDwg::Dwg_Entity_POLYLINE_2D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_flags_set;
*swig_curve_type_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_curve_type_get;
*swig_curve_type_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_curve_type_set;
*swig_start_width_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_start_width_get;
*swig_start_width_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_start_width_set;
*swig_end_width_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_end_width_get;
*swig_end_width_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_end_width_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_thickness_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_elevation_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_extrusion_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_owned_obj_count_set;
*swig_first_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_first_vertex_get;
*swig_first_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_first_vertex_set;
*swig_last_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_last_vertex_get;
*swig_last_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_last_vertex_set;
*swig_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_vertex_get;
*swig_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_vertex_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_POLYLINE_2D_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_POLYLINE_2D_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_POLYLINE_2D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_POLYLINE_2D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_POLYLINE_3D ##############

package LibreDwg::Dwg_Entity_POLYLINE_3D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_flags_1_set;
*swig_flags_2_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_flags_2_get;
*swig_flags_2_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_flags_2_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_owned_obj_count_set;
*swig_first_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_first_vertex_get;
*swig_first_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_first_vertex_set;
*swig_last_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_last_vertex_get;
*swig_last_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_last_vertex_set;
*swig_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_vertex_get;
*swig_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_vertex_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_POLYLINE_3D_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_POLYLINE_3D_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_POLYLINE_3D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_POLYLINE_3D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_ARC ##############

package LibreDwg::Dwg_Entity_ARC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_center_get = *LibreDwgc::Dwg_Entity_ARC_center_get;
*swig_center_set = *LibreDwgc::Dwg_Entity_ARC_center_set;
*swig_radius_get = *LibreDwgc::Dwg_Entity_ARC_radius_get;
*swig_radius_set = *LibreDwgc::Dwg_Entity_ARC_radius_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_ARC_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_ARC_thickness_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_ARC_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_ARC_extrusion_set;
*swig_start_angle_get = *LibreDwgc::Dwg_Entity_ARC_start_angle_get;
*swig_start_angle_set = *LibreDwgc::Dwg_Entity_ARC_start_angle_set;
*swig_end_angle_get = *LibreDwgc::Dwg_Entity_ARC_end_angle_get;
*swig_end_angle_set = *LibreDwgc::Dwg_Entity_ARC_end_angle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_ARC(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_ARC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_CIRCLE ##############

package LibreDwg::Dwg_Entity_CIRCLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_center_get = *LibreDwgc::Dwg_Entity_CIRCLE_center_get;
*swig_center_set = *LibreDwgc::Dwg_Entity_CIRCLE_center_set;
*swig_radius_get = *LibreDwgc::Dwg_Entity_CIRCLE_radius_get;
*swig_radius_set = *LibreDwgc::Dwg_Entity_CIRCLE_radius_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_CIRCLE_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_CIRCLE_thickness_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_CIRCLE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_CIRCLE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_CIRCLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_CIRCLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_LINE ##############

package LibreDwg::Dwg_Entity_LINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_Zs_are_zero_get = *LibreDwgc::Dwg_Entity_LINE_Zs_are_zero_get;
*swig_Zs_are_zero_set = *LibreDwgc::Dwg_Entity_LINE_Zs_are_zero_set;
*swig_start_get = *LibreDwgc::Dwg_Entity_LINE_start_get;
*swig_start_set = *LibreDwgc::Dwg_Entity_LINE_start_set;
*swig_end_get = *LibreDwgc::Dwg_Entity_LINE_end_get;
*swig_end_set = *LibreDwgc::Dwg_Entity_LINE_end_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_LINE_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_LINE_thickness_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_LINE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_LINE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_LINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_LINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ORDINATE ##############

package LibreDwg::Dwg_Entity_DIMENSION_ORDINATE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__12_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__10_pt_set;
*swig__13_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__13_pt_get;
*swig__13_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__13_pt_set;
*swig__14_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__14_pt_get;
*swig__14_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE__14_pt_set;
*swig_flags_2_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flags_2_get;
*swig_flags_2_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_flags_2_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ORDINATE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ORDINATE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ORDINATE_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_ORDINATE_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_ORDINATE_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ORDINATE_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ORDINATE_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_LINEAR ##############

package LibreDwg::Dwg_Entity_DIMENSION_LINEAR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__12_pt_set;
*swig__13_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__13_pt_get;
*swig__13_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__13_pt_set;
*swig__14_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__14_pt_get;
*swig__14_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__14_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR__10_pt_set;
*swig_ext_line_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ext_line_rot_get;
*swig_ext_line_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_ext_line_rot_set;
*swig_dim_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_dim_rot_get;
*swig_dim_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_dim_rot_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_LINEAR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_LINEAR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_LINEAR_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_LINEAR_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_LINEAR_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_LINEAR_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_LINEAR_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ALIGNED ##############

package LibreDwg::Dwg_Entity_DIMENSION_ALIGNED;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__12_pt_set;
*swig__13_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__13_pt_get;
*swig__13_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__13_pt_set;
*swig__14_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__14_pt_get;
*swig__14_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__14_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED__10_pt_set;
*swig_ext_line_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ext_line_rot_get;
*swig_ext_line_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_ext_line_rot_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ALIGNED(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ALIGNED($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ALIGNED_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_ALIGNED_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_ALIGNED_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ALIGNED_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ALIGNED_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ANG3PT ##############

package LibreDwg::Dwg_Entity_DIMENSION_ANG3PT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__12_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__10_pt_set;
*swig__13_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__13_pt_get;
*swig__13_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__13_pt_set;
*swig__14_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__14_pt_get;
*swig__14_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__14_pt_set;
*swig__15_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__15_pt_get;
*swig__15_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT__15_pt_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ANG3PT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ANG3PT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ANG3PT_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_ANG3PT_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG3PT_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ANG3PT_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ANG3PT_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ANG2LN ##############

package LibreDwg::Dwg_Entity_DIMENSION_ANG2LN;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__12_pt_set;
*swig__16_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__16_pt_get;
*swig__16_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__16_pt_set;
*swig__13_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__13_pt_get;
*swig__13_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__13_pt_set;
*swig__14_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__14_pt_get;
*swig__14_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__14_pt_set;
*swig__15_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__15_pt_get;
*swig__15_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__15_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN__10_pt_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ANG2LN(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ANG2LN($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_ANG2LN_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_ANG2LN_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_ANG2LN_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_ANG2LN_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_ANG2LN_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_RADIUS ##############

package LibreDwg::Dwg_Entity_DIMENSION_RADIUS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__12_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__10_pt_set;
*swig__15_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__15_pt_get;
*swig__15_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS__15_pt_set;
*swig_leader_len_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_leader_len_get;
*swig_leader_len_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_leader_len_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_RADIUS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_RADIUS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_RADIUS_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_RADIUS_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_RADIUS_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_RADIUS_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_RADIUS_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_DIAMETER ##############

package LibreDwg::Dwg_Entity_DIMENSION_DIAMETER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_extrusion_set;
*swig_text_midpt_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_text_midpt_get;
*swig_text_midpt_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_text_midpt_set;
*swig_flags_1_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flags_1_get;
*swig_flags_1_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flags_1_set;
*swig_user_text_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_user_text_get;
*swig_user_text_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_user_text_set;
*swig_text_rot_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_text_rot_get;
*swig_text_rot_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_text_rot_set;
*swig_horiz_dir_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_horiz_dir_get;
*swig_horiz_dir_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_horiz_dir_set;
*swig_ins_scale_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_ins_scale_get;
*swig_ins_scale_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_ins_scale_set;
*swig_ins_rotation_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_ins_rotation_get;
*swig_ins_rotation_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_ins_rotation_set;
*swig_attachment_point_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_attachment_point_get;
*swig_attachment_point_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_attachment_point_set;
*swig_lspace_style_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_lspace_style_get;
*swig_lspace_style_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_lspace_style_set;
*swig_lspace_factor_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_lspace_factor_get;
*swig_lspace_factor_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_lspace_factor_set;
*swig_act_measurement_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_act_measurement_get;
*swig_act_measurement_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_act_measurement_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_unknown_set;
*swig_flip_arrow1_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow1_get;
*swig_flip_arrow1_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow1_set;
*swig_flip_arrow2_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow2_get;
*swig_flip_arrow2_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_flip_arrow2_set;
*swig__12_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__12_pt_get;
*swig__12_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__12_pt_set;
*swig__15_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__15_pt_get;
*swig__15_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__15_pt_set;
*swig__10_pt_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__10_pt_get;
*swig__10_pt_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER__10_pt_set;
*swig_leader_len_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_leader_len_get;
*swig_leader_len_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_leader_len_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_dimstyle_set;
*swig_block_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_block_get;
*swig_block_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_block_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_DIAMETER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_DIAMETER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_DIMENSION_DIAMETER_elevation ##############

package LibreDwg::Dwg_Entity_DIMENSION_DIAMETER_elevation;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ecs_11_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_ecs_11_get;
*swig_ecs_11_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_ecs_11_set;
*swig_ecs_12_get = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_ecs_12_get;
*swig_ecs_12_set = *LibreDwgc::Dwg_Entity_DIMENSION_DIAMETER_elevation_ecs_12_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_DIMENSION_DIAMETER_elevation(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_DIMENSION_DIAMETER_elevation($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_POINT ##############

package LibreDwg::Dwg_Entity_POINT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Entity_POINT_x_get;
*swig_x_set = *LibreDwgc::Dwg_Entity_POINT_x_set;
*swig_y_get = *LibreDwgc::Dwg_Entity_POINT_y_get;
*swig_y_set = *LibreDwgc::Dwg_Entity_POINT_y_set;
*swig_z_get = *LibreDwgc::Dwg_Entity_POINT_z_get;
*swig_z_set = *LibreDwgc::Dwg_Entity_POINT_z_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_POINT_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_POINT_thickness_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_POINT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_POINT_extrusion_set;
*swig_x_ang_get = *LibreDwgc::Dwg_Entity_POINT_x_ang_get;
*swig_x_ang_set = *LibreDwgc::Dwg_Entity_POINT_x_ang_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_POINT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_POINT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity__3DFACE ##############

package LibreDwg::Dwg_Entity__3DFACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_has_no_flags_get = *LibreDwgc::Dwg_Entity__3DFACE_has_no_flags_get;
*swig_has_no_flags_set = *LibreDwgc::Dwg_Entity__3DFACE_has_no_flags_set;
*swig_z_is_zero_get = *LibreDwgc::Dwg_Entity__3DFACE_z_is_zero_get;
*swig_z_is_zero_set = *LibreDwgc::Dwg_Entity__3DFACE_z_is_zero_set;
*swig_corner1_get = *LibreDwgc::Dwg_Entity__3DFACE_corner1_get;
*swig_corner1_set = *LibreDwgc::Dwg_Entity__3DFACE_corner1_set;
*swig_corner2_get = *LibreDwgc::Dwg_Entity__3DFACE_corner2_get;
*swig_corner2_set = *LibreDwgc::Dwg_Entity__3DFACE_corner2_set;
*swig_corner3_get = *LibreDwgc::Dwg_Entity__3DFACE_corner3_get;
*swig_corner3_set = *LibreDwgc::Dwg_Entity__3DFACE_corner3_set;
*swig_corner4_get = *LibreDwgc::Dwg_Entity__3DFACE_corner4_get;
*swig_corner4_set = *LibreDwgc::Dwg_Entity__3DFACE_corner4_set;
*swig_invis_flags_get = *LibreDwgc::Dwg_Entity__3DFACE_invis_flags_get;
*swig_invis_flags_set = *LibreDwgc::Dwg_Entity__3DFACE_invis_flags_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity__3DFACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity__3DFACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_POLYLINE_PFACE ##############

package LibreDwg::Dwg_Entity_POLYLINE_PFACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_numverts_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_numverts_get;
*swig_numverts_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_numverts_set;
*swig_numfaces_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_numfaces_get;
*swig_numfaces_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_numfaces_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_owned_obj_count_set;
*swig_first_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_first_vertex_get;
*swig_first_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_first_vertex_set;
*swig_last_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_last_vertex_get;
*swig_last_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_last_vertex_set;
*swig_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_vertex_get;
*swig_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_vertex_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_POLYLINE_PFACE_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_POLYLINE_PFACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_POLYLINE_PFACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_POLYLINE_MESH ##############

package LibreDwg::Dwg_Entity_POLYLINE_MESH;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_flags_set;
*swig_curve_type_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_curve_type_get;
*swig_curve_type_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_curve_type_set;
*swig_m_vert_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_m_vert_count_get;
*swig_m_vert_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_m_vert_count_set;
*swig_n_vert_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_n_vert_count_get;
*swig_n_vert_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_n_vert_count_set;
*swig_m_density_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_m_density_get;
*swig_m_density_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_m_density_set;
*swig_n_density_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_n_density_get;
*swig_n_density_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_n_density_set;
*swig_owned_obj_count_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_owned_obj_count_get;
*swig_owned_obj_count_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_owned_obj_count_set;
*swig_first_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_first_vertex_get;
*swig_first_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_first_vertex_set;
*swig_last_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_last_vertex_get;
*swig_last_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_last_vertex_set;
*swig_vertex_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_vertex_get;
*swig_vertex_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_vertex_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_POLYLINE_MESH_seqend_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_POLYLINE_MESH(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_POLYLINE_MESH($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SOLID ##############

package LibreDwg::Dwg_Entity_SOLID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_thickness_get = *LibreDwgc::Dwg_Entity_SOLID_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_SOLID_thickness_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_SOLID_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_SOLID_elevation_set;
*swig_corner1_get = *LibreDwgc::Dwg_Entity_SOLID_corner1_get;
*swig_corner1_set = *LibreDwgc::Dwg_Entity_SOLID_corner1_set;
*swig_corner2_get = *LibreDwgc::Dwg_Entity_SOLID_corner2_get;
*swig_corner2_set = *LibreDwgc::Dwg_Entity_SOLID_corner2_set;
*swig_corner3_get = *LibreDwgc::Dwg_Entity_SOLID_corner3_get;
*swig_corner3_set = *LibreDwgc::Dwg_Entity_SOLID_corner3_set;
*swig_corner4_get = *LibreDwgc::Dwg_Entity_SOLID_corner4_get;
*swig_corner4_set = *LibreDwgc::Dwg_Entity_SOLID_corner4_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_SOLID_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_SOLID_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SOLID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SOLID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_TRACE ##############

package LibreDwg::Dwg_Entity_TRACE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_thickness_get = *LibreDwgc::Dwg_Entity_TRACE_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_TRACE_thickness_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_TRACE_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_TRACE_elevation_set;
*swig_corner1_get = *LibreDwgc::Dwg_Entity_TRACE_corner1_get;
*swig_corner1_set = *LibreDwgc::Dwg_Entity_TRACE_corner1_set;
*swig_corner2_get = *LibreDwgc::Dwg_Entity_TRACE_corner2_get;
*swig_corner2_set = *LibreDwgc::Dwg_Entity_TRACE_corner2_set;
*swig_corner3_get = *LibreDwgc::Dwg_Entity_TRACE_corner3_get;
*swig_corner3_set = *LibreDwgc::Dwg_Entity_TRACE_corner3_set;
*swig_corner4_get = *LibreDwgc::Dwg_Entity_TRACE_corner4_get;
*swig_corner4_set = *LibreDwgc::Dwg_Entity_TRACE_corner4_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_TRACE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_TRACE_extrusion_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_TRACE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_TRACE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SHAPE ##############

package LibreDwg::Dwg_Entity_SHAPE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_ins_pt_get = *LibreDwgc::Dwg_Entity_SHAPE_ins_pt_get;
*swig_ins_pt_set = *LibreDwgc::Dwg_Entity_SHAPE_ins_pt_set;
*swig_scale_get = *LibreDwgc::Dwg_Entity_SHAPE_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_SHAPE_scale_set;
*swig_rotation_get = *LibreDwgc::Dwg_Entity_SHAPE_rotation_get;
*swig_rotation_set = *LibreDwgc::Dwg_Entity_SHAPE_rotation_set;
*swig_width_factor_get = *LibreDwgc::Dwg_Entity_SHAPE_width_factor_get;
*swig_width_factor_set = *LibreDwgc::Dwg_Entity_SHAPE_width_factor_set;
*swig_oblique_get = *LibreDwgc::Dwg_Entity_SHAPE_oblique_get;
*swig_oblique_set = *LibreDwgc::Dwg_Entity_SHAPE_oblique_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_SHAPE_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_SHAPE_thickness_set;
*swig_shape_no_get = *LibreDwgc::Dwg_Entity_SHAPE_shape_no_get;
*swig_shape_no_set = *LibreDwgc::Dwg_Entity_SHAPE_shape_no_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_SHAPE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_SHAPE_extrusion_set;
*swig_shapefile_get = *LibreDwgc::Dwg_Entity_SHAPE_shapefile_get;
*swig_shapefile_set = *LibreDwgc::Dwg_Entity_SHAPE_shapefile_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SHAPE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SHAPE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_VIEWPORT ##############

package LibreDwg::Dwg_Entity_VIEWPORT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_center_get = *LibreDwgc::Dwg_Entity_VIEWPORT_center_get;
*swig_center_set = *LibreDwgc::Dwg_Entity_VIEWPORT_center_set;
*swig_width_get = *LibreDwgc::Dwg_Entity_VIEWPORT_width_get;
*swig_width_set = *LibreDwgc::Dwg_Entity_VIEWPORT_width_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_VIEWPORT_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_VIEWPORT_height_set;
*swig_view_target_get = *LibreDwgc::Dwg_Entity_VIEWPORT_view_target_get;
*swig_view_target_set = *LibreDwgc::Dwg_Entity_VIEWPORT_view_target_set;
*swig_view_direction_get = *LibreDwgc::Dwg_Entity_VIEWPORT_view_direction_get;
*swig_view_direction_set = *LibreDwgc::Dwg_Entity_VIEWPORT_view_direction_set;
*swig_view_twist_angle_get = *LibreDwgc::Dwg_Entity_VIEWPORT_view_twist_angle_get;
*swig_view_twist_angle_set = *LibreDwgc::Dwg_Entity_VIEWPORT_view_twist_angle_set;
*swig_view_height_get = *LibreDwgc::Dwg_Entity_VIEWPORT_view_height_get;
*swig_view_height_set = *LibreDwgc::Dwg_Entity_VIEWPORT_view_height_set;
*swig_lens_length_get = *LibreDwgc::Dwg_Entity_VIEWPORT_lens_length_get;
*swig_lens_length_set = *LibreDwgc::Dwg_Entity_VIEWPORT_lens_length_set;
*swig_front_clip_z_get = *LibreDwgc::Dwg_Entity_VIEWPORT_front_clip_z_get;
*swig_front_clip_z_set = *LibreDwgc::Dwg_Entity_VIEWPORT_front_clip_z_set;
*swig_back_clip_z_get = *LibreDwgc::Dwg_Entity_VIEWPORT_back_clip_z_get;
*swig_back_clip_z_set = *LibreDwgc::Dwg_Entity_VIEWPORT_back_clip_z_set;
*swig_snap_angle_get = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_angle_get;
*swig_snap_angle_set = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_angle_set;
*swig_view_center_get = *LibreDwgc::Dwg_Entity_VIEWPORT_view_center_get;
*swig_view_center_set = *LibreDwgc::Dwg_Entity_VIEWPORT_view_center_set;
*swig_snap_base_get = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_base_get;
*swig_snap_base_set = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_base_set;
*swig_snap_spacing_get = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_spacing_get;
*swig_snap_spacing_set = *LibreDwgc::Dwg_Entity_VIEWPORT_snap_spacing_set;
*swig_grid_spacing_get = *LibreDwgc::Dwg_Entity_VIEWPORT_grid_spacing_get;
*swig_grid_spacing_set = *LibreDwgc::Dwg_Entity_VIEWPORT_grid_spacing_set;
*swig_circle_zoom_get = *LibreDwgc::Dwg_Entity_VIEWPORT_circle_zoom_get;
*swig_circle_zoom_set = *LibreDwgc::Dwg_Entity_VIEWPORT_circle_zoom_set;
*swig_grid_major_get = *LibreDwgc::Dwg_Entity_VIEWPORT_grid_major_get;
*swig_grid_major_set = *LibreDwgc::Dwg_Entity_VIEWPORT_grid_major_set;
*swig_frozen_layer_count_get = *LibreDwgc::Dwg_Entity_VIEWPORT_frozen_layer_count_get;
*swig_frozen_layer_count_set = *LibreDwgc::Dwg_Entity_VIEWPORT_frozen_layer_count_set;
*swig_status_flags_get = *LibreDwgc::Dwg_Entity_VIEWPORT_status_flags_get;
*swig_status_flags_set = *LibreDwgc::Dwg_Entity_VIEWPORT_status_flags_set;
*swig_style_sheet_get = *LibreDwgc::Dwg_Entity_VIEWPORT_style_sheet_get;
*swig_style_sheet_set = *LibreDwgc::Dwg_Entity_VIEWPORT_style_sheet_set;
*swig_render_mode_get = *LibreDwgc::Dwg_Entity_VIEWPORT_render_mode_get;
*swig_render_mode_set = *LibreDwgc::Dwg_Entity_VIEWPORT_render_mode_set;
*swig_ucs_at_origin_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_at_origin_get;
*swig_ucs_at_origin_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_at_origin_set;
*swig_ucs_per_viewport_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_per_viewport_get;
*swig_ucs_per_viewport_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_per_viewport_set;
*swig_ucs_origin_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_origin_set;
*swig_ucs_x_axis_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_y_axis_set;
*swig_ucs_elevation_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_elevation_get;
*swig_ucs_elevation_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_elevation_set;
*swig_ucs_ortho_view_type_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_ortho_view_type_get;
*swig_ucs_ortho_view_type_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ucs_ortho_view_type_set;
*swig_shadeplot_mode_get = *LibreDwgc::Dwg_Entity_VIEWPORT_shadeplot_mode_get;
*swig_shadeplot_mode_set = *LibreDwgc::Dwg_Entity_VIEWPORT_shadeplot_mode_set;
*swig_use_def_lights_get = *LibreDwgc::Dwg_Entity_VIEWPORT_use_def_lights_get;
*swig_use_def_lights_set = *LibreDwgc::Dwg_Entity_VIEWPORT_use_def_lights_set;
*swig_def_lighting_type_get = *LibreDwgc::Dwg_Entity_VIEWPORT_def_lighting_type_get;
*swig_def_lighting_type_set = *LibreDwgc::Dwg_Entity_VIEWPORT_def_lighting_type_set;
*swig_brightness_get = *LibreDwgc::Dwg_Entity_VIEWPORT_brightness_get;
*swig_brightness_set = *LibreDwgc::Dwg_Entity_VIEWPORT_brightness_set;
*swig_contrast_get = *LibreDwgc::Dwg_Entity_VIEWPORT_contrast_get;
*swig_contrast_set = *LibreDwgc::Dwg_Entity_VIEWPORT_contrast_set;
*swig_ambient_light_color_get = *LibreDwgc::Dwg_Entity_VIEWPORT_ambient_light_color_get;
*swig_ambient_light_color_set = *LibreDwgc::Dwg_Entity_VIEWPORT_ambient_light_color_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_VIEWPORT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_VIEWPORT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_ELLIPSE ##############

package LibreDwg::Dwg_Entity_ELLIPSE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_center_get = *LibreDwgc::Dwg_Entity_ELLIPSE_center_get;
*swig_center_set = *LibreDwgc::Dwg_Entity_ELLIPSE_center_set;
*swig_sm_axis_get = *LibreDwgc::Dwg_Entity_ELLIPSE_sm_axis_get;
*swig_sm_axis_set = *LibreDwgc::Dwg_Entity_ELLIPSE_sm_axis_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_ELLIPSE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_ELLIPSE_extrusion_set;
*swig_axis_ratio_get = *LibreDwgc::Dwg_Entity_ELLIPSE_axis_ratio_get;
*swig_axis_ratio_set = *LibreDwgc::Dwg_Entity_ELLIPSE_axis_ratio_set;
*swig_start_angle_get = *LibreDwgc::Dwg_Entity_ELLIPSE_start_angle_get;
*swig_start_angle_set = *LibreDwgc::Dwg_Entity_ELLIPSE_start_angle_set;
*swig_end_angle_get = *LibreDwgc::Dwg_Entity_ELLIPSE_end_angle_get;
*swig_end_angle_set = *LibreDwgc::Dwg_Entity_ELLIPSE_end_angle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_ELLIPSE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_ELLIPSE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SPLINE_point ##############

package LibreDwg::Dwg_Entity_SPLINE_point;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Entity_SPLINE_point_x_get;
*swig_x_set = *LibreDwgc::Dwg_Entity_SPLINE_point_x_set;
*swig_y_get = *LibreDwgc::Dwg_Entity_SPLINE_point_y_get;
*swig_y_set = *LibreDwgc::Dwg_Entity_SPLINE_point_y_set;
*swig_z_get = *LibreDwgc::Dwg_Entity_SPLINE_point_z_get;
*swig_z_set = *LibreDwgc::Dwg_Entity_SPLINE_point_z_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SPLINE_point(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SPLINE_point($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SPLINE_control_point ##############

package LibreDwg::Dwg_Entity_SPLINE_control_point;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Entity_SPLINE_control_point_x_get;
*swig_x_set = *LibreDwgc::Dwg_Entity_SPLINE_control_point_x_set;
*swig_y_get = *LibreDwgc::Dwg_Entity_SPLINE_control_point_y_get;
*swig_y_set = *LibreDwgc::Dwg_Entity_SPLINE_control_point_y_set;
*swig_z_get = *LibreDwgc::Dwg_Entity_SPLINE_control_point_z_get;
*swig_z_set = *LibreDwgc::Dwg_Entity_SPLINE_control_point_z_set;
*swig_w_get = *LibreDwgc::Dwg_Entity_SPLINE_control_point_w_get;
*swig_w_set = *LibreDwgc::Dwg_Entity_SPLINE_control_point_w_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SPLINE_control_point(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SPLINE_control_point($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_SPLINE ##############

package LibreDwg::Dwg_Entity_SPLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_scenario_get = *LibreDwgc::Dwg_Entity_SPLINE_scenario_get;
*swig_scenario_set = *LibreDwgc::Dwg_Entity_SPLINE_scenario_set;
*swig_degree_get = *LibreDwgc::Dwg_Entity_SPLINE_degree_get;
*swig_degree_set = *LibreDwgc::Dwg_Entity_SPLINE_degree_set;
*swig_fit_tol_get = *LibreDwgc::Dwg_Entity_SPLINE_fit_tol_get;
*swig_fit_tol_set = *LibreDwgc::Dwg_Entity_SPLINE_fit_tol_set;
*swig_beg_tan_vec_get = *LibreDwgc::Dwg_Entity_SPLINE_beg_tan_vec_get;
*swig_beg_tan_vec_set = *LibreDwgc::Dwg_Entity_SPLINE_beg_tan_vec_set;
*swig_end_tan_vec_get = *LibreDwgc::Dwg_Entity_SPLINE_end_tan_vec_get;
*swig_end_tan_vec_set = *LibreDwgc::Dwg_Entity_SPLINE_end_tan_vec_set;
*swig_rational_get = *LibreDwgc::Dwg_Entity_SPLINE_rational_get;
*swig_rational_set = *LibreDwgc::Dwg_Entity_SPLINE_rational_set;
*swig_closed_b_get = *LibreDwgc::Dwg_Entity_SPLINE_closed_b_get;
*swig_closed_b_set = *LibreDwgc::Dwg_Entity_SPLINE_closed_b_set;
*swig_periodic_get = *LibreDwgc::Dwg_Entity_SPLINE_periodic_get;
*swig_periodic_set = *LibreDwgc::Dwg_Entity_SPLINE_periodic_set;
*swig_weighted_get = *LibreDwgc::Dwg_Entity_SPLINE_weighted_get;
*swig_weighted_set = *LibreDwgc::Dwg_Entity_SPLINE_weighted_set;
*swig_knot_tol_get = *LibreDwgc::Dwg_Entity_SPLINE_knot_tol_get;
*swig_knot_tol_set = *LibreDwgc::Dwg_Entity_SPLINE_knot_tol_set;
*swig_ctrl_tol_get = *LibreDwgc::Dwg_Entity_SPLINE_ctrl_tol_get;
*swig_ctrl_tol_set = *LibreDwgc::Dwg_Entity_SPLINE_ctrl_tol_set;
*swig_num_fit_pts_get = *LibreDwgc::Dwg_Entity_SPLINE_num_fit_pts_get;
*swig_num_fit_pts_set = *LibreDwgc::Dwg_Entity_SPLINE_num_fit_pts_set;
*swig_fit_pts_get = *LibreDwgc::Dwg_Entity_SPLINE_fit_pts_get;
*swig_fit_pts_set = *LibreDwgc::Dwg_Entity_SPLINE_fit_pts_set;
*swig_num_knots_get = *LibreDwgc::Dwg_Entity_SPLINE_num_knots_get;
*swig_num_knots_set = *LibreDwgc::Dwg_Entity_SPLINE_num_knots_set;
*swig_knots_get = *LibreDwgc::Dwg_Entity_SPLINE_knots_get;
*swig_knots_set = *LibreDwgc::Dwg_Entity_SPLINE_knots_set;
*swig_num_ctrl_pts_get = *LibreDwgc::Dwg_Entity_SPLINE_num_ctrl_pts_get;
*swig_num_ctrl_pts_set = *LibreDwgc::Dwg_Entity_SPLINE_num_ctrl_pts_set;
*swig_ctrl_pts_get = *LibreDwgc::Dwg_Entity_SPLINE_ctrl_pts_get;
*swig_ctrl_pts_set = *LibreDwgc::Dwg_Entity_SPLINE_ctrl_pts_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_SPLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_SPLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_3DSOLID_wire ##############

package LibreDwg::Dwg_Entity_3DSOLID_wire;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_type_get;
*swig_type_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_type_set;
*swig_selection_marker_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_selection_marker_get;
*swig_selection_marker_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_selection_marker_set;
*swig_color_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_color_get;
*swig_color_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_color_set;
*swig_acis_index_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_acis_index_get;
*swig_acis_index_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_acis_index_set;
*swig_num_points_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_num_points_get;
*swig_num_points_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_num_points_set;
*swig_points_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_points_get;
*swig_points_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_points_set;
*swig_transform_present_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_transform_present_get;
*swig_transform_present_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_transform_present_set;
*swig_axis_x_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_x_get;
*swig_axis_x_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_x_set;
*swig_axis_y_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_y_get;
*swig_axis_y_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_y_set;
*swig_axis_z_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_z_get;
*swig_axis_z_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_axis_z_set;
*swig_translation_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_translation_get;
*swig_translation_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_translation_set;
*swig_scale_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_scale_set;
*swig_has_rotation_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_rotation_get;
*swig_has_rotation_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_rotation_set;
*swig_has_reflection_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_reflection_get;
*swig_has_reflection_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_reflection_set;
*swig_has_shear_get = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_shear_get;
*swig_has_shear_set = *LibreDwgc::Dwg_Entity_3DSOLID_wire_has_shear_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_3DSOLID_wire(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_3DSOLID_wire($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_3DSOLID_silhouette ##############

package LibreDwg::Dwg_Entity_3DSOLID_silhouette;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_vp_id_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_id_get;
*swig_vp_id_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_id_set;
*swig_vp_target_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_target_get;
*swig_vp_target_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_target_set;
*swig_vp_dir_from_target_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_dir_from_target_get;
*swig_vp_dir_from_target_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_dir_from_target_set;
*swig_vp_up_dir_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_up_dir_get;
*swig_vp_up_dir_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_up_dir_set;
*swig_vp_perspective_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_perspective_get;
*swig_vp_perspective_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_vp_perspective_set;
*swig_num_wires_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_num_wires_get;
*swig_num_wires_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_num_wires_set;
*swig_wires_get = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_wires_get;
*swig_wires_set = *LibreDwgc::Dwg_Entity_3DSOLID_silhouette_wires_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_3DSOLID_silhouette(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_3DSOLID_silhouette($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity__3DSOLID ##############

package LibreDwg::Dwg_Entity__3DSOLID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_acis_empty_get = *LibreDwgc::Dwg_Entity__3DSOLID_acis_empty_get;
*swig_acis_empty_set = *LibreDwgc::Dwg_Entity__3DSOLID_acis_empty_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity__3DSOLID_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity__3DSOLID_unknown_set;
*swig_version_get = *LibreDwgc::Dwg_Entity__3DSOLID_version_get;
*swig_version_set = *LibreDwgc::Dwg_Entity__3DSOLID_version_set;
*swig_block_size_get = *LibreDwgc::Dwg_Entity__3DSOLID_block_size_get;
*swig_block_size_set = *LibreDwgc::Dwg_Entity__3DSOLID_block_size_set;
*swig_sat_data_get = *LibreDwgc::Dwg_Entity__3DSOLID_sat_data_get;
*swig_sat_data_set = *LibreDwgc::Dwg_Entity__3DSOLID_sat_data_set;
*swig_acis_data_get = *LibreDwgc::Dwg_Entity__3DSOLID_acis_data_get;
*swig_acis_data_set = *LibreDwgc::Dwg_Entity__3DSOLID_acis_data_set;
*swig_wireframe_data_present_get = *LibreDwgc::Dwg_Entity__3DSOLID_wireframe_data_present_get;
*swig_wireframe_data_present_set = *LibreDwgc::Dwg_Entity__3DSOLID_wireframe_data_present_set;
*swig_point_present_get = *LibreDwgc::Dwg_Entity__3DSOLID_point_present_get;
*swig_point_present_set = *LibreDwgc::Dwg_Entity__3DSOLID_point_present_set;
*swig_point_get = *LibreDwgc::Dwg_Entity__3DSOLID_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity__3DSOLID_point_set;
*swig_num_isolines_get = *LibreDwgc::Dwg_Entity__3DSOLID_num_isolines_get;
*swig_num_isolines_set = *LibreDwgc::Dwg_Entity__3DSOLID_num_isolines_set;
*swig_isoline_present_get = *LibreDwgc::Dwg_Entity__3DSOLID_isoline_present_get;
*swig_isoline_present_set = *LibreDwgc::Dwg_Entity__3DSOLID_isoline_present_set;
*swig_num_wires_get = *LibreDwgc::Dwg_Entity__3DSOLID_num_wires_get;
*swig_num_wires_set = *LibreDwgc::Dwg_Entity__3DSOLID_num_wires_set;
*swig_wires_get = *LibreDwgc::Dwg_Entity__3DSOLID_wires_get;
*swig_wires_set = *LibreDwgc::Dwg_Entity__3DSOLID_wires_set;
*swig_num_silhouettes_get = *LibreDwgc::Dwg_Entity__3DSOLID_num_silhouettes_get;
*swig_num_silhouettes_set = *LibreDwgc::Dwg_Entity__3DSOLID_num_silhouettes_set;
*swig_silhouettes_get = *LibreDwgc::Dwg_Entity__3DSOLID_silhouettes_get;
*swig_silhouettes_set = *LibreDwgc::Dwg_Entity__3DSOLID_silhouettes_set;
*swig_acis_empty2_get = *LibreDwgc::Dwg_Entity__3DSOLID_acis_empty2_get;
*swig_acis_empty2_set = *LibreDwgc::Dwg_Entity__3DSOLID_acis_empty2_set;
*swig_extra_acis_data_get = *LibreDwgc::Dwg_Entity__3DSOLID_extra_acis_data_get;
*swig_extra_acis_data_set = *LibreDwgc::Dwg_Entity__3DSOLID_extra_acis_data_set;
*swig_unknown_2007_get = *LibreDwgc::Dwg_Entity__3DSOLID_unknown_2007_get;
*swig_unknown_2007_set = *LibreDwgc::Dwg_Entity__3DSOLID_unknown_2007_set;
*swig_history_id_get = *LibreDwgc::Dwg_Entity__3DSOLID_history_id_get;
*swig_history_id_set = *LibreDwgc::Dwg_Entity__3DSOLID_history_id_set;
*swig_ACIS_empty_bit_get = *LibreDwgc::Dwg_Entity__3DSOLID_ACIS_empty_bit_get;
*swig_ACIS_empty_bit_set = *LibreDwgc::Dwg_Entity__3DSOLID_ACIS_empty_bit_set;
*swig_raw_sat_data_get = *LibreDwgc::Dwg_Entity__3DSOLID_raw_sat_data_get;
*swig_raw_sat_data_set = *LibreDwgc::Dwg_Entity__3DSOLID_raw_sat_data_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity__3DSOLID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity__3DSOLID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_RAY ##############

package LibreDwg::Dwg_Entity_RAY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_point_get = *LibreDwgc::Dwg_Entity_RAY_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity_RAY_point_set;
*swig_vector_get = *LibreDwgc::Dwg_Entity_RAY_vector_get;
*swig_vector_set = *LibreDwgc::Dwg_Entity_RAY_vector_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_RAY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_RAY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_DICTIONARY ##############

package LibreDwg::Dwg_Object_DICTIONARY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_numitems_get = *LibreDwgc::Dwg_Object_DICTIONARY_numitems_get;
*swig_numitems_set = *LibreDwgc::Dwg_Object_DICTIONARY_numitems_set;
*swig_unknown_r14_get = *LibreDwgc::Dwg_Object_DICTIONARY_unknown_r14_get;
*swig_unknown_r14_set = *LibreDwgc::Dwg_Object_DICTIONARY_unknown_r14_set;
*swig_cloning_get = *LibreDwgc::Dwg_Object_DICTIONARY_cloning_get;
*swig_cloning_set = *LibreDwgc::Dwg_Object_DICTIONARY_cloning_set;
*swig_hard_owner_get = *LibreDwgc::Dwg_Object_DICTIONARY_hard_owner_get;
*swig_hard_owner_set = *LibreDwgc::Dwg_Object_DICTIONARY_hard_owner_set;
*swig_text_get = *LibreDwgc::Dwg_Object_DICTIONARY_text_get;
*swig_text_set = *LibreDwgc::Dwg_Object_DICTIONARY_text_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_DICTIONARY_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_DICTIONARY_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_DICTIONARY_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_DICTIONARY_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_DICTIONARY_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_DICTIONARY_xdicobjhandle_set;
*swig_itemhandles_get = *LibreDwgc::Dwg_Object_DICTIONARY_itemhandles_get;
*swig_itemhandles_set = *LibreDwgc::Dwg_Object_DICTIONARY_itemhandles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_DICTIONARY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_DICTIONARY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_DICTIONARYWDLFT ##############

package LibreDwg::Dwg_Object_DICTIONARYWDLFT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_numitems_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_numitems_get;
*swig_numitems_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_numitems_set;
*swig_unknown_r14_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_unknown_r14_get;
*swig_unknown_r14_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_unknown_r14_set;
*swig_cloning_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_cloning_get;
*swig_cloning_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_cloning_set;
*swig_hard_owner_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_hard_owner_get;
*swig_hard_owner_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_hard_owner_set;
*swig_text_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_text_get;
*swig_text_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_text_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_xdicobjhandle_set;
*swig_itemhandles_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_itemhandles_get;
*swig_itemhandles_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_itemhandles_set;
*swig_defaultid_get = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_defaultid_get;
*swig_defaultid_set = *LibreDwgc::Dwg_Object_DICTIONARYWDLFT_defaultid_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_DICTIONARYWDLFT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_DICTIONARYWDLFT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_MTEXT ##############

package LibreDwg::Dwg_Entity_MTEXT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_insertion_pt_get = *LibreDwgc::Dwg_Entity_MTEXT_insertion_pt_get;
*swig_insertion_pt_set = *LibreDwgc::Dwg_Entity_MTEXT_insertion_pt_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_MTEXT_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_MTEXT_extrusion_set;
*swig_x_axis_dir_get = *LibreDwgc::Dwg_Entity_MTEXT_x_axis_dir_get;
*swig_x_axis_dir_set = *LibreDwgc::Dwg_Entity_MTEXT_x_axis_dir_set;
*swig_rect_height_get = *LibreDwgc::Dwg_Entity_MTEXT_rect_height_get;
*swig_rect_height_set = *LibreDwgc::Dwg_Entity_MTEXT_rect_height_set;
*swig_rect_width_get = *LibreDwgc::Dwg_Entity_MTEXT_rect_width_get;
*swig_rect_width_set = *LibreDwgc::Dwg_Entity_MTEXT_rect_width_set;
*swig_text_height_get = *LibreDwgc::Dwg_Entity_MTEXT_text_height_get;
*swig_text_height_set = *LibreDwgc::Dwg_Entity_MTEXT_text_height_set;
*swig_attachment_get = *LibreDwgc::Dwg_Entity_MTEXT_attachment_get;
*swig_attachment_set = *LibreDwgc::Dwg_Entity_MTEXT_attachment_set;
*swig_drawing_dir_get = *LibreDwgc::Dwg_Entity_MTEXT_drawing_dir_get;
*swig_drawing_dir_set = *LibreDwgc::Dwg_Entity_MTEXT_drawing_dir_set;
*swig_extends_ht_get = *LibreDwgc::Dwg_Entity_MTEXT_extends_ht_get;
*swig_extends_ht_set = *LibreDwgc::Dwg_Entity_MTEXT_extends_ht_set;
*swig_extends_wid_get = *LibreDwgc::Dwg_Entity_MTEXT_extends_wid_get;
*swig_extends_wid_set = *LibreDwgc::Dwg_Entity_MTEXT_extends_wid_set;
*swig_text_get = *LibreDwgc::Dwg_Entity_MTEXT_text_get;
*swig_text_set = *LibreDwgc::Dwg_Entity_MTEXT_text_set;
*swig_linespace_style_get = *LibreDwgc::Dwg_Entity_MTEXT_linespace_style_get;
*swig_linespace_style_set = *LibreDwgc::Dwg_Entity_MTEXT_linespace_style_set;
*swig_linespace_factor_get = *LibreDwgc::Dwg_Entity_MTEXT_linespace_factor_get;
*swig_linespace_factor_set = *LibreDwgc::Dwg_Entity_MTEXT_linespace_factor_set;
*swig_unknown_bit_get = *LibreDwgc::Dwg_Entity_MTEXT_unknown_bit_get;
*swig_unknown_bit_set = *LibreDwgc::Dwg_Entity_MTEXT_unknown_bit_set;
*swig_unknown_long_get = *LibreDwgc::Dwg_Entity_MTEXT_unknown_long_get;
*swig_unknown_long_set = *LibreDwgc::Dwg_Entity_MTEXT_unknown_long_set;
*swig_style_get = *LibreDwgc::Dwg_Entity_MTEXT_style_get;
*swig_style_set = *LibreDwgc::Dwg_Entity_MTEXT_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_MTEXT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_MTEXT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_LEADER ##############

package LibreDwg::Dwg_Entity_LEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_bit_1_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_1_get;
*swig_unknown_bit_1_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_1_set;
*swig_annot_type_get = *LibreDwgc::Dwg_Entity_LEADER_annot_type_get;
*swig_annot_type_set = *LibreDwgc::Dwg_Entity_LEADER_annot_type_set;
*swig_path_type_get = *LibreDwgc::Dwg_Entity_LEADER_path_type_get;
*swig_path_type_set = *LibreDwgc::Dwg_Entity_LEADER_path_type_set;
*swig_numpts_get = *LibreDwgc::Dwg_Entity_LEADER_numpts_get;
*swig_numpts_set = *LibreDwgc::Dwg_Entity_LEADER_numpts_set;
*swig_points_get = *LibreDwgc::Dwg_Entity_LEADER_points_get;
*swig_points_set = *LibreDwgc::Dwg_Entity_LEADER_points_set;
*swig_end_pt_proj_get = *LibreDwgc::Dwg_Entity_LEADER_end_pt_proj_get;
*swig_end_pt_proj_set = *LibreDwgc::Dwg_Entity_LEADER_end_pt_proj_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_LEADER_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_LEADER_extrusion_set;
*swig_x_direction_get = *LibreDwgc::Dwg_Entity_LEADER_x_direction_get;
*swig_x_direction_set = *LibreDwgc::Dwg_Entity_LEADER_x_direction_set;
*swig_offset_to_block_ins_pt_get = *LibreDwgc::Dwg_Entity_LEADER_offset_to_block_ins_pt_get;
*swig_offset_to_block_ins_pt_set = *LibreDwgc::Dwg_Entity_LEADER_offset_to_block_ins_pt_set;
*swig_unknown_pt_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_pt_get;
*swig_unknown_pt_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_pt_set;
*swig_dimgap_get = *LibreDwgc::Dwg_Entity_LEADER_dimgap_get;
*swig_dimgap_set = *LibreDwgc::Dwg_Entity_LEADER_dimgap_set;
*swig_box_height_get = *LibreDwgc::Dwg_Entity_LEADER_box_height_get;
*swig_box_height_set = *LibreDwgc::Dwg_Entity_LEADER_box_height_set;
*swig_box_width_get = *LibreDwgc::Dwg_Entity_LEADER_box_width_get;
*swig_box_width_set = *LibreDwgc::Dwg_Entity_LEADER_box_width_set;
*swig_hooklineonxdir_get = *LibreDwgc::Dwg_Entity_LEADER_hooklineonxdir_get;
*swig_hooklineonxdir_set = *LibreDwgc::Dwg_Entity_LEADER_hooklineonxdir_set;
*swig_arrowhead_on_get = *LibreDwgc::Dwg_Entity_LEADER_arrowhead_on_get;
*swig_arrowhead_on_set = *LibreDwgc::Dwg_Entity_LEADER_arrowhead_on_set;
*swig_arrowhead_type_get = *LibreDwgc::Dwg_Entity_LEADER_arrowhead_type_get;
*swig_arrowhead_type_set = *LibreDwgc::Dwg_Entity_LEADER_arrowhead_type_set;
*swig_dimasz_get = *LibreDwgc::Dwg_Entity_LEADER_dimasz_get;
*swig_dimasz_set = *LibreDwgc::Dwg_Entity_LEADER_dimasz_set;
*swig_unknown_bit_2_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_2_get;
*swig_unknown_bit_2_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_2_set;
*swig_unknown_bit_3_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_3_get;
*swig_unknown_bit_3_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_3_set;
*swig_unknown_short_1_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_short_1_get;
*swig_unknown_short_1_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_short_1_set;
*swig_byblock_color_get = *LibreDwgc::Dwg_Entity_LEADER_byblock_color_get;
*swig_byblock_color_set = *LibreDwgc::Dwg_Entity_LEADER_byblock_color_set;
*swig_unknown_bit_4_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_4_get;
*swig_unknown_bit_4_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_4_set;
*swig_unknown_bit_5_get = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_5_get;
*swig_unknown_bit_5_set = *LibreDwgc::Dwg_Entity_LEADER_unknown_bit_5_set;
*swig_associated_annotation_get = *LibreDwgc::Dwg_Entity_LEADER_associated_annotation_get;
*swig_associated_annotation_set = *LibreDwgc::Dwg_Entity_LEADER_associated_annotation_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_LEADER_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_LEADER_dimstyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_LEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_LEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_TOLERANCE ##############

package LibreDwg::Dwg_Entity_TOLERANCE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_short_get = *LibreDwgc::Dwg_Entity_TOLERANCE_unknown_short_get;
*swig_unknown_short_set = *LibreDwgc::Dwg_Entity_TOLERANCE_unknown_short_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_TOLERANCE_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_TOLERANCE_height_set;
*swig_dimgap_get = *LibreDwgc::Dwg_Entity_TOLERANCE_dimgap_get;
*swig_dimgap_set = *LibreDwgc::Dwg_Entity_TOLERANCE_dimgap_set;
*swig_ins_pt_get = *LibreDwgc::Dwg_Entity_TOLERANCE_ins_pt_get;
*swig_ins_pt_set = *LibreDwgc::Dwg_Entity_TOLERANCE_ins_pt_set;
*swig_x_direction_get = *LibreDwgc::Dwg_Entity_TOLERANCE_x_direction_get;
*swig_x_direction_set = *LibreDwgc::Dwg_Entity_TOLERANCE_x_direction_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_TOLERANCE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_TOLERANCE_extrusion_set;
*swig_text_string_get = *LibreDwgc::Dwg_Entity_TOLERANCE_text_string_get;
*swig_text_string_set = *LibreDwgc::Dwg_Entity_TOLERANCE_text_string_set;
*swig_dimstyle_get = *LibreDwgc::Dwg_Entity_TOLERANCE_dimstyle_get;
*swig_dimstyle_set = *LibreDwgc::Dwg_Entity_TOLERANCE_dimstyle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_TOLERANCE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_TOLERANCE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_MLINE_line ##############

package LibreDwg::Dwg_Entity_MLINE_line;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_segparms_get = *LibreDwgc::Dwg_Entity_MLINE_line_num_segparms_get;
*swig_num_segparms_set = *LibreDwgc::Dwg_Entity_MLINE_line_num_segparms_set;
*swig_segparms_get = *LibreDwgc::Dwg_Entity_MLINE_line_segparms_get;
*swig_segparms_set = *LibreDwgc::Dwg_Entity_MLINE_line_segparms_set;
*swig_num_areafillparms_get = *LibreDwgc::Dwg_Entity_MLINE_line_num_areafillparms_get;
*swig_num_areafillparms_set = *LibreDwgc::Dwg_Entity_MLINE_line_num_areafillparms_set;
*swig_areafillparms_get = *LibreDwgc::Dwg_Entity_MLINE_line_areafillparms_get;
*swig_areafillparms_set = *LibreDwgc::Dwg_Entity_MLINE_line_areafillparms_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_MLINE_line(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_MLINE_line($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_MLINE_vert ##############

package LibreDwg::Dwg_Entity_MLINE_vert;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_vertex_get = *LibreDwgc::Dwg_Entity_MLINE_vert_vertex_get;
*swig_vertex_set = *LibreDwgc::Dwg_Entity_MLINE_vert_vertex_set;
*swig_vertex_direction_get = *LibreDwgc::Dwg_Entity_MLINE_vert_vertex_direction_get;
*swig_vertex_direction_set = *LibreDwgc::Dwg_Entity_MLINE_vert_vertex_direction_set;
*swig_miter_direction_get = *LibreDwgc::Dwg_Entity_MLINE_vert_miter_direction_get;
*swig_miter_direction_set = *LibreDwgc::Dwg_Entity_MLINE_vert_miter_direction_set;
*swig_lines_get = *LibreDwgc::Dwg_Entity_MLINE_vert_lines_get;
*swig_lines_set = *LibreDwgc::Dwg_Entity_MLINE_vert_lines_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_MLINE_vert(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_MLINE_vert($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_MLINE ##############

package LibreDwg::Dwg_Entity_MLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_scale_get = *LibreDwgc::Dwg_Entity_MLINE_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_MLINE_scale_set;
*swig_just_get = *LibreDwgc::Dwg_Entity_MLINE_just_get;
*swig_just_set = *LibreDwgc::Dwg_Entity_MLINE_just_set;
*swig_base_point_get = *LibreDwgc::Dwg_Entity_MLINE_base_point_get;
*swig_base_point_set = *LibreDwgc::Dwg_Entity_MLINE_base_point_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_MLINE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_MLINE_extrusion_set;
*swig_open_closed_get = *LibreDwgc::Dwg_Entity_MLINE_open_closed_get;
*swig_open_closed_set = *LibreDwgc::Dwg_Entity_MLINE_open_closed_set;
*swig_num_lines_get = *LibreDwgc::Dwg_Entity_MLINE_num_lines_get;
*swig_num_lines_set = *LibreDwgc::Dwg_Entity_MLINE_num_lines_set;
*swig_num_verts_get = *LibreDwgc::Dwg_Entity_MLINE_num_verts_get;
*swig_num_verts_set = *LibreDwgc::Dwg_Entity_MLINE_num_verts_set;
*swig_verts_get = *LibreDwgc::Dwg_Entity_MLINE_verts_get;
*swig_verts_set = *LibreDwgc::Dwg_Entity_MLINE_verts_set;
*swig_mline_style_get = *LibreDwgc::Dwg_Entity_MLINE_mline_style_get;
*swig_mline_style_set = *LibreDwgc::Dwg_Entity_MLINE_mline_style_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_MLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_MLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_BLOCK_CONTROL ##############

package LibreDwg::Dwg_Object_BLOCK_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_xdicobjhandle_set;
*swig_block_headers_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_block_headers_get;
*swig_block_headers_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_block_headers_set;
*swig_model_space_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_model_space_get;
*swig_model_space_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_model_space_set;
*swig_paper_space_get = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_paper_space_get;
*swig_paper_space_set = *LibreDwgc::Dwg_Object_BLOCK_CONTROL_paper_space_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_BLOCK_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_BLOCK_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_BLOCK_HEADER ##############

package LibreDwg::Dwg_Object_BLOCK_HEADER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig___iterator_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER___iterator_get;
*swig___iterator_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER___iterator_set;
*swig_entry_name_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xrefindex_plus1_set;
*swig_xdep_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xdep_get;
*swig_xdep_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xdep_set;
*swig_anonymous_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_anonymous_get;
*swig_anonymous_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_anonymous_set;
*swig_hasattrs_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_hasattrs_get;
*swig_hasattrs_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_hasattrs_set;
*swig_blkisxref_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_blkisxref_get;
*swig_blkisxref_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_blkisxref_set;
*swig_xrefoverlaid_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xrefoverlaid_get;
*swig_xrefoverlaid_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xrefoverlaid_set;
*swig_loaded_bit_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_loaded_bit_get;
*swig_loaded_bit_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_loaded_bit_set;
*swig_owned_object_count_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_owned_object_count_get;
*swig_owned_object_count_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_owned_object_count_set;
*swig_base_pt_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_base_pt_get;
*swig_base_pt_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_base_pt_set;
*swig_xref_pname_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xref_pname_get;
*swig_xref_pname_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xref_pname_set;
*swig_insert_count_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_count_get;
*swig_insert_count_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_count_set;
*swig_block_description_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_description_get;
*swig_block_description_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_description_set;
*swig_size_of_preview_data_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_size_of_preview_data_get;
*swig_size_of_preview_data_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_size_of_preview_data_set;
*swig_binary_preview_data_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_binary_preview_data_get;
*swig_binary_preview_data_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_binary_preview_data_set;
*swig_insert_units_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_units_get;
*swig_insert_units_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_units_set;
*swig_explodable_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_explodable_get;
*swig_explodable_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_explodable_set;
*swig_block_scaling_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_scaling_get;
*swig_block_scaling_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_scaling_set;
*swig_block_control_handle_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_control_handle_get;
*swig_block_control_handle_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_control_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_xdicobjhandle_set;
*swig_NULL_handle_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_NULL_handle_get;
*swig_NULL_handle_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_NULL_handle_set;
*swig_block_entity_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_entity_get;
*swig_block_entity_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_block_entity_set;
*swig_first_entity_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_first_entity_get;
*swig_first_entity_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_first_entity_set;
*swig_last_entity_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_last_entity_get;
*swig_last_entity_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_last_entity_set;
*swig_entities_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_entities_get;
*swig_entities_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_entities_set;
*swig_endblk_entity_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_endblk_entity_get;
*swig_endblk_entity_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_endblk_entity_set;
*swig_insert_handles_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_handles_get;
*swig_insert_handles_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_insert_handles_set;
*swig_layout_handle_get = *LibreDwgc::Dwg_Object_BLOCK_HEADER_layout_handle_get;
*swig_layout_handle_set = *LibreDwgc::Dwg_Object_BLOCK_HEADER_layout_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_BLOCK_HEADER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_BLOCK_HEADER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LAYER_CONTROL ##############

package LibreDwg::Dwg_Object_LAYER_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_LAYER_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_LAYER_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_LAYER_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_LAYER_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LAYER_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LAYER_CONTROL_xdicobjhandle_set;
*swig_layers_get = *LibreDwgc::Dwg_Object_LAYER_CONTROL_layers_get;
*swig_layers_set = *LibreDwgc::Dwg_Object_LAYER_CONTROL_layers_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LAYER_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LAYER_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LAYER ##############

package LibreDwg::Dwg_Object_LAYER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_LAYER_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_LAYER_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_LAYER__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_LAYER__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_LAYER_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_LAYER_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_LAYER_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_LAYER_xrefdep_set;
*swig_frozen_get = *LibreDwgc::Dwg_Object_LAYER_frozen_get;
*swig_frozen_set = *LibreDwgc::Dwg_Object_LAYER_frozen_set;
*swig_on_get = *LibreDwgc::Dwg_Object_LAYER_on_get;
*swig_on_set = *LibreDwgc::Dwg_Object_LAYER_on_set;
*swig_frozen_in_new_get = *LibreDwgc::Dwg_Object_LAYER_frozen_in_new_get;
*swig_frozen_in_new_set = *LibreDwgc::Dwg_Object_LAYER_frozen_in_new_set;
*swig_locked_get = *LibreDwgc::Dwg_Object_LAYER_locked_get;
*swig_locked_set = *LibreDwgc::Dwg_Object_LAYER_locked_set;
*swig_values_get = *LibreDwgc::Dwg_Object_LAYER_values_get;
*swig_values_set = *LibreDwgc::Dwg_Object_LAYER_values_set;
*swig_color_get = *LibreDwgc::Dwg_Object_LAYER_color_get;
*swig_color_set = *LibreDwgc::Dwg_Object_LAYER_color_set;
*swig_layer_control_get = *LibreDwgc::Dwg_Object_LAYER_layer_control_get;
*swig_layer_control_set = *LibreDwgc::Dwg_Object_LAYER_layer_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_LAYER_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_LAYER_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LAYER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LAYER_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_LAYER_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_LAYER_null_handle_set;
*swig_plotstyle_get = *LibreDwgc::Dwg_Object_LAYER_plotstyle_get;
*swig_plotstyle_set = *LibreDwgc::Dwg_Object_LAYER_plotstyle_set;
*swig_material_get = *LibreDwgc::Dwg_Object_LAYER_material_get;
*swig_material_set = *LibreDwgc::Dwg_Object_LAYER_material_set;
*swig_linetype_get = *LibreDwgc::Dwg_Object_LAYER_linetype_get;
*swig_linetype_set = *LibreDwgc::Dwg_Object_LAYER_linetype_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LAYER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LAYER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_SHAPEFILE_CONTROL ##############

package LibreDwg::Dwg_Object_SHAPEFILE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_xdicobjhandle_set;
*swig_shapefiles_get = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_shapefiles_get;
*swig_shapefiles_set = *LibreDwgc::Dwg_Object_SHAPEFILE_CONTROL_shapefiles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_SHAPEFILE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_SHAPEFILE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_SHAPEFILE ##############

package LibreDwg::Dwg_Object_SHAPEFILE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_SHAPEFILE_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_SHAPEFILE_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_SHAPEFILE__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_SHAPEFILE__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_SHAPEFILE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_SHAPEFILE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_SHAPEFILE_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_SHAPEFILE_xrefdep_set;
*swig_vertical_get = *LibreDwgc::Dwg_Object_SHAPEFILE_vertical_get;
*swig_vertical_set = *LibreDwgc::Dwg_Object_SHAPEFILE_vertical_set;
*swig_shape_file_get = *LibreDwgc::Dwg_Object_SHAPEFILE_shape_file_get;
*swig_shape_file_set = *LibreDwgc::Dwg_Object_SHAPEFILE_shape_file_set;
*swig_fixed_height_get = *LibreDwgc::Dwg_Object_SHAPEFILE_fixed_height_get;
*swig_fixed_height_set = *LibreDwgc::Dwg_Object_SHAPEFILE_fixed_height_set;
*swig_width_factor_get = *LibreDwgc::Dwg_Object_SHAPEFILE_width_factor_get;
*swig_width_factor_set = *LibreDwgc::Dwg_Object_SHAPEFILE_width_factor_set;
*swig_oblique_ang_get = *LibreDwgc::Dwg_Object_SHAPEFILE_oblique_ang_get;
*swig_oblique_ang_set = *LibreDwgc::Dwg_Object_SHAPEFILE_oblique_ang_set;
*swig_generation_get = *LibreDwgc::Dwg_Object_SHAPEFILE_generation_get;
*swig_generation_set = *LibreDwgc::Dwg_Object_SHAPEFILE_generation_set;
*swig_last_height_get = *LibreDwgc::Dwg_Object_SHAPEFILE_last_height_get;
*swig_last_height_set = *LibreDwgc::Dwg_Object_SHAPEFILE_last_height_set;
*swig_font_name_get = *LibreDwgc::Dwg_Object_SHAPEFILE_font_name_get;
*swig_font_name_set = *LibreDwgc::Dwg_Object_SHAPEFILE_font_name_set;
*swig_bigfont_name_get = *LibreDwgc::Dwg_Object_SHAPEFILE_bigfont_name_get;
*swig_bigfont_name_set = *LibreDwgc::Dwg_Object_SHAPEFILE_bigfont_name_set;
*swig_shapefile_control_get = *LibreDwgc::Dwg_Object_SHAPEFILE_shapefile_control_get;
*swig_shapefile_control_set = *LibreDwgc::Dwg_Object_SHAPEFILE_shapefile_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_SHAPEFILE_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_SHAPEFILE_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_SHAPEFILE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_SHAPEFILE_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_SHAPEFILE_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_SHAPEFILE_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_SHAPEFILE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_SHAPEFILE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LTYPE_CONTROL ##############

package LibreDwg::Dwg_Object_LTYPE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_xdicobjhandle_set;
*swig_linetypes_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_linetypes_get;
*swig_linetypes_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_linetypes_set;
*swig_bylayer_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_bylayer_get;
*swig_bylayer_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_bylayer_set;
*swig_byblock_get = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_byblock_get;
*swig_byblock_set = *LibreDwgc::Dwg_Object_LTYPE_CONTROL_byblock_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LTYPE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LTYPE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::LTYPE_dash ##############

package LibreDwg::LTYPE_dash;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_length_get = *LibreDwgc::LTYPE_dash_length_get;
*swig_length_set = *LibreDwgc::LTYPE_dash_length_set;
*swig_complex_shapecode_get = *LibreDwgc::LTYPE_dash_complex_shapecode_get;
*swig_complex_shapecode_set = *LibreDwgc::LTYPE_dash_complex_shapecode_set;
*swig_x_offset_get = *LibreDwgc::LTYPE_dash_x_offset_get;
*swig_x_offset_set = *LibreDwgc::LTYPE_dash_x_offset_set;
*swig_y_offset_get = *LibreDwgc::LTYPE_dash_y_offset_get;
*swig_y_offset_set = *LibreDwgc::LTYPE_dash_y_offset_set;
*swig_scale_get = *LibreDwgc::LTYPE_dash_scale_get;
*swig_scale_set = *LibreDwgc::LTYPE_dash_scale_set;
*swig_rotation_get = *LibreDwgc::LTYPE_dash_rotation_get;
*swig_rotation_set = *LibreDwgc::LTYPE_dash_rotation_set;
*swig_shape_flag_get = *LibreDwgc::LTYPE_dash_shape_flag_get;
*swig_shape_flag_set = *LibreDwgc::LTYPE_dash_shape_flag_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_LTYPE_dash(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_LTYPE_dash($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LTYPE ##############

package LibreDwg::Dwg_Object_LTYPE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_LTYPE_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_LTYPE_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_LTYPE__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_LTYPE__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_LTYPE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_LTYPE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_LTYPE_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_LTYPE_xrefdep_set;
*swig_description_get = *LibreDwgc::Dwg_Object_LTYPE_description_get;
*swig_description_set = *LibreDwgc::Dwg_Object_LTYPE_description_set;
*swig_pattern_len_get = *LibreDwgc::Dwg_Object_LTYPE_pattern_len_get;
*swig_pattern_len_set = *LibreDwgc::Dwg_Object_LTYPE_pattern_len_set;
*swig_alignment_get = *LibreDwgc::Dwg_Object_LTYPE_alignment_get;
*swig_alignment_set = *LibreDwgc::Dwg_Object_LTYPE_alignment_set;
*swig_num_dashes_get = *LibreDwgc::Dwg_Object_LTYPE_num_dashes_get;
*swig_num_dashes_set = *LibreDwgc::Dwg_Object_LTYPE_num_dashes_set;
*swig_dash_get = *LibreDwgc::Dwg_Object_LTYPE_dash_get;
*swig_dash_set = *LibreDwgc::Dwg_Object_LTYPE_dash_set;
*swig_strings_area_get = *LibreDwgc::Dwg_Object_LTYPE_strings_area_get;
*swig_strings_area_set = *LibreDwgc::Dwg_Object_LTYPE_strings_area_set;
*swig_linetype_control_get = *LibreDwgc::Dwg_Object_LTYPE_linetype_control_get;
*swig_linetype_control_set = *LibreDwgc::Dwg_Object_LTYPE_linetype_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_LTYPE_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_LTYPE_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LTYPE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LTYPE_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_LTYPE_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_LTYPE_null_handle_set;
*swig_shapefiles_get = *LibreDwgc::Dwg_Object_LTYPE_shapefiles_get;
*swig_shapefiles_set = *LibreDwgc::Dwg_Object_LTYPE_shapefiles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LTYPE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LTYPE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VIEW_CONTROL ##############

package LibreDwg::Dwg_Object_VIEW_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_VIEW_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_VIEW_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_VIEW_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_VIEW_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VIEW_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VIEW_CONTROL_xdicobjhandle_set;
*swig_views_get = *LibreDwgc::Dwg_Object_VIEW_CONTROL_views_get;
*swig_views_set = *LibreDwgc::Dwg_Object_VIEW_CONTROL_views_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VIEW_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VIEW_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VIEW ##############

package LibreDwg::Dwg_Object_VIEW;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_VIEW_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_VIEW_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_VIEW__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_VIEW__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_VIEW_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_VIEW_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_VIEW_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_VIEW_xrefdep_set;
*swig_height_get = *LibreDwgc::Dwg_Object_VIEW_height_get;
*swig_height_set = *LibreDwgc::Dwg_Object_VIEW_height_set;
*swig_width_get = *LibreDwgc::Dwg_Object_VIEW_width_get;
*swig_width_set = *LibreDwgc::Dwg_Object_VIEW_width_set;
*swig_center_get = *LibreDwgc::Dwg_Object_VIEW_center_get;
*swig_center_set = *LibreDwgc::Dwg_Object_VIEW_center_set;
*swig_target_get = *LibreDwgc::Dwg_Object_VIEW_target_get;
*swig_target_set = *LibreDwgc::Dwg_Object_VIEW_target_set;
*swig_direction_get = *LibreDwgc::Dwg_Object_VIEW_direction_get;
*swig_direction_set = *LibreDwgc::Dwg_Object_VIEW_direction_set;
*swig_twist_angle_get = *LibreDwgc::Dwg_Object_VIEW_twist_angle_get;
*swig_twist_angle_set = *LibreDwgc::Dwg_Object_VIEW_twist_angle_set;
*swig_lens_legth_get = *LibreDwgc::Dwg_Object_VIEW_lens_legth_get;
*swig_lens_legth_set = *LibreDwgc::Dwg_Object_VIEW_lens_legth_set;
*swig_front_clip_get = *LibreDwgc::Dwg_Object_VIEW_front_clip_get;
*swig_front_clip_set = *LibreDwgc::Dwg_Object_VIEW_front_clip_set;
*swig_back_clip_get = *LibreDwgc::Dwg_Object_VIEW_back_clip_get;
*swig_back_clip_set = *LibreDwgc::Dwg_Object_VIEW_back_clip_set;
*swig_view_mode_get = *LibreDwgc::Dwg_Object_VIEW_view_mode_get;
*swig_view_mode_set = *LibreDwgc::Dwg_Object_VIEW_view_mode_set;
*swig_render_mode_get = *LibreDwgc::Dwg_Object_VIEW_render_mode_get;
*swig_render_mode_set = *LibreDwgc::Dwg_Object_VIEW_render_mode_set;
*swig_pspace_flag_get = *LibreDwgc::Dwg_Object_VIEW_pspace_flag_get;
*swig_pspace_flag_set = *LibreDwgc::Dwg_Object_VIEW_pspace_flag_set;
*swig_associated_ucs_get = *LibreDwgc::Dwg_Object_VIEW_associated_ucs_get;
*swig_associated_ucs_set = *LibreDwgc::Dwg_Object_VIEW_associated_ucs_set;
*swig_origin_get = *LibreDwgc::Dwg_Object_VIEW_origin_get;
*swig_origin_set = *LibreDwgc::Dwg_Object_VIEW_origin_set;
*swig_x_direction_get = *LibreDwgc::Dwg_Object_VIEW_x_direction_get;
*swig_x_direction_set = *LibreDwgc::Dwg_Object_VIEW_x_direction_set;
*swig_y_direction_get = *LibreDwgc::Dwg_Object_VIEW_y_direction_get;
*swig_y_direction_set = *LibreDwgc::Dwg_Object_VIEW_y_direction_set;
*swig_elevation_get = *LibreDwgc::Dwg_Object_VIEW_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Object_VIEW_elevation_set;
*swig_orthographic_view_type_get = *LibreDwgc::Dwg_Object_VIEW_orthographic_view_type_get;
*swig_orthographic_view_type_set = *LibreDwgc::Dwg_Object_VIEW_orthographic_view_type_set;
*swig_camera_plottable_get = *LibreDwgc::Dwg_Object_VIEW_camera_plottable_get;
*swig_camera_plottable_set = *LibreDwgc::Dwg_Object_VIEW_camera_plottable_set;
*swig_view_control_handle_get = *LibreDwgc::Dwg_Object_VIEW_view_control_handle_get;
*swig_view_control_handle_set = *LibreDwgc::Dwg_Object_VIEW_view_control_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_VIEW_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_VIEW_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VIEW_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VIEW_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_VIEW_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_VIEW_null_handle_set;
*swig_base_ucs_handle_get = *LibreDwgc::Dwg_Object_VIEW_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDwgc::Dwg_Object_VIEW_base_ucs_handle_set;
*swig_named_ucs_handle_get = *LibreDwgc::Dwg_Object_VIEW_named_ucs_handle_get;
*swig_named_ucs_handle_set = *LibreDwgc::Dwg_Object_VIEW_named_ucs_handle_set;
*swig_live_section_get = *LibreDwgc::Dwg_Object_VIEW_live_section_get;
*swig_live_section_set = *LibreDwgc::Dwg_Object_VIEW_live_section_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VIEW(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VIEW($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_UCS_CONTROL ##############

package LibreDwg::Dwg_Object_UCS_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_UCS_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_UCS_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_UCS_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_UCS_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_UCS_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_UCS_CONTROL_xdicobjhandle_set;
*swig_ucs_get = *LibreDwgc::Dwg_Object_UCS_CONTROL_ucs_get;
*swig_ucs_set = *LibreDwgc::Dwg_Object_UCS_CONTROL_ucs_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_UCS_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_UCS_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_UCS ##############

package LibreDwg::Dwg_Object_UCS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_UCS_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_UCS_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_UCS__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_UCS__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_UCS_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_UCS_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_UCS_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_UCS_xrefdep_set;
*swig_origin_get = *LibreDwgc::Dwg_Object_UCS_origin_get;
*swig_origin_set = *LibreDwgc::Dwg_Object_UCS_origin_set;
*swig_x_direction_get = *LibreDwgc::Dwg_Object_UCS_x_direction_get;
*swig_x_direction_set = *LibreDwgc::Dwg_Object_UCS_x_direction_set;
*swig_y_direction_get = *LibreDwgc::Dwg_Object_UCS_y_direction_get;
*swig_y_direction_set = *LibreDwgc::Dwg_Object_UCS_y_direction_set;
*swig_elevation_get = *LibreDwgc::Dwg_Object_UCS_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Object_UCS_elevation_set;
*swig_orthographic_view_type_get = *LibreDwgc::Dwg_Object_UCS_orthographic_view_type_get;
*swig_orthographic_view_type_set = *LibreDwgc::Dwg_Object_UCS_orthographic_view_type_set;
*swig_orthographic_type_get = *LibreDwgc::Dwg_Object_UCS_orthographic_type_get;
*swig_orthographic_type_set = *LibreDwgc::Dwg_Object_UCS_orthographic_type_set;
*swig_ucs_control_handle_get = *LibreDwgc::Dwg_Object_UCS_ucs_control_handle_get;
*swig_ucs_control_handle_set = *LibreDwgc::Dwg_Object_UCS_ucs_control_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_UCS_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_UCS_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_UCS_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_UCS_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_UCS_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_UCS_null_handle_set;
*swig_base_ucs_handle_get = *LibreDwgc::Dwg_Object_UCS_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDwgc::Dwg_Object_UCS_base_ucs_handle_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_UCS_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_UCS_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_UCS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_UCS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VPORT_CONTROL ##############

package LibreDwg::Dwg_Object_VPORT_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_VPORT_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_VPORT_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_VPORT_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_VPORT_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VPORT_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VPORT_CONTROL_xdicobjhandle_set;
*swig_vports_get = *LibreDwgc::Dwg_Object_VPORT_CONTROL_vports_get;
*swig_vports_set = *LibreDwgc::Dwg_Object_VPORT_CONTROL_vports_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VPORT_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VPORT_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VPORT ##############

package LibreDwg::Dwg_Object_VPORT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_VPORT_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_VPORT_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_VPORT__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_VPORT__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_VPORT_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_VPORT_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_VPORT_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_VPORT_xrefdep_set;
*swig_view_height_get = *LibreDwgc::Dwg_Object_VPORT_view_height_get;
*swig_view_height_set = *LibreDwgc::Dwg_Object_VPORT_view_height_set;
*swig_aspect_ratio_get = *LibreDwgc::Dwg_Object_VPORT_aspect_ratio_get;
*swig_aspect_ratio_set = *LibreDwgc::Dwg_Object_VPORT_aspect_ratio_set;
*swig_view_center_get = *LibreDwgc::Dwg_Object_VPORT_view_center_get;
*swig_view_center_set = *LibreDwgc::Dwg_Object_VPORT_view_center_set;
*swig_view_target_get = *LibreDwgc::Dwg_Object_VPORT_view_target_get;
*swig_view_target_set = *LibreDwgc::Dwg_Object_VPORT_view_target_set;
*swig_view_dir_get = *LibreDwgc::Dwg_Object_VPORT_view_dir_get;
*swig_view_dir_set = *LibreDwgc::Dwg_Object_VPORT_view_dir_set;
*swig_view_twist_get = *LibreDwgc::Dwg_Object_VPORT_view_twist_get;
*swig_view_twist_set = *LibreDwgc::Dwg_Object_VPORT_view_twist_set;
*swig_lens_length_get = *LibreDwgc::Dwg_Object_VPORT_lens_length_get;
*swig_lens_length_set = *LibreDwgc::Dwg_Object_VPORT_lens_length_set;
*swig_front_clip_get = *LibreDwgc::Dwg_Object_VPORT_front_clip_get;
*swig_front_clip_set = *LibreDwgc::Dwg_Object_VPORT_front_clip_set;
*swig_back_clip_get = *LibreDwgc::Dwg_Object_VPORT_back_clip_get;
*swig_back_clip_set = *LibreDwgc::Dwg_Object_VPORT_back_clip_set;
*swig_view_mode_get = *LibreDwgc::Dwg_Object_VPORT_view_mode_get;
*swig_view_mode_set = *LibreDwgc::Dwg_Object_VPORT_view_mode_set;
*swig_render_mode_get = *LibreDwgc::Dwg_Object_VPORT_render_mode_get;
*swig_render_mode_set = *LibreDwgc::Dwg_Object_VPORT_render_mode_set;
*swig_use_default_lights_get = *LibreDwgc::Dwg_Object_VPORT_use_default_lights_get;
*swig_use_default_lights_set = *LibreDwgc::Dwg_Object_VPORT_use_default_lights_set;
*swig_default_lightining_type_get = *LibreDwgc::Dwg_Object_VPORT_default_lightining_type_get;
*swig_default_lightining_type_set = *LibreDwgc::Dwg_Object_VPORT_default_lightining_type_set;
*swig_brightness_get = *LibreDwgc::Dwg_Object_VPORT_brightness_get;
*swig_brightness_set = *LibreDwgc::Dwg_Object_VPORT_brightness_set;
*swig_contrast_get = *LibreDwgc::Dwg_Object_VPORT_contrast_get;
*swig_contrast_set = *LibreDwgc::Dwg_Object_VPORT_contrast_set;
*swig_ambient_color_get = *LibreDwgc::Dwg_Object_VPORT_ambient_color_get;
*swig_ambient_color_set = *LibreDwgc::Dwg_Object_VPORT_ambient_color_set;
*swig_lower_left_get = *LibreDwgc::Dwg_Object_VPORT_lower_left_get;
*swig_lower_left_set = *LibreDwgc::Dwg_Object_VPORT_lower_left_set;
*swig_upper_right_get = *LibreDwgc::Dwg_Object_VPORT_upper_right_get;
*swig_upper_right_set = *LibreDwgc::Dwg_Object_VPORT_upper_right_set;
*swig_UCSFOLLOW_get = *LibreDwgc::Dwg_Object_VPORT_UCSFOLLOW_get;
*swig_UCSFOLLOW_set = *LibreDwgc::Dwg_Object_VPORT_UCSFOLLOW_set;
*swig_circle_zoom_get = *LibreDwgc::Dwg_Object_VPORT_circle_zoom_get;
*swig_circle_zoom_set = *LibreDwgc::Dwg_Object_VPORT_circle_zoom_set;
*swig_fast_zoom_get = *LibreDwgc::Dwg_Object_VPORT_fast_zoom_get;
*swig_fast_zoom_set = *LibreDwgc::Dwg_Object_VPORT_fast_zoom_set;
*swig_UCSICON_0_get = *LibreDwgc::Dwg_Object_VPORT_UCSICON_0_get;
*swig_UCSICON_0_set = *LibreDwgc::Dwg_Object_VPORT_UCSICON_0_set;
*swig_UCSICON_1_get = *LibreDwgc::Dwg_Object_VPORT_UCSICON_1_get;
*swig_UCSICON_1_set = *LibreDwgc::Dwg_Object_VPORT_UCSICON_1_set;
*swig_grid_on_off_get = *LibreDwgc::Dwg_Object_VPORT_grid_on_off_get;
*swig_grid_on_off_set = *LibreDwgc::Dwg_Object_VPORT_grid_on_off_set;
*swig_grid_spacing_get = *LibreDwgc::Dwg_Object_VPORT_grid_spacing_get;
*swig_grid_spacing_set = *LibreDwgc::Dwg_Object_VPORT_grid_spacing_set;
*swig_snap_on_off_get = *LibreDwgc::Dwg_Object_VPORT_snap_on_off_get;
*swig_snap_on_off_set = *LibreDwgc::Dwg_Object_VPORT_snap_on_off_set;
*swig_snap_style_get = *LibreDwgc::Dwg_Object_VPORT_snap_style_get;
*swig_snap_style_set = *LibreDwgc::Dwg_Object_VPORT_snap_style_set;
*swig_snap_isopair_get = *LibreDwgc::Dwg_Object_VPORT_snap_isopair_get;
*swig_snap_isopair_set = *LibreDwgc::Dwg_Object_VPORT_snap_isopair_set;
*swig_snap_rot_get = *LibreDwgc::Dwg_Object_VPORT_snap_rot_get;
*swig_snap_rot_set = *LibreDwgc::Dwg_Object_VPORT_snap_rot_set;
*swig_snap_base_get = *LibreDwgc::Dwg_Object_VPORT_snap_base_get;
*swig_snap_base_set = *LibreDwgc::Dwg_Object_VPORT_snap_base_set;
*swig_snap_spacing_get = *LibreDwgc::Dwg_Object_VPORT_snap_spacing_get;
*swig_snap_spacing_set = *LibreDwgc::Dwg_Object_VPORT_snap_spacing_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_VPORT_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_VPORT_unknown_set;
*swig_ucs_pre_viewport_get = *LibreDwgc::Dwg_Object_VPORT_ucs_pre_viewport_get;
*swig_ucs_pre_viewport_set = *LibreDwgc::Dwg_Object_VPORT_ucs_pre_viewport_set;
*swig_ucs_origin_get = *LibreDwgc::Dwg_Object_VPORT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDwgc::Dwg_Object_VPORT_ucs_origin_set;
*swig_ucs_x_axis_get = *LibreDwgc::Dwg_Object_VPORT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDwgc::Dwg_Object_VPORT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDwgc::Dwg_Object_VPORT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDwgc::Dwg_Object_VPORT_ucs_y_axis_set;
*swig_ucs_elevation_get = *LibreDwgc::Dwg_Object_VPORT_ucs_elevation_get;
*swig_ucs_elevation_set = *LibreDwgc::Dwg_Object_VPORT_ucs_elevation_set;
*swig_ucs_orthografic_type_get = *LibreDwgc::Dwg_Object_VPORT_ucs_orthografic_type_get;
*swig_ucs_orthografic_type_set = *LibreDwgc::Dwg_Object_VPORT_ucs_orthografic_type_set;
*swig_grid_flags_get = *LibreDwgc::Dwg_Object_VPORT_grid_flags_get;
*swig_grid_flags_set = *LibreDwgc::Dwg_Object_VPORT_grid_flags_set;
*swig_grid_major_get = *LibreDwgc::Dwg_Object_VPORT_grid_major_get;
*swig_grid_major_set = *LibreDwgc::Dwg_Object_VPORT_grid_major_set;
*swig_vport_control_get = *LibreDwgc::Dwg_Object_VPORT_vport_control_get;
*swig_vport_control_set = *LibreDwgc::Dwg_Object_VPORT_vport_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_VPORT_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_VPORT_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VPORT_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VPORT_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_VPORT_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_VPORT_null_handle_set;
*swig_background_handle_get = *LibreDwgc::Dwg_Object_VPORT_background_handle_get;
*swig_background_handle_set = *LibreDwgc::Dwg_Object_VPORT_background_handle_set;
*swig_visual_style_handle_get = *LibreDwgc::Dwg_Object_VPORT_visual_style_handle_get;
*swig_visual_style_handle_set = *LibreDwgc::Dwg_Object_VPORT_visual_style_handle_set;
*swig_sun_handle_get = *LibreDwgc::Dwg_Object_VPORT_sun_handle_get;
*swig_sun_handle_set = *LibreDwgc::Dwg_Object_VPORT_sun_handle_set;
*swig_named_ucs_handle_get = *LibreDwgc::Dwg_Object_VPORT_named_ucs_handle_get;
*swig_named_ucs_handle_set = *LibreDwgc::Dwg_Object_VPORT_named_ucs_handle_set;
*swig_base_ucs_handle_get = *LibreDwgc::Dwg_Object_VPORT_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDwgc::Dwg_Object_VPORT_base_ucs_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VPORT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VPORT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_APPID_CONTROL ##############

package LibreDwg::Dwg_Object_APPID_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_APPID_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_APPID_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_APPID_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_APPID_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_APPID_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_APPID_CONTROL_xdicobjhandle_set;
*swig_apps_get = *LibreDwgc::Dwg_Object_APPID_CONTROL_apps_get;
*swig_apps_set = *LibreDwgc::Dwg_Object_APPID_CONTROL_apps_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_APPID_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_APPID_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_APPID ##############

package LibreDwg::Dwg_Object_APPID;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_APPID_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_APPID_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_APPID__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_APPID__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_APPID_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_APPID_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_APPID_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_APPID_xrefdep_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_APPID_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_APPID_unknown_set;
*swig_app_control_get = *LibreDwgc::Dwg_Object_APPID_app_control_get;
*swig_app_control_set = *LibreDwgc::Dwg_Object_APPID_app_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_APPID_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_APPID_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_APPID_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_APPID_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_APPID_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_APPID_null_handle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_APPID(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_APPID($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_DIMSTYLE_CONTROL ##############

package LibreDwg::Dwg_Object_DIMSTYLE_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_num_entries_set;
*swig_unknown_handle_get = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_unknown_handle_get;
*swig_unknown_handle_set = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_unknown_handle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_xdicobjhandle_set;
*swig_dimstyles_get = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_dimstyles_get;
*swig_dimstyles_set = *LibreDwgc::Dwg_Object_DIMSTYLE_CONTROL_dimstyles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_DIMSTYLE_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_DIMSTYLE_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_DIMSTYLE ##############

package LibreDwg::Dwg_Object_DIMSTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_DIMSTYLE_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_DIMSTYLE_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_DIMSTYLE__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_DIMSTYLE__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_DIMSTYLE_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_DIMSTYLE_xrefdep_set;
*swig_DIMTOL_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOL_get;
*swig_DIMTOL_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOL_set;
*swig_DIMLIM_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLIM_get;
*swig_DIMLIM_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLIM_set;
*swig_DIMTIH_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTIH_get;
*swig_DIMTIH_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTIH_set;
*swig_DIMTOH_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOH_get;
*swig_DIMTOH_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOH_set;
*swig_DIMSE1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSE1_get;
*swig_DIMSE1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSE1_set;
*swig_DIMSE2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSE2_get;
*swig_DIMSE2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSE2_set;
*swig_DIMALT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALT_get;
*swig_DIMALT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALT_set;
*swig_DIMTOFL_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOFL_get;
*swig_DIMTOFL_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOFL_set;
*swig_DIMSAH_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSAH_get;
*swig_DIMSAH_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSAH_set;
*swig_DIMTIX_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTIX_get;
*swig_DIMTIX_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTIX_set;
*swig_DIMSOXD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSOXD_get;
*swig_DIMSOXD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSOXD_set;
*swig_DIMALTD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTD_get;
*swig_DIMALTD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTD_set;
*swig_DIMZIN_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMZIN_get;
*swig_DIMZIN_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMZIN_set;
*swig_DIMSD1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSD1_get;
*swig_DIMSD1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSD1_set;
*swig_DIMSD2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSD2_get;
*swig_DIMSD2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSD2_set;
*swig_DIMTOLJ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOLJ_get;
*swig_DIMTOLJ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTOLJ_set;
*swig_DIMJUST_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMJUST_get;
*swig_DIMJUST_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMJUST_set;
*swig_DIMFIT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFIT_get;
*swig_DIMFIT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFIT_set;
*swig_DIMUPT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMUPT_get;
*swig_DIMUPT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMUPT_set;
*swig_DIMTZIN_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTZIN_get;
*swig_DIMTZIN_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTZIN_set;
*swig_DIMMALTZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMMALTZ_get;
*swig_DIMMALTZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMMALTZ_set;
*swig_DIMMALTTZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMMALTTZ_get;
*swig_DIMMALTTZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMMALTTZ_set;
*swig_DIMTAD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTAD_get;
*swig_DIMTAD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTAD_set;
*swig_DIMUNIT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMUNIT_get;
*swig_DIMUNIT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMUNIT_set;
*swig_DIMAUNIT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAUNIT_get;
*swig_DIMAUNIT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAUNIT_set;
*swig_DIMDEC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDEC_get;
*swig_DIMDEC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDEC_set;
*swig_DIMTDEC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTDEC_get;
*swig_DIMTDEC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTDEC_set;
*swig_DIMALTU_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTU_get;
*swig_DIMALTU_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTU_set;
*swig_DIMALTTD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTTD_get;
*swig_DIMALTTD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTTD_set;
*swig_DIMTXSTY_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXSTY_get;
*swig_DIMTXSTY_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXSTY_set;
*swig_DIMSCALE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSCALE_get;
*swig_DIMSCALE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMSCALE_set;
*swig_DIMASZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMASZ_get;
*swig_DIMASZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMASZ_set;
*swig_DIMEXO_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMEXO_get;
*swig_DIMEXO_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMEXO_set;
*swig_DIMDLI_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDLI_get;
*swig_DIMDLI_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDLI_set;
*swig_DIMEXE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMEXE_get;
*swig_DIMEXE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMEXE_set;
*swig_DIMRND_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMRND_get;
*swig_DIMRND_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMRND_set;
*swig_DIMDLE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDLE_get;
*swig_DIMDLE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDLE_set;
*swig_DIMTP_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTP_get;
*swig_DIMTP_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTP_set;
*swig_DIMTM_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTM_get;
*swig_DIMTM_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTM_set;
*swig_DIMFXL_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFXL_get;
*swig_DIMFXL_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFXL_set;
*swig_DIMJOGANG_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMJOGANG_get;
*swig_DIMJOGANG_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMJOGANG_set;
*swig_DIMTFILL_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFILL_get;
*swig_DIMTFILL_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFILL_set;
*swig_DIMTFILLCLR_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFILLCLR_get;
*swig_DIMTFILLCLR_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFILLCLR_set;
*swig_DIMAZIN_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAZIN_get;
*swig_DIMAZIN_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAZIN_set;
*swig_DIMARCSYM_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMARCSYM_get;
*swig_DIMARCSYM_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMARCSYM_set;
*swig_DIMTXT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXT_get;
*swig_DIMTXT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXT_set;
*swig_DIMCEN_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCEN_get;
*swig_DIMCEN_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCEN_set;
*swig_DIMTSZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTSZ_get;
*swig_DIMTSZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTSZ_set;
*swig_DIMALTF_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTF_get;
*swig_DIMALTF_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTF_set;
*swig_DIMLFAC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLFAC_get;
*swig_DIMLFAC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLFAC_set;
*swig_DIMTVP_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTVP_get;
*swig_DIMTVP_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTVP_set;
*swig_DIMTFAC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFAC_get;
*swig_DIMTFAC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTFAC_set;
*swig_DIMGAP_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMGAP_get;
*swig_DIMGAP_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMGAP_set;
*swig_DIMPOST_T_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMPOST_T_get;
*swig_DIMPOST_T_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMPOST_T_set;
*swig_DIMAPOST_T_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAPOST_T_get;
*swig_DIMAPOST_T_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAPOST_T_set;
*swig_DIMBLK_T_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK_T_get;
*swig_DIMBLK_T_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK_T_set;
*swig_DIMBLK1_T_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK1_T_get;
*swig_DIMBLK1_T_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK1_T_set;
*swig_DIMBLK2_T_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK2_T_get;
*swig_DIMBLK2_T_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK2_T_set;
*swig_DIMPOST_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMPOST_get;
*swig_DIMPOST_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMPOST_set;
*swig_DIMAPOST_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAPOST_get;
*swig_DIMAPOST_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMAPOST_set;
*swig_DIMALTRND_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTRND_get;
*swig_DIMALTRND_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTRND_set;
*swig_DIMCLRD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRD_get;
*swig_DIMCLRD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRD_set;
*swig_DIMCLRE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRE_get;
*swig_DIMCLRE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRE_set;
*swig_DIMCLRT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRT_get;
*swig_DIMCLRT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMCLRT_set;
*swig_DIMADEC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMADEC_get;
*swig_DIMADEC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMADEC_set;
*swig_DIMFRAC_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFRAC_get;
*swig_DIMFRAC_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFRAC_set;
*swig_DIMLUNIT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLUNIT_get;
*swig_DIMLUNIT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLUNIT_set;
*swig_DIMDSEP_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDSEP_get;
*swig_DIMDSEP_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMDSEP_set;
*swig_DIMTMOVE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTMOVE_get;
*swig_DIMTMOVE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTMOVE_set;
*swig_DIMALTZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTZ_get;
*swig_DIMALTZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTZ_set;
*swig_DIMALTTZ_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTTZ_get;
*swig_DIMALTTZ_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMALTTZ_set;
*swig_DIMATFIT_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMATFIT_get;
*swig_DIMATFIT_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMATFIT_set;
*swig_DIMFXLON_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFXLON_get;
*swig_DIMFXLON_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMFXLON_set;
*swig_DIMTXTSTY_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXTSTY_get;
*swig_DIMTXTSTY_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMTXTSTY_set;
*swig_DIMLDRBLK_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLDRBLK_get;
*swig_DIMLDRBLK_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLDRBLK_set;
*swig_DIMBLK_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK_get;
*swig_DIMBLK_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK_set;
*swig_DIMBLK1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK1_get;
*swig_DIMBLK1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK1_set;
*swig_DIMBLK2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK2_get;
*swig_DIMBLK2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMBLK2_set;
*swig_DIMLTYPE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTYPE_get;
*swig_DIMLTYPE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTYPE_set;
*swig_DIMLTEX1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTEX1_get;
*swig_DIMLTEX1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTEX1_set;
*swig_DIMLTEX2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTEX2_get;
*swig_DIMLTEX2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLTEX2_set;
*swig_DIMLWD_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLWD_get;
*swig_DIMLWD_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLWD_set;
*swig_DIMLWE_get = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLWE_get;
*swig_DIMLWE_set = *LibreDwgc::Dwg_Object_DIMSTYLE_DIMLWE_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_DIMSTYLE_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_DIMSTYLE_unknown_set;
*swig_dimstyle_control_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimstyle_control_get;
*swig_dimstyle_control_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimstyle_control_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_DIMSTYLE_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_DIMSTYLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_DIMSTYLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_DIMSTYLE_xdicobjhandle_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_DIMSTYLE_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_DIMSTYLE_null_handle_set;
*swig_shapefile_get = *LibreDwgc::Dwg_Object_DIMSTYLE_shapefile_get;
*swig_shapefile_set = *LibreDwgc::Dwg_Object_DIMSTYLE_shapefile_set;
*swig_leader_block_get = *LibreDwgc::Dwg_Object_DIMSTYLE_leader_block_get;
*swig_leader_block_set = *LibreDwgc::Dwg_Object_DIMSTYLE_leader_block_set;
*swig_dimblk_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk_get;
*swig_dimblk_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk_set;
*swig_dimblk1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk1_get;
*swig_dimblk1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk1_set;
*swig_dimblk2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk2_get;
*swig_dimblk2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimblk2_set;
*swig_dimltype_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltype_get;
*swig_dimltype_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltype_set;
*swig_dimltex1_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltex1_get;
*swig_dimltex1_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltex1_set;
*swig_dimltex2_get = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltex2_get;
*swig_dimltex2_set = *LibreDwgc::Dwg_Object_DIMSTYLE_dimltex2_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_DIMSTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_DIMSTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VP_ENT_HDR_CONTROL ##############

package LibreDwg::Dwg_Object_VP_ENT_HDR_CONTROL;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_num_entries_set;
*swig_null_handle_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_null_handle_get;
*swig_null_handle_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_null_handle_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_xdicobjhandle_set;
*swig_viewport_entity_headers_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_viewport_entity_headers_get;
*swig_viewport_entity_headers_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_CONTROL_viewport_entity_headers_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VP_ENT_HDR_CONTROL(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VP_ENT_HDR_CONTROL($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VP_ENT_HDR ##############

package LibreDwg::Dwg_Object_VP_ENT_HDR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entry_name_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_entry_name_get;
*swig_entry_name_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_entry_name_set;
*swig__64_flag_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR__64_flag_get;
*swig__64_flag_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR__64_flag_set;
*swig_xrefindex_plus1_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xrefindex_plus1_get;
*swig_xrefindex_plus1_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xrefindex_plus1_set;
*swig_xrefdep_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xrefdep_get;
*swig_xrefdep_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xrefdep_set;
*swig_one_flag_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_one_flag_get;
*swig_one_flag_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_one_flag_set;
*swig_vp_ent_ctrl_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_vp_ent_ctrl_get;
*swig_vp_ent_ctrl_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_vp_ent_ctrl_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_xdicobjhandle_set;
*swig_null_get = *LibreDwgc::Dwg_Object_VP_ENT_HDR_null_get;
*swig_null_set = *LibreDwgc::Dwg_Object_VP_ENT_HDR_null_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VP_ENT_HDR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VP_ENT_HDR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_GROUP ##############

package LibreDwg::Dwg_Object_GROUP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_str_get = *LibreDwgc::Dwg_Object_GROUP_str_get;
*swig_str_set = *LibreDwgc::Dwg_Object_GROUP_str_set;
*swig_unnamed_get = *LibreDwgc::Dwg_Object_GROUP_unnamed_get;
*swig_unnamed_set = *LibreDwgc::Dwg_Object_GROUP_unnamed_set;
*swig_selectable_get = *LibreDwgc::Dwg_Object_GROUP_selectable_get;
*swig_selectable_set = *LibreDwgc::Dwg_Object_GROUP_selectable_set;
*swig_num_handles_get = *LibreDwgc::Dwg_Object_GROUP_num_handles_get;
*swig_num_handles_set = *LibreDwgc::Dwg_Object_GROUP_num_handles_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_GROUP_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_GROUP_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_GROUP_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_GROUP_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_GROUP_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_GROUP_xdicobjhandle_set;
*swig_group_entries_get = *LibreDwgc::Dwg_Object_GROUP_group_entries_get;
*swig_group_entries_set = *LibreDwgc::Dwg_Object_GROUP_group_entries_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_GROUP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_GROUP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_MLINESTYLE_line ##############

package LibreDwg::Dwg_Object_MLINESTYLE_line;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_offset_get = *LibreDwgc::Dwg_Object_MLINESTYLE_line_offset_get;
*swig_offset_set = *LibreDwgc::Dwg_Object_MLINESTYLE_line_offset_set;
*swig_color_get = *LibreDwgc::Dwg_Object_MLINESTYLE_line_color_get;
*swig_color_set = *LibreDwgc::Dwg_Object_MLINESTYLE_line_color_set;
*swig_ltindex_get = *LibreDwgc::Dwg_Object_MLINESTYLE_line_ltindex_get;
*swig_ltindex_set = *LibreDwgc::Dwg_Object_MLINESTYLE_line_ltindex_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_MLINESTYLE_line(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_MLINESTYLE_line($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_MLINESTYLE ##############

package LibreDwg::Dwg_Object_MLINESTYLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *LibreDwgc::Dwg_Object_MLINESTYLE_name_get;
*swig_name_set = *LibreDwgc::Dwg_Object_MLINESTYLE_name_set;
*swig_desc_get = *LibreDwgc::Dwg_Object_MLINESTYLE_desc_get;
*swig_desc_set = *LibreDwgc::Dwg_Object_MLINESTYLE_desc_set;
*swig_flags_get = *LibreDwgc::Dwg_Object_MLINESTYLE_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Object_MLINESTYLE_flags_set;
*swig_fillcolor_get = *LibreDwgc::Dwg_Object_MLINESTYLE_fillcolor_get;
*swig_fillcolor_set = *LibreDwgc::Dwg_Object_MLINESTYLE_fillcolor_set;
*swig_startang_get = *LibreDwgc::Dwg_Object_MLINESTYLE_startang_get;
*swig_startang_set = *LibreDwgc::Dwg_Object_MLINESTYLE_startang_set;
*swig_endang_get = *LibreDwgc::Dwg_Object_MLINESTYLE_endang_get;
*swig_endang_set = *LibreDwgc::Dwg_Object_MLINESTYLE_endang_set;
*swig_linesinstyle_get = *LibreDwgc::Dwg_Object_MLINESTYLE_linesinstyle_get;
*swig_linesinstyle_set = *LibreDwgc::Dwg_Object_MLINESTYLE_linesinstyle_set;
*swig_lines_get = *LibreDwgc::Dwg_Object_MLINESTYLE_lines_get;
*swig_lines_set = *LibreDwgc::Dwg_Object_MLINESTYLE_lines_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_MLINESTYLE_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_MLINESTYLE_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_MLINESTYLE_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_MLINESTYLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_MLINESTYLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_MLINESTYLE_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_MLINESTYLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_MLINESTYLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_DICTIONARYVAR ##############

package LibreDwg::Dwg_Object_DICTIONARYVAR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_intval_get = *LibreDwgc::Dwg_Object_DICTIONARYVAR_intval_get;
*swig_intval_set = *LibreDwgc::Dwg_Object_DICTIONARYVAR_intval_set;
*swig_str_get = *LibreDwgc::Dwg_Object_DICTIONARYVAR_str_get;
*swig_str_set = *LibreDwgc::Dwg_Object_DICTIONARYVAR_str_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_DICTIONARYVAR_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_DICTIONARYVAR_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_DICTIONARYVAR_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_DICTIONARYVAR_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_DICTIONARYVAR_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_DICTIONARYVAR_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_DICTIONARYVAR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_DICTIONARYVAR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH_Color ##############

package LibreDwg::Dwg_Entity_HATCH_Color;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_double_get = *LibreDwgc::Dwg_Entity_HATCH_Color_unknown_double_get;
*swig_unknown_double_set = *LibreDwgc::Dwg_Entity_HATCH_Color_unknown_double_set;
*swig_unknown_short_get = *LibreDwgc::Dwg_Entity_HATCH_Color_unknown_short_get;
*swig_unknown_short_set = *LibreDwgc::Dwg_Entity_HATCH_Color_unknown_short_set;
*swig_rgb_color_get = *LibreDwgc::Dwg_Entity_HATCH_Color_rgb_color_get;
*swig_rgb_color_set = *LibreDwgc::Dwg_Entity_HATCH_Color_rgb_color_set;
*swig_ignored_color_byte_get = *LibreDwgc::Dwg_Entity_HATCH_Color_ignored_color_byte_get;
*swig_ignored_color_byte_set = *LibreDwgc::Dwg_Entity_HATCH_Color_ignored_color_byte_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH_Color(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH_Color($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH_ControlPoint ##############

package LibreDwg::Dwg_Entity_HATCH_ControlPoint;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_point_get = *LibreDwgc::Dwg_Entity_HATCH_ControlPoint_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity_HATCH_ControlPoint_point_set;
*swig_weigth_get = *LibreDwgc::Dwg_Entity_HATCH_ControlPoint_weigth_get;
*swig_weigth_set = *LibreDwgc::Dwg_Entity_HATCH_ControlPoint_weigth_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH_ControlPoint(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH_ControlPoint($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH_PathSeg ##############

package LibreDwg::Dwg_Entity_HATCH_PathSeg;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_type_status_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_type_status_get;
*swig_type_status_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_type_status_set;
*swig_first_endpoint_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_first_endpoint_get;
*swig_first_endpoint_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_first_endpoint_set;
*swig_second_endpoint_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_second_endpoint_get;
*swig_second_endpoint_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_second_endpoint_set;
*swig_center_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_center_get;
*swig_center_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_center_set;
*swig_radius_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_radius_get;
*swig_radius_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_radius_set;
*swig_start_angle_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_start_angle_get;
*swig_start_angle_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_start_angle_set;
*swig_end_angle_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_end_angle_get;
*swig_end_angle_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_end_angle_set;
*swig_is_ccw_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_ccw_get;
*swig_is_ccw_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_ccw_set;
*swig_endpoint_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_endpoint_get;
*swig_endpoint_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_endpoint_set;
*swig_minor_major_ratio_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_minor_major_ratio_get;
*swig_minor_major_ratio_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_minor_major_ratio_set;
*swig_degree_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_degree_get;
*swig_degree_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_degree_set;
*swig_is_rational_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_rational_get;
*swig_is_rational_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_rational_set;
*swig_is_periodic_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_periodic_get;
*swig_is_periodic_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_is_periodic_set;
*swig_num_knots_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_num_knots_get;
*swig_num_knots_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_num_knots_set;
*swig_num_control_points_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_num_control_points_get;
*swig_num_control_points_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_num_control_points_set;
*swig_knots_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_knots_get;
*swig_knots_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_knots_set;
*swig_control_points_get = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_control_points_get;
*swig_control_points_set = *LibreDwgc::Dwg_Entity_HATCH_PathSeg_control_points_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH_PathSeg(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH_PathSeg($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH_PolylinePath ##############

package LibreDwg::Dwg_Entity_HATCH_PolylinePath;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_point_get = *LibreDwgc::Dwg_Entity_HATCH_PolylinePath_point_get;
*swig_point_set = *LibreDwgc::Dwg_Entity_HATCH_PolylinePath_point_set;
*swig_bulge_get = *LibreDwgc::Dwg_Entity_HATCH_PolylinePath_bulge_get;
*swig_bulge_set = *LibreDwgc::Dwg_Entity_HATCH_PolylinePath_bulge_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH_PolylinePath(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH_PolylinePath($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH_Path ##############

package LibreDwg::Dwg_Entity_HATCH_Path;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flag_get = *LibreDwgc::Dwg_Entity_HATCH_Path_flag_get;
*swig_flag_set = *LibreDwgc::Dwg_Entity_HATCH_Path_flag_set;
*swig_num_path_segs_get = *LibreDwgc::Dwg_Entity_HATCH_Path_num_path_segs_get;
*swig_num_path_segs_set = *LibreDwgc::Dwg_Entity_HATCH_Path_num_path_segs_set;
*swig_segs_get = *LibreDwgc::Dwg_Entity_HATCH_Path_segs_get;
*swig_segs_set = *LibreDwgc::Dwg_Entity_HATCH_Path_segs_set;
*swig_bulges_present_get = *LibreDwgc::Dwg_Entity_HATCH_Path_bulges_present_get;
*swig_bulges_present_set = *LibreDwgc::Dwg_Entity_HATCH_Path_bulges_present_set;
*swig_closed_get = *LibreDwgc::Dwg_Entity_HATCH_Path_closed_get;
*swig_closed_set = *LibreDwgc::Dwg_Entity_HATCH_Path_closed_set;
*swig_polyline_paths_get = *LibreDwgc::Dwg_Entity_HATCH_Path_polyline_paths_get;
*swig_polyline_paths_set = *LibreDwgc::Dwg_Entity_HATCH_Path_polyline_paths_set;
*swig_num_boundary_obj_handles_get = *LibreDwgc::Dwg_Entity_HATCH_Path_num_boundary_obj_handles_get;
*swig_num_boundary_obj_handles_set = *LibreDwgc::Dwg_Entity_HATCH_Path_num_boundary_obj_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH_Path(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH_Path($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_HATCH ##############

package LibreDwg::Dwg_Entity_HATCH;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_is_gradient_fill_get = *LibreDwgc::Dwg_Entity_HATCH_is_gradient_fill_get;
*swig_is_gradient_fill_set = *LibreDwgc::Dwg_Entity_HATCH_is_gradient_fill_set;
*swig_reserved_get = *LibreDwgc::Dwg_Entity_HATCH_reserved_get;
*swig_reserved_set = *LibreDwgc::Dwg_Entity_HATCH_reserved_set;
*swig_gradient_angle_get = *LibreDwgc::Dwg_Entity_HATCH_gradient_angle_get;
*swig_gradient_angle_set = *LibreDwgc::Dwg_Entity_HATCH_gradient_angle_set;
*swig_gradient_shift_get = *LibreDwgc::Dwg_Entity_HATCH_gradient_shift_get;
*swig_gradient_shift_set = *LibreDwgc::Dwg_Entity_HATCH_gradient_shift_set;
*swig_single_color_gradient_get = *LibreDwgc::Dwg_Entity_HATCH_single_color_gradient_get;
*swig_single_color_gradient_set = *LibreDwgc::Dwg_Entity_HATCH_single_color_gradient_set;
*swig_gradient_tint_get = *LibreDwgc::Dwg_Entity_HATCH_gradient_tint_get;
*swig_gradient_tint_set = *LibreDwgc::Dwg_Entity_HATCH_gradient_tint_set;
*swig_num_colors_get = *LibreDwgc::Dwg_Entity_HATCH_num_colors_get;
*swig_num_colors_set = *LibreDwgc::Dwg_Entity_HATCH_num_colors_set;
*swig_colors_get = *LibreDwgc::Dwg_Entity_HATCH_colors_get;
*swig_colors_set = *LibreDwgc::Dwg_Entity_HATCH_colors_set;
*swig_gradient_name_get = *LibreDwgc::Dwg_Entity_HATCH_gradient_name_get;
*swig_gradient_name_set = *LibreDwgc::Dwg_Entity_HATCH_gradient_name_set;
*swig_z_coord_get = *LibreDwgc::Dwg_Entity_HATCH_z_coord_get;
*swig_z_coord_set = *LibreDwgc::Dwg_Entity_HATCH_z_coord_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_HATCH_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_HATCH_extrusion_set;
*swig_name_get = *LibreDwgc::Dwg_Entity_HATCH_name_get;
*swig_name_set = *LibreDwgc::Dwg_Entity_HATCH_name_set;
*swig_solid_fill_get = *LibreDwgc::Dwg_Entity_HATCH_solid_fill_get;
*swig_solid_fill_set = *LibreDwgc::Dwg_Entity_HATCH_solid_fill_set;
*swig_associative_get = *LibreDwgc::Dwg_Entity_HATCH_associative_get;
*swig_associative_set = *LibreDwgc::Dwg_Entity_HATCH_associative_set;
*swig_num_paths_get = *LibreDwgc::Dwg_Entity_HATCH_num_paths_get;
*swig_num_paths_set = *LibreDwgc::Dwg_Entity_HATCH_num_paths_set;
*swig_paths_get = *LibreDwgc::Dwg_Entity_HATCH_paths_get;
*swig_paths_set = *LibreDwgc::Dwg_Entity_HATCH_paths_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_HATCH(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_HATCH($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_IDBUFFER ##############

package LibreDwg::Dwg_Object_IDBUFFER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_get = *LibreDwgc::Dwg_Object_IDBUFFER_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_IDBUFFER_unknown_set;
*swig_num_ids_get = *LibreDwgc::Dwg_Object_IDBUFFER_num_ids_get;
*swig_num_ids_set = *LibreDwgc::Dwg_Object_IDBUFFER_num_ids_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_IDBUFFER_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_IDBUFFER_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_IDBUFFER_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_IDBUFFER_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_IDBUFFER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_IDBUFFER_xdicobjhandle_set;
*swig_obj_ids_get = *LibreDwgc::Dwg_Object_IDBUFFER_obj_ids_get;
*swig_obj_ids_set = *LibreDwgc::Dwg_Object_IDBUFFER_obj_ids_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_IDBUFFER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_IDBUFFER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_IMAGE_clip_vert ##############

package LibreDwg::Dwg_Entity_IMAGE_clip_vert;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *LibreDwgc::Dwg_Entity_IMAGE_clip_vert_x_get;
*swig_x_set = *LibreDwgc::Dwg_Entity_IMAGE_clip_vert_x_set;
*swig_y_get = *LibreDwgc::Dwg_Entity_IMAGE_clip_vert_y_get;
*swig_y_set = *LibreDwgc::Dwg_Entity_IMAGE_clip_vert_y_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_IMAGE_clip_vert(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_IMAGE_clip_vert($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_IMAGE ##############

package LibreDwg::Dwg_Entity_IMAGE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_class_version_get = *LibreDwgc::Dwg_Entity_IMAGE_class_version_get;
*swig_class_version_set = *LibreDwgc::Dwg_Entity_IMAGE_class_version_set;
*swig_pt0_get = *LibreDwgc::Dwg_Entity_IMAGE_pt0_get;
*swig_pt0_set = *LibreDwgc::Dwg_Entity_IMAGE_pt0_set;
*swig_uvec_get = *LibreDwgc::Dwg_Entity_IMAGE_uvec_get;
*swig_uvec_set = *LibreDwgc::Dwg_Entity_IMAGE_uvec_set;
*swig_vvec_get = *LibreDwgc::Dwg_Entity_IMAGE_vvec_get;
*swig_vvec_set = *LibreDwgc::Dwg_Entity_IMAGE_vvec_set;
*swig_display_props_get = *LibreDwgc::Dwg_Entity_IMAGE_display_props_get;
*swig_display_props_set = *LibreDwgc::Dwg_Entity_IMAGE_display_props_set;
*swig_clipping_get = *LibreDwgc::Dwg_Entity_IMAGE_clipping_get;
*swig_clipping_set = *LibreDwgc::Dwg_Entity_IMAGE_clipping_set;
*swig_brightness_get = *LibreDwgc::Dwg_Entity_IMAGE_brightness_get;
*swig_brightness_set = *LibreDwgc::Dwg_Entity_IMAGE_brightness_set;
*swig_contrast_get = *LibreDwgc::Dwg_Entity_IMAGE_contrast_get;
*swig_contrast_set = *LibreDwgc::Dwg_Entity_IMAGE_contrast_set;
*swig_fade_get = *LibreDwgc::Dwg_Entity_IMAGE_fade_get;
*swig_fade_set = *LibreDwgc::Dwg_Entity_IMAGE_fade_set;
*swig_clip_boundary_type_get = *LibreDwgc::Dwg_Entity_IMAGE_clip_boundary_type_get;
*swig_clip_boundary_type_set = *LibreDwgc::Dwg_Entity_IMAGE_clip_boundary_type_set;
*swig_boundary_pt0_get = *LibreDwgc::Dwg_Entity_IMAGE_boundary_pt0_get;
*swig_boundary_pt0_set = *LibreDwgc::Dwg_Entity_IMAGE_boundary_pt0_set;
*swig_boundary_pt1_get = *LibreDwgc::Dwg_Entity_IMAGE_boundary_pt1_get;
*swig_boundary_pt1_set = *LibreDwgc::Dwg_Entity_IMAGE_boundary_pt1_set;
*swig_num_clip_verts_get = *LibreDwgc::Dwg_Entity_IMAGE_num_clip_verts_get;
*swig_num_clip_verts_set = *LibreDwgc::Dwg_Entity_IMAGE_num_clip_verts_set;
*swig_clip_verts_get = *LibreDwgc::Dwg_Entity_IMAGE_clip_verts_get;
*swig_clip_verts_set = *LibreDwgc::Dwg_Entity_IMAGE_clip_verts_set;
*swig_imagedef_get = *LibreDwgc::Dwg_Entity_IMAGE_imagedef_get;
*swig_imagedef_set = *LibreDwgc::Dwg_Entity_IMAGE_imagedef_set;
*swig_imagedefreactor_get = *LibreDwgc::Dwg_Entity_IMAGE_imagedefreactor_get;
*swig_imagedefreactor_set = *LibreDwgc::Dwg_Entity_IMAGE_imagedefreactor_set;
*swig_size_get = *LibreDwgc::Dwg_Entity_IMAGE_size_get;
*swig_size_set = *LibreDwgc::Dwg_Entity_IMAGE_size_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_IMAGE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_IMAGE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_IMAGE_size ##############

package LibreDwg::Dwg_Entity_IMAGE_size;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_width_get = *LibreDwgc::Dwg_Entity_IMAGE_size_width_get;
*swig_width_set = *LibreDwgc::Dwg_Entity_IMAGE_size_width_set;
*swig_height_get = *LibreDwgc::Dwg_Entity_IMAGE_size_height_get;
*swig_height_set = *LibreDwgc::Dwg_Entity_IMAGE_size_height_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_IMAGE_size(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_IMAGE_size($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_IMAGEDEF ##############

package LibreDwg::Dwg_Object_IMAGEDEF;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_class_version_get = *LibreDwgc::Dwg_Object_IMAGEDEF_class_version_get;
*swig_class_version_set = *LibreDwgc::Dwg_Object_IMAGEDEF_class_version_set;
*swig_image_size_get = *LibreDwgc::Dwg_Object_IMAGEDEF_image_size_get;
*swig_image_size_set = *LibreDwgc::Dwg_Object_IMAGEDEF_image_size_set;
*swig_file_path_get = *LibreDwgc::Dwg_Object_IMAGEDEF_file_path_get;
*swig_file_path_set = *LibreDwgc::Dwg_Object_IMAGEDEF_file_path_set;
*swig_is_loaded_get = *LibreDwgc::Dwg_Object_IMAGEDEF_is_loaded_get;
*swig_is_loaded_set = *LibreDwgc::Dwg_Object_IMAGEDEF_is_loaded_set;
*swig_resunits_get = *LibreDwgc::Dwg_Object_IMAGEDEF_resunits_get;
*swig_resunits_set = *LibreDwgc::Dwg_Object_IMAGEDEF_resunits_set;
*swig_pixel_size_get = *LibreDwgc::Dwg_Object_IMAGEDEF_pixel_size_get;
*swig_pixel_size_set = *LibreDwgc::Dwg_Object_IMAGEDEF_pixel_size_set;
*swig_parent_handle_get = *LibreDwgc::Dwg_Object_IMAGEDEF_parent_handle_get;
*swig_parent_handle_set = *LibreDwgc::Dwg_Object_IMAGEDEF_parent_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_IMAGEDEF_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_IMAGEDEF_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_IMAGEDEF_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_IMAGEDEF_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_IMAGEDEF(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_IMAGEDEF($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_IMAGEDEFREACTOR ##############

package LibreDwg::Dwg_Object_IMAGEDEFREACTOR;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_class_version_get = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_class_version_get;
*swig_class_version_set = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_class_version_set;
*swig_parent_handle_get = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_parent_handle_get;
*swig_parent_handle_set = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_parent_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_IMAGEDEFREACTOR_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_IMAGEDEFREACTOR(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_IMAGEDEFREACTOR($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_LAYER_entry ##############

package LibreDwg::Dwg_LAYER_entry;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_index_long_get = *LibreDwgc::Dwg_LAYER_entry_index_long_get;
*swig_index_long_set = *LibreDwgc::Dwg_LAYER_entry_index_long_set;
*swig_index_str_get = *LibreDwgc::Dwg_LAYER_entry_index_str_get;
*swig_index_str_set = *LibreDwgc::Dwg_LAYER_entry_index_str_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_LAYER_entry(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_LAYER_entry($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LAYER_INDEX ##############

package LibreDwg::Dwg_Object_LAYER_INDEX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_timestamp1_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_timestamp1_get;
*swig_timestamp1_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_timestamp1_set;
*swig_timestamp2_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_timestamp2_get;
*swig_timestamp2_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_timestamp2_set;
*swig_num_entries_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_num_entries_set;
*swig_entries_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_entries_get;
*swig_entries_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_entries_set;
*swig_parent_handle_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_parent_handle_get;
*swig_parent_handle_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_parent_handle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_xdicobjhandle_set;
*swig_entry_handles_get = *LibreDwgc::Dwg_Object_LAYER_INDEX_entry_handles_get;
*swig_entry_handles_set = *LibreDwgc::Dwg_Object_LAYER_INDEX_entry_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LAYER_INDEX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LAYER_INDEX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_LAYOUT ##############

package LibreDwg::Dwg_Object_LAYOUT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_page_setup_name_get = *LibreDwgc::Dwg_Object_LAYOUT_page_setup_name_get;
*swig_page_setup_name_set = *LibreDwgc::Dwg_Object_LAYOUT_page_setup_name_set;
*swig_printer_or_config_get = *LibreDwgc::Dwg_Object_LAYOUT_printer_or_config_get;
*swig_printer_or_config_set = *LibreDwgc::Dwg_Object_LAYOUT_printer_or_config_set;
*swig_plot_layout_flags_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_layout_flags_get;
*swig_plot_layout_flags_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_layout_flags_set;
*swig_left_margin_get = *LibreDwgc::Dwg_Object_LAYOUT_left_margin_get;
*swig_left_margin_set = *LibreDwgc::Dwg_Object_LAYOUT_left_margin_set;
*swig_bottom_margin_get = *LibreDwgc::Dwg_Object_LAYOUT_bottom_margin_get;
*swig_bottom_margin_set = *LibreDwgc::Dwg_Object_LAYOUT_bottom_margin_set;
*swig_right_margin_get = *LibreDwgc::Dwg_Object_LAYOUT_right_margin_get;
*swig_right_margin_set = *LibreDwgc::Dwg_Object_LAYOUT_right_margin_set;
*swig_top_margin_get = *LibreDwgc::Dwg_Object_LAYOUT_top_margin_get;
*swig_top_margin_set = *LibreDwgc::Dwg_Object_LAYOUT_top_margin_set;
*swig_paper_width_get = *LibreDwgc::Dwg_Object_LAYOUT_paper_width_get;
*swig_paper_width_set = *LibreDwgc::Dwg_Object_LAYOUT_paper_width_set;
*swig_paper_height_get = *LibreDwgc::Dwg_Object_LAYOUT_paper_height_get;
*swig_paper_height_set = *LibreDwgc::Dwg_Object_LAYOUT_paper_height_set;
*swig_paper_size_get = *LibreDwgc::Dwg_Object_LAYOUT_paper_size_get;
*swig_paper_size_set = *LibreDwgc::Dwg_Object_LAYOUT_paper_size_set;
*swig_plot_origin_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_origin_get;
*swig_plot_origin_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_origin_set;
*swig_paper_units_get = *LibreDwgc::Dwg_Object_LAYOUT_paper_units_get;
*swig_paper_units_set = *LibreDwgc::Dwg_Object_LAYOUT_paper_units_set;
*swig_plot_rotation_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_rotation_get;
*swig_plot_rotation_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_rotation_set;
*swig_plot_type_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_type_get;
*swig_plot_type_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_type_set;
*swig_window_min_get = *LibreDwgc::Dwg_Object_LAYOUT_window_min_get;
*swig_window_min_set = *LibreDwgc::Dwg_Object_LAYOUT_window_min_set;
*swig_window_max_get = *LibreDwgc::Dwg_Object_LAYOUT_window_max_get;
*swig_window_max_set = *LibreDwgc::Dwg_Object_LAYOUT_window_max_set;
*swig_plot_view_name_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_view_name_get;
*swig_plot_view_name_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_view_name_set;
*swig_real_world_units_get = *LibreDwgc::Dwg_Object_LAYOUT_real_world_units_get;
*swig_real_world_units_set = *LibreDwgc::Dwg_Object_LAYOUT_real_world_units_set;
*swig_drawing_units_get = *LibreDwgc::Dwg_Object_LAYOUT_drawing_units_get;
*swig_drawing_units_set = *LibreDwgc::Dwg_Object_LAYOUT_drawing_units_set;
*swig_current_style_sheet_get = *LibreDwgc::Dwg_Object_LAYOUT_current_style_sheet_get;
*swig_current_style_sheet_set = *LibreDwgc::Dwg_Object_LAYOUT_current_style_sheet_set;
*swig_scale_type_get = *LibreDwgc::Dwg_Object_LAYOUT_scale_type_get;
*swig_scale_type_set = *LibreDwgc::Dwg_Object_LAYOUT_scale_type_set;
*swig_scale_factor_get = *LibreDwgc::Dwg_Object_LAYOUT_scale_factor_get;
*swig_scale_factor_set = *LibreDwgc::Dwg_Object_LAYOUT_scale_factor_set;
*swig_paper_image_origin_get = *LibreDwgc::Dwg_Object_LAYOUT_paper_image_origin_get;
*swig_paper_image_origin_set = *LibreDwgc::Dwg_Object_LAYOUT_paper_image_origin_set;
*swig_shade_plot_mode_get = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_mode_get;
*swig_shade_plot_mode_set = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_mode_set;
*swig_shade_plot_res_level_get = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_res_level_get;
*swig_shade_plot_res_level_set = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_res_level_set;
*swig_shade_plot_custom_dpi_get = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_custom_dpi_get;
*swig_shade_plot_custom_dpi_set = *LibreDwgc::Dwg_Object_LAYOUT_shade_plot_custom_dpi_set;
*swig_layout_name_get = *LibreDwgc::Dwg_Object_LAYOUT_layout_name_get;
*swig_layout_name_set = *LibreDwgc::Dwg_Object_LAYOUT_layout_name_set;
*swig_tab_order_get = *LibreDwgc::Dwg_Object_LAYOUT_tab_order_get;
*swig_tab_order_set = *LibreDwgc::Dwg_Object_LAYOUT_tab_order_set;
*swig_flags_get = *LibreDwgc::Dwg_Object_LAYOUT_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Object_LAYOUT_flags_set;
*swig_ucs_origin_get = *LibreDwgc::Dwg_Object_LAYOUT_ucs_origin_get;
*swig_ucs_origin_set = *LibreDwgc::Dwg_Object_LAYOUT_ucs_origin_set;
*swig_minimum_limits_get = *LibreDwgc::Dwg_Object_LAYOUT_minimum_limits_get;
*swig_minimum_limits_set = *LibreDwgc::Dwg_Object_LAYOUT_minimum_limits_set;
*swig_maximum_limits_get = *LibreDwgc::Dwg_Object_LAYOUT_maximum_limits_get;
*swig_maximum_limits_set = *LibreDwgc::Dwg_Object_LAYOUT_maximum_limits_set;
*swig_ins_point_get = *LibreDwgc::Dwg_Object_LAYOUT_ins_point_get;
*swig_ins_point_set = *LibreDwgc::Dwg_Object_LAYOUT_ins_point_set;
*swig_ucs_x_axis_get = *LibreDwgc::Dwg_Object_LAYOUT_ucs_x_axis_get;
*swig_ucs_x_axis_set = *LibreDwgc::Dwg_Object_LAYOUT_ucs_x_axis_set;
*swig_ucs_y_axis_get = *LibreDwgc::Dwg_Object_LAYOUT_ucs_y_axis_get;
*swig_ucs_y_axis_set = *LibreDwgc::Dwg_Object_LAYOUT_ucs_y_axis_set;
*swig_elevation_get = *LibreDwgc::Dwg_Object_LAYOUT_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Object_LAYOUT_elevation_set;
*swig_orthoview_type_get = *LibreDwgc::Dwg_Object_LAYOUT_orthoview_type_get;
*swig_orthoview_type_set = *LibreDwgc::Dwg_Object_LAYOUT_orthoview_type_set;
*swig_extent_min_get = *LibreDwgc::Dwg_Object_LAYOUT_extent_min_get;
*swig_extent_min_set = *LibreDwgc::Dwg_Object_LAYOUT_extent_min_set;
*swig_extent_max_get = *LibreDwgc::Dwg_Object_LAYOUT_extent_max_get;
*swig_extent_max_set = *LibreDwgc::Dwg_Object_LAYOUT_extent_max_set;
*swig_viewport_count_get = *LibreDwgc::Dwg_Object_LAYOUT_viewport_count_get;
*swig_viewport_count_set = *LibreDwgc::Dwg_Object_LAYOUT_viewport_count_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_LAYOUT_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_LAYOUT_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_LAYOUT_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_LAYOUT_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_LAYOUT_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_LAYOUT_xdicobjhandle_set;
*swig_plot_view_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_plot_view_handle_get;
*swig_plot_view_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_plot_view_handle_set;
*swig_visual_style_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_visual_style_handle_get;
*swig_visual_style_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_visual_style_handle_set;
*swig_associated_paperspace_block_record_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_associated_paperspace_block_record_handle_get;
*swig_associated_paperspace_block_record_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_associated_paperspace_block_record_handle_set;
*swig_last_active_viewport_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_last_active_viewport_handle_get;
*swig_last_active_viewport_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_last_active_viewport_handle_set;
*swig_base_ucs_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_base_ucs_handle_get;
*swig_base_ucs_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_base_ucs_handle_set;
*swig_named_ucs_handle_get = *LibreDwgc::Dwg_Object_LAYOUT_named_ucs_handle_get;
*swig_named_ucs_handle_set = *LibreDwgc::Dwg_Object_LAYOUT_named_ucs_handle_set;
*swig_viewport_handles_get = *LibreDwgc::Dwg_Object_LAYOUT_viewport_handles_get;
*swig_viewport_handles_set = *LibreDwgc::Dwg_Object_LAYOUT_viewport_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_LAYOUT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_LAYOUT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_LWPLINE_width ##############

package LibreDwg::Dwg_Entity_LWPLINE_width;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_start_get = *LibreDwgc::Dwg_Entity_LWPLINE_width_start_get;
*swig_start_set = *LibreDwgc::Dwg_Entity_LWPLINE_width_start_set;
*swig_end_get = *LibreDwgc::Dwg_Entity_LWPLINE_width_end_get;
*swig_end_set = *LibreDwgc::Dwg_Entity_LWPLINE_width_end_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_LWPLINE_width(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_LWPLINE_width($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_LWPLINE ##############

package LibreDwg::Dwg_Entity_LWPLINE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_LWPLINE_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_LWPLINE_flags_set;
*swig_const_width_get = *LibreDwgc::Dwg_Entity_LWPLINE_const_width_get;
*swig_const_width_set = *LibreDwgc::Dwg_Entity_LWPLINE_const_width_set;
*swig_elevation_get = *LibreDwgc::Dwg_Entity_LWPLINE_elevation_get;
*swig_elevation_set = *LibreDwgc::Dwg_Entity_LWPLINE_elevation_set;
*swig_thickness_get = *LibreDwgc::Dwg_Entity_LWPLINE_thickness_get;
*swig_thickness_set = *LibreDwgc::Dwg_Entity_LWPLINE_thickness_set;
*swig_normal_get = *LibreDwgc::Dwg_Entity_LWPLINE_normal_get;
*swig_normal_set = *LibreDwgc::Dwg_Entity_LWPLINE_normal_set;
*swig_num_points_get = *LibreDwgc::Dwg_Entity_LWPLINE_num_points_get;
*swig_num_points_set = *LibreDwgc::Dwg_Entity_LWPLINE_num_points_set;
*swig_points_get = *LibreDwgc::Dwg_Entity_LWPLINE_points_get;
*swig_points_set = *LibreDwgc::Dwg_Entity_LWPLINE_points_set;
*swig_num_bulges_get = *LibreDwgc::Dwg_Entity_LWPLINE_num_bulges_get;
*swig_num_bulges_set = *LibreDwgc::Dwg_Entity_LWPLINE_num_bulges_set;
*swig_bulges_get = *LibreDwgc::Dwg_Entity_LWPLINE_bulges_get;
*swig_bulges_set = *LibreDwgc::Dwg_Entity_LWPLINE_bulges_set;
*swig_num_widths_get = *LibreDwgc::Dwg_Entity_LWPLINE_num_widths_get;
*swig_num_widths_set = *LibreDwgc::Dwg_Entity_LWPLINE_num_widths_set;
*swig_widths_get = *LibreDwgc::Dwg_Entity_LWPLINE_widths_get;
*swig_widths_set = *LibreDwgc::Dwg_Entity_LWPLINE_widths_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_LWPLINE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_LWPLINE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_OLE2FRAME ##############

package LibreDwg::Dwg_Entity_OLE2FRAME;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_flags_get = *LibreDwgc::Dwg_Entity_OLE2FRAME_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_OLE2FRAME_flags_set;
*swig_mode_get = *LibreDwgc::Dwg_Entity_OLE2FRAME_mode_get;
*swig_mode_set = *LibreDwgc::Dwg_Entity_OLE2FRAME_mode_set;
*swig_data_length_get = *LibreDwgc::Dwg_Entity_OLE2FRAME_data_length_get;
*swig_data_length_set = *LibreDwgc::Dwg_Entity_OLE2FRAME_data_length_set;
*swig_data_get = *LibreDwgc::Dwg_Entity_OLE2FRAME_data_get;
*swig_data_set = *LibreDwgc::Dwg_Entity_OLE2FRAME_data_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_OLE2FRAME_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_OLE2FRAME_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_OLE2FRAME(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_OLE2FRAME($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_PROXY ##############

package LibreDwg::Dwg_Object_PROXY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_class_id_get = *LibreDwgc::Dwg_Object_PROXY_class_id_get;
*swig_class_id_set = *LibreDwgc::Dwg_Object_PROXY_class_id_set;
*swig_object_drawing_format_get = *LibreDwgc::Dwg_Object_PROXY_object_drawing_format_get;
*swig_object_drawing_format_set = *LibreDwgc::Dwg_Object_PROXY_object_drawing_format_set;
*swig_original_data_format_get = *LibreDwgc::Dwg_Object_PROXY_original_data_format_get;
*swig_original_data_format_set = *LibreDwgc::Dwg_Object_PROXY_original_data_format_set;
*swig_data_get = *LibreDwgc::Dwg_Object_PROXY_data_get;
*swig_data_set = *LibreDwgc::Dwg_Object_PROXY_data_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_PROXY_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_PROXY_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_PROXY_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_PROXY_reactors_set;
*swig_objid_object_handles_get = *LibreDwgc::Dwg_Object_PROXY_objid_object_handles_get;
*swig_objid_object_handles_set = *LibreDwgc::Dwg_Object_PROXY_objid_object_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_PROXY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_PROXY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_PLACEHOLDER ##############

package LibreDwg::Dwg_Object_PLACEHOLDER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_PLACEHOLDER_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_PLACEHOLDER_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_PLACEHOLDER_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_PLACEHOLDER_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_PLACEHOLDER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_PLACEHOLDER_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_PLACEHOLDER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_PLACEHOLDER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_RASTERVARIABLES ##############

package LibreDwg::Dwg_Object_RASTERVARIABLES;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_class_version_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_class_version_get;
*swig_class_version_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_class_version_set;
*swig_display_frame_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_display_frame_get;
*swig_display_frame_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_display_frame_set;
*swig_display_quality_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_display_quality_get;
*swig_display_quality_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_display_quality_set;
*swig_units_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_units_get;
*swig_units_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_units_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_RASTERVARIABLES_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_RASTERVARIABLES_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_RASTERVARIABLES(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_RASTERVARIABLES($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_SORTENTSTABLE ##############

package LibreDwg::Dwg_Object_SORTENTSTABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_entries_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_num_entries_get;
*swig_num_entries_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_num_entries_set;
*swig_sort_handles_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_sort_handles_get;
*swig_sort_handles_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_sort_handles_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_xdicobjhandle_set;
*swig_owner_handle_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_owner_handle_get;
*swig_owner_handle_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_owner_handle_set;
*swig_object_handles_get = *LibreDwgc::Dwg_Object_SORTENTSTABLE_object_handles_get;
*swig_object_handles_set = *LibreDwgc::Dwg_Object_SORTENTSTABLE_object_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_SORTENTSTABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_SORTENTSTABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_SPATIAL_FILTER ##############

package LibreDwg::Dwg_Object_SPATIAL_FILTER;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_num_points_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_num_points_get;
*swig_num_points_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_num_points_set;
*swig_points_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_points_get;
*swig_points_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_points_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_extrusion_set;
*swig_clip_bound_origin_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_clip_bound_origin_get;
*swig_clip_bound_origin_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_clip_bound_origin_set;
*swig_display_boundary_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_display_boundary_get;
*swig_display_boundary_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_display_boundary_set;
*swig_front_clip_on_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_front_clip_on_get;
*swig_front_clip_on_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_front_clip_on_set;
*swig_front_clip_dist_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_front_clip_dist_get;
*swig_front_clip_dist_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_front_clip_dist_set;
*swig_back_clip_on_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_back_clip_on_get;
*swig_back_clip_on_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_back_clip_on_set;
*swig_back_clip_dist_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_back_clip_dist_get;
*swig_back_clip_dist_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_back_clip_dist_set;
*swig_inverse_block_transform_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_inverse_block_transform_get;
*swig_inverse_block_transform_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_inverse_block_transform_set;
*swig_clip_bound_transform_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_clip_bound_transform_get;
*swig_clip_bound_transform_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_clip_bound_transform_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_SPATIAL_FILTER_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_SPATIAL_FILTER(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_SPATIAL_FILTER($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_SPATIAL_INDEX ##############

package LibreDwg::Dwg_Object_SPATIAL_INDEX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_timestamp1_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_timestamp1_get;
*swig_timestamp1_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_timestamp1_set;
*swig_timestamp2_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_timestamp2_get;
*swig_timestamp2_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_timestamp2_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_unknown_set;
*swig_parenthandle_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_parenthandle_get;
*swig_parenthandle_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_parenthandle_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_SPATIAL_INDEX_xdicobjhandle_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_SPATIAL_INDEX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_SPATIAL_INDEX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_TABLE_Cell ##############

package LibreDwg::Dwg_Entity_TABLE_Cell;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_type_get;
*swig_type_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_type_set;
*swig_flags_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_flags_get;
*swig_flags_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_flags_set;
*swig_merged_value_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_value_get;
*swig_merged_value_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_value_set;
*swig_autofit_flag_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_autofit_flag_get;
*swig_autofit_flag_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_autofit_flag_set;
*swig_merged_width_flag_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_width_flag_get;
*swig_merged_width_flag_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_width_flag_set;
*swig_merged_height_flag_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_height_flag_get;
*swig_merged_height_flag_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_merged_height_flag_set;
*swig_rotation_value_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_rotation_value_get;
*swig_rotation_value_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_rotation_value_set;
*swig_text_string_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_string_get;
*swig_text_string_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_string_set;
*swig_block_scale_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_block_scale_get;
*swig_block_scale_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_block_scale_set;
*swig_additional_data_flag_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_additional_data_flag_get;
*swig_additional_data_flag_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_additional_data_flag_set;
*swig_attr_def_count_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_count_get;
*swig_attr_def_count_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_count_set;
*swig_attr_def_index_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_index_get;
*swig_attr_def_index_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_index_set;
*swig_attr_def_text_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_text_get;
*swig_attr_def_text_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_text_set;
*swig_additional_data_flag2_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_additional_data_flag2_get;
*swig_additional_data_flag2_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_additional_data_flag2_set;
*swig_cell_flag_override_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_flag_override_get;
*swig_cell_flag_override_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_flag_override_set;
*swig_virtual_edge_flag_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_virtual_edge_flag_get;
*swig_virtual_edge_flag_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_virtual_edge_flag_set;
*swig_cell_alignment_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_alignment_get;
*swig_cell_alignment_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_alignment_set;
*swig_background_fill_none_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_background_fill_none_get;
*swig_background_fill_none_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_background_fill_none_set;
*swig_background_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_background_color_get;
*swig_background_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_background_color_set;
*swig_content_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_content_color_get;
*swig_content_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_content_color_set;
*swig_text_height_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_height_get;
*swig_text_height_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_height_set;
*swig_top_grid_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_grid_color_get;
*swig_top_grid_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_grid_color_set;
*swig_top_grid_linewt_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_grid_linewt_get;
*swig_top_grid_linewt_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_grid_linewt_set;
*swig_top_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_visibility_get;
*swig_top_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_top_visibility_set;
*swig_right_grid_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_grid_color_get;
*swig_right_grid_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_grid_color_set;
*swig_right_grid_linewt_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_grid_linewt_get;
*swig_right_grid_linewt_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_grid_linewt_set;
*swig_right_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_visibility_get;
*swig_right_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_right_visibility_set;
*swig_bottom_grid_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_grid_color_get;
*swig_bottom_grid_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_grid_color_set;
*swig_bottom_grid_linewt_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_grid_linewt_get;
*swig_bottom_grid_linewt_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_grid_linewt_set;
*swig_bottom_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_visibility_get;
*swig_bottom_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_bottom_visibility_set;
*swig_left_grid_color_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_grid_color_get;
*swig_left_grid_color_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_grid_color_set;
*swig_left_grid_linewt_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_grid_linewt_get;
*swig_left_grid_linewt_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_grid_linewt_set;
*swig_left_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_visibility_get;
*swig_left_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_left_visibility_set;
*swig_unknown_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_unknown_set;
*swig_flags_2007_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_flags_2007_get;
*swig_flags_2007_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_flags_2007_set;
*swig_data_type_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_type_get;
*swig_data_type_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_type_set;
*swig_data_size_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_size_get;
*swig_data_size_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_size_set;
*swig_data_long_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_long_get;
*swig_data_long_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_long_set;
*swig_data_double_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_double_get;
*swig_data_double_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_double_set;
*swig_data_string_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_string_get;
*swig_data_string_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_string_set;
*swig_data_date_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_date_get;
*swig_data_date_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_date_set;
*swig_data_point_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_point_get;
*swig_data_point_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_point_set;
*swig_data_3dpoint_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_3dpoint_get;
*swig_data_3dpoint_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_data_3dpoint_set;
*swig_unknown2_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_unknown2_get;
*swig_unknown2_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_unknown2_set;
*swig_format_string_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_format_string_get;
*swig_format_string_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_format_string_set;
*swig_value_string_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_value_string_get;
*swig_value_string_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_value_string_set;
*swig_cell_handle_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_handle_get;
*swig_cell_handle_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_cell_handle_set;
*swig_attr_def_id_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_id_get;
*swig_attr_def_id_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_attr_def_id_set;
*swig_text_style_override_get = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_style_override_get;
*swig_text_style_override_set = *LibreDwgc::Dwg_Entity_TABLE_Cell_text_style_override_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_TABLE_Cell(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_TABLE_Cell($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Entity_TABLE ##############

package LibreDwg::Dwg_Entity_TABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_insertion_point_get = *LibreDwgc::Dwg_Entity_TABLE_insertion_point_get;
*swig_insertion_point_set = *LibreDwgc::Dwg_Entity_TABLE_insertion_point_set;
*swig_scale_get = *LibreDwgc::Dwg_Entity_TABLE_scale_get;
*swig_scale_set = *LibreDwgc::Dwg_Entity_TABLE_scale_set;
*swig_data_flags_get = *LibreDwgc::Dwg_Entity_TABLE_data_flags_get;
*swig_data_flags_set = *LibreDwgc::Dwg_Entity_TABLE_data_flags_set;
*swig_rotation_get = *LibreDwgc::Dwg_Entity_TABLE_rotation_get;
*swig_rotation_set = *LibreDwgc::Dwg_Entity_TABLE_rotation_set;
*swig_extrusion_get = *LibreDwgc::Dwg_Entity_TABLE_extrusion_get;
*swig_extrusion_set = *LibreDwgc::Dwg_Entity_TABLE_extrusion_set;
*swig_has_attribs_get = *LibreDwgc::Dwg_Entity_TABLE_has_attribs_get;
*swig_has_attribs_set = *LibreDwgc::Dwg_Entity_TABLE_has_attribs_set;
*swig_owned_object_count_get = *LibreDwgc::Dwg_Entity_TABLE_owned_object_count_get;
*swig_owned_object_count_set = *LibreDwgc::Dwg_Entity_TABLE_owned_object_count_set;
*swig_flag_for_table_value_get = *LibreDwgc::Dwg_Entity_TABLE_flag_for_table_value_get;
*swig_flag_for_table_value_set = *LibreDwgc::Dwg_Entity_TABLE_flag_for_table_value_set;
*swig_horiz_direction_get = *LibreDwgc::Dwg_Entity_TABLE_horiz_direction_get;
*swig_horiz_direction_set = *LibreDwgc::Dwg_Entity_TABLE_horiz_direction_set;
*swig_num_cols_get = *LibreDwgc::Dwg_Entity_TABLE_num_cols_get;
*swig_num_cols_set = *LibreDwgc::Dwg_Entity_TABLE_num_cols_set;
*swig_num_rows_get = *LibreDwgc::Dwg_Entity_TABLE_num_rows_get;
*swig_num_rows_set = *LibreDwgc::Dwg_Entity_TABLE_num_rows_set;
*swig_col_widths_get = *LibreDwgc::Dwg_Entity_TABLE_col_widths_get;
*swig_col_widths_set = *LibreDwgc::Dwg_Entity_TABLE_col_widths_set;
*swig_row_heights_get = *LibreDwgc::Dwg_Entity_TABLE_row_heights_get;
*swig_row_heights_set = *LibreDwgc::Dwg_Entity_TABLE_row_heights_set;
*swig_cells_get = *LibreDwgc::Dwg_Entity_TABLE_cells_get;
*swig_cells_set = *LibreDwgc::Dwg_Entity_TABLE_cells_set;
*swig_table_overrides_present_get = *LibreDwgc::Dwg_Entity_TABLE_table_overrides_present_get;
*swig_table_overrides_present_set = *LibreDwgc::Dwg_Entity_TABLE_table_overrides_present_set;
*swig_table_flag_override_get = *LibreDwgc::Dwg_Entity_TABLE_table_flag_override_get;
*swig_table_flag_override_set = *LibreDwgc::Dwg_Entity_TABLE_table_flag_override_set;
*swig_title_suppressed_get = *LibreDwgc::Dwg_Entity_TABLE_title_suppressed_get;
*swig_title_suppressed_set = *LibreDwgc::Dwg_Entity_TABLE_title_suppressed_set;
*swig_header_suppressed_get = *LibreDwgc::Dwg_Entity_TABLE_header_suppressed_get;
*swig_header_suppressed_set = *LibreDwgc::Dwg_Entity_TABLE_header_suppressed_set;
*swig_flow_direction_get = *LibreDwgc::Dwg_Entity_TABLE_flow_direction_get;
*swig_flow_direction_set = *LibreDwgc::Dwg_Entity_TABLE_flow_direction_set;
*swig_horiz_cell_margin_get = *LibreDwgc::Dwg_Entity_TABLE_horiz_cell_margin_get;
*swig_horiz_cell_margin_set = *LibreDwgc::Dwg_Entity_TABLE_horiz_cell_margin_set;
*swig_vert_cell_margin_get = *LibreDwgc::Dwg_Entity_TABLE_vert_cell_margin_get;
*swig_vert_cell_margin_set = *LibreDwgc::Dwg_Entity_TABLE_vert_cell_margin_set;
*swig_title_row_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_color_get;
*swig_title_row_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_color_set;
*swig_header_row_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_color_get;
*swig_header_row_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_color_set;
*swig_data_row_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_color_get;
*swig_data_row_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_color_set;
*swig_title_row_fill_none_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_fill_none_get;
*swig_title_row_fill_none_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_fill_none_set;
*swig_header_row_fill_none_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_fill_none_get;
*swig_header_row_fill_none_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_fill_none_set;
*swig_data_row_fill_none_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_fill_none_get;
*swig_data_row_fill_none_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_fill_none_set;
*swig_title_row_fill_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_fill_color_get;
*swig_title_row_fill_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_fill_color_set;
*swig_header_row_fill_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_fill_color_get;
*swig_header_row_fill_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_fill_color_set;
*swig_data_row_fill_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_fill_color_get;
*swig_data_row_fill_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_fill_color_set;
*swig_title_row_align_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_align_get;
*swig_title_row_align_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_align_set;
*swig_header_row_align_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_align_get;
*swig_header_row_align_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_align_set;
*swig_data_row_align_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_align_get;
*swig_data_row_align_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_align_set;
*swig_title_row_height_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_height_get;
*swig_title_row_height_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_height_set;
*swig_header_row_height_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_height_get;
*swig_header_row_height_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_height_set;
*swig_data_row_height_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_height_get;
*swig_data_row_height_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_height_set;
*swig_border_color_overrides_present_get = *LibreDwgc::Dwg_Entity_TABLE_border_color_overrides_present_get;
*swig_border_color_overrides_present_set = *LibreDwgc::Dwg_Entity_TABLE_border_color_overrides_present_set;
*swig_border_color_overrides_flag_get = *LibreDwgc::Dwg_Entity_TABLE_border_color_overrides_flag_get;
*swig_border_color_overrides_flag_set = *LibreDwgc::Dwg_Entity_TABLE_border_color_overrides_flag_set;
*swig_title_horiz_top_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_color_get;
*swig_title_horiz_top_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_color_set;
*swig_title_horiz_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_color_get;
*swig_title_horiz_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_color_set;
*swig_title_horiz_bottom_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_color_get;
*swig_title_horiz_bottom_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_color_set;
*swig_title_vert_left_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_color_get;
*swig_title_vert_left_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_color_set;
*swig_title_vert_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_color_get;
*swig_title_vert_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_color_set;
*swig_title_vert_right_color_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_color_get;
*swig_title_vert_right_color_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_color_set;
*swig_header_horiz_top_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_color_get;
*swig_header_horiz_top_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_color_set;
*swig_header_horiz_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_color_get;
*swig_header_horiz_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_color_set;
*swig_header_horiz_bottom_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_color_get;
*swig_header_horiz_bottom_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_color_set;
*swig_header_vert_left_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_color_get;
*swig_header_vert_left_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_color_set;
*swig_header_vert_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_color_get;
*swig_header_vert_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_color_set;
*swig_header_vert_right_color_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_color_get;
*swig_header_vert_right_color_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_color_set;
*swig_data_horiz_top_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_color_get;
*swig_data_horiz_top_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_color_set;
*swig_data_horiz_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_color_get;
*swig_data_horiz_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_color_set;
*swig_data_horiz_bottom_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_color_get;
*swig_data_horiz_bottom_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_color_set;
*swig_data_vert_left_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_color_get;
*swig_data_vert_left_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_color_set;
*swig_data_vert_ins_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_color_get;
*swig_data_vert_ins_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_color_set;
*swig_data_vert_right_color_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_color_get;
*swig_data_vert_right_color_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_color_set;
*swig_border_lineweight_overrides_present_get = *LibreDwgc::Dwg_Entity_TABLE_border_lineweight_overrides_present_get;
*swig_border_lineweight_overrides_present_set = *LibreDwgc::Dwg_Entity_TABLE_border_lineweight_overrides_present_set;
*swig_border_lineweight_overrides_flag_get = *LibreDwgc::Dwg_Entity_TABLE_border_lineweight_overrides_flag_get;
*swig_border_lineweight_overrides_flag_set = *LibreDwgc::Dwg_Entity_TABLE_border_lineweight_overrides_flag_set;
*swig_title_horiz_top_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_lineweigh_get;
*swig_title_horiz_top_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_lineweigh_set;
*swig_title_horiz_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_lineweigh_get;
*swig_title_horiz_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_lineweigh_set;
*swig_title_horiz_bottom_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_lineweigh_get;
*swig_title_horiz_bottom_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_lineweigh_set;
*swig_title_vert_left_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_lineweigh_get;
*swig_title_vert_left_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_lineweigh_set;
*swig_title_vert_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_lineweigh_get;
*swig_title_vert_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_lineweigh_set;
*swig_title_vert_right_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_lineweigh_get;
*swig_title_vert_right_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_lineweigh_set;
*swig_header_horiz_top_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_lineweigh_get;
*swig_header_horiz_top_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_lineweigh_set;
*swig_header_horiz_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_lineweigh_get;
*swig_header_horiz_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_lineweigh_set;
*swig_header_horiz_bottom_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_lineweigh_get;
*swig_header_horiz_bottom_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_lineweigh_set;
*swig_header_vert_left_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_lineweigh_get;
*swig_header_vert_left_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_lineweigh_set;
*swig_header_vert_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_lineweigh_get;
*swig_header_vert_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_lineweigh_set;
*swig_header_vert_right_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_lineweigh_get;
*swig_header_vert_right_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_lineweigh_set;
*swig_data_horiz_top_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_lineweigh_get;
*swig_data_horiz_top_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_lineweigh_set;
*swig_data_horiz_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_lineweigh_get;
*swig_data_horiz_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_lineweigh_set;
*swig_data_horiz_bottom_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_lineweigh_get;
*swig_data_horiz_bottom_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_lineweigh_set;
*swig_data_vert_left_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_lineweigh_get;
*swig_data_vert_left_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_lineweigh_set;
*swig_data_vert_ins_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_lineweigh_get;
*swig_data_vert_ins_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_lineweigh_set;
*swig_data_vert_right_lineweigh_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_lineweigh_get;
*swig_data_vert_right_lineweigh_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_lineweigh_set;
*swig_border_visibility_overrides_present_get = *LibreDwgc::Dwg_Entity_TABLE_border_visibility_overrides_present_get;
*swig_border_visibility_overrides_present_set = *LibreDwgc::Dwg_Entity_TABLE_border_visibility_overrides_present_set;
*swig_border_visibility_overrides_flag_get = *LibreDwgc::Dwg_Entity_TABLE_border_visibility_overrides_flag_get;
*swig_border_visibility_overrides_flag_set = *LibreDwgc::Dwg_Entity_TABLE_border_visibility_overrides_flag_set;
*swig_title_horiz_top_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_visibility_get;
*swig_title_horiz_top_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_top_visibility_set;
*swig_title_horiz_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_visibility_get;
*swig_title_horiz_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_ins_visibility_set;
*swig_title_horiz_bottom_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_visibility_get;
*swig_title_horiz_bottom_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_horiz_bottom_visibility_set;
*swig_title_vert_left_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_visibility_get;
*swig_title_vert_left_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_left_visibility_set;
*swig_title_vert_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_visibility_get;
*swig_title_vert_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_ins_visibility_set;
*swig_title_vert_right_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_visibility_get;
*swig_title_vert_right_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_title_vert_right_visibility_set;
*swig_header_horiz_top_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_visibility_get;
*swig_header_horiz_top_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_top_visibility_set;
*swig_header_horiz_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_visibility_get;
*swig_header_horiz_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_ins_visibility_set;
*swig_header_horiz_bottom_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_visibility_get;
*swig_header_horiz_bottom_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_horiz_bottom_visibility_set;
*swig_header_vert_left_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_visibility_get;
*swig_header_vert_left_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_left_visibility_set;
*swig_header_vert_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_visibility_get;
*swig_header_vert_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_ins_visibility_set;
*swig_header_vert_right_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_visibility_get;
*swig_header_vert_right_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_header_vert_right_visibility_set;
*swig_data_horiz_top_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_visibility_get;
*swig_data_horiz_top_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_top_visibility_set;
*swig_data_horiz_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_visibility_get;
*swig_data_horiz_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_ins_visibility_set;
*swig_data_horiz_bottom_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_visibility_get;
*swig_data_horiz_bottom_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_horiz_bottom_visibility_set;
*swig_data_vert_left_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_visibility_get;
*swig_data_vert_left_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_left_visibility_set;
*swig_data_vert_ins_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_visibility_get;
*swig_data_vert_ins_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_ins_visibility_set;
*swig_data_vert_right_visibility_get = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_visibility_get;
*swig_data_vert_right_visibility_set = *LibreDwgc::Dwg_Entity_TABLE_data_vert_right_visibility_set;
*swig_block_header_get = *LibreDwgc::Dwg_Entity_TABLE_block_header_get;
*swig_block_header_set = *LibreDwgc::Dwg_Entity_TABLE_block_header_set;
*swig_first_attrib_get = *LibreDwgc::Dwg_Entity_TABLE_first_attrib_get;
*swig_first_attrib_set = *LibreDwgc::Dwg_Entity_TABLE_first_attrib_set;
*swig_last_attrib_get = *LibreDwgc::Dwg_Entity_TABLE_last_attrib_get;
*swig_last_attrib_set = *LibreDwgc::Dwg_Entity_TABLE_last_attrib_set;
*swig_attribs_get = *LibreDwgc::Dwg_Entity_TABLE_attribs_get;
*swig_attribs_set = *LibreDwgc::Dwg_Entity_TABLE_attribs_set;
*swig_seqend_get = *LibreDwgc::Dwg_Entity_TABLE_seqend_get;
*swig_seqend_set = *LibreDwgc::Dwg_Entity_TABLE_seqend_set;
*swig_table_style_id_get = *LibreDwgc::Dwg_Entity_TABLE_table_style_id_get;
*swig_table_style_id_set = *LibreDwgc::Dwg_Entity_TABLE_table_style_id_set;
*swig_title_row_style_override_get = *LibreDwgc::Dwg_Entity_TABLE_title_row_style_override_get;
*swig_title_row_style_override_set = *LibreDwgc::Dwg_Entity_TABLE_title_row_style_override_set;
*swig_header_row_style_override_get = *LibreDwgc::Dwg_Entity_TABLE_header_row_style_override_get;
*swig_header_row_style_override_set = *LibreDwgc::Dwg_Entity_TABLE_header_row_style_override_set;
*swig_data_row_style_override_get = *LibreDwgc::Dwg_Entity_TABLE_data_row_style_override_get;
*swig_data_row_style_override_set = *LibreDwgc::Dwg_Entity_TABLE_data_row_style_override_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Entity_TABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Entity_TABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_VBA_PROJECT ##############

package LibreDwg::Dwg_Object_VBA_PROJECT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_dummy_get = *LibreDwgc::Dwg_Object_VBA_PROJECT_dummy_get;
*swig_dummy_set = *LibreDwgc::Dwg_Object_VBA_PROJECT_dummy_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_VBA_PROJECT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_VBA_PROJECT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_WIPEOUTVARIABLE ##############

package LibreDwg::Dwg_Object_WIPEOUTVARIABLE;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_dummy_get = *LibreDwgc::Dwg_Object_WIPEOUTVARIABLE_dummy_get;
*swig_dummy_set = *LibreDwgc::Dwg_Object_WIPEOUTVARIABLE_dummy_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_WIPEOUTVARIABLE(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_WIPEOUTVARIABLE($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_XRECORD ##############

package LibreDwg::Dwg_Object_XRECORD;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_numdatabytes_get = *LibreDwgc::Dwg_Object_XRECORD_numdatabytes_get;
*swig_numdatabytes_set = *LibreDwgc::Dwg_Object_XRECORD_numdatabytes_set;
*swig_cloning_flags_get = *LibreDwgc::Dwg_Object_XRECORD_cloning_flags_get;
*swig_cloning_flags_set = *LibreDwgc::Dwg_Object_XRECORD_cloning_flags_set;
*swig_rbuf_get = *LibreDwgc::Dwg_Object_XRECORD_rbuf_get;
*swig_rbuf_set = *LibreDwgc::Dwg_Object_XRECORD_rbuf_set;
*swig_parent_get = *LibreDwgc::Dwg_Object_XRECORD_parent_get;
*swig_parent_set = *LibreDwgc::Dwg_Object_XRECORD_parent_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_XRECORD_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_XRECORD_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_XRECORD_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_XRECORD_xdicobjhandle_set;
*swig_objid_handles_get = *LibreDwgc::Dwg_Object_XRECORD_objid_handles_get;
*swig_objid_handles_set = *LibreDwgc::Dwg_Object_XRECORD_objid_handles_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_XRECORD(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_XRECORD($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_Entity ##############

package LibreDwg::Dwg_Object_Entity;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_object_get = *LibreDwgc::Dwg_Object_Entity_object_get;
*swig_object_set = *LibreDwgc::Dwg_Object_Entity_object_set;
*swig_bitsize_get = *LibreDwgc::Dwg_Object_Entity_bitsize_get;
*swig_bitsize_set = *LibreDwgc::Dwg_Object_Entity_bitsize_set;
*swig_extended_size_get = *LibreDwgc::Dwg_Object_Entity_extended_size_get;
*swig_extended_size_set = *LibreDwgc::Dwg_Object_Entity_extended_size_set;
*swig_extended_handle_get = *LibreDwgc::Dwg_Object_Entity_extended_handle_get;
*swig_extended_handle_set = *LibreDwgc::Dwg_Object_Entity_extended_handle_set;
*swig_extended_get = *LibreDwgc::Dwg_Object_Entity_extended_get;
*swig_extended_set = *LibreDwgc::Dwg_Object_Entity_extended_set;
*swig_picture_exists_get = *LibreDwgc::Dwg_Object_Entity_picture_exists_get;
*swig_picture_exists_set = *LibreDwgc::Dwg_Object_Entity_picture_exists_set;
*swig_picture_size_get = *LibreDwgc::Dwg_Object_Entity_picture_size_get;
*swig_picture_size_set = *LibreDwgc::Dwg_Object_Entity_picture_size_set;
*swig_picture_get = *LibreDwgc::Dwg_Object_Entity_picture_get;
*swig_picture_set = *LibreDwgc::Dwg_Object_Entity_picture_set;
*swig_entity_mode_get = *LibreDwgc::Dwg_Object_Entity_entity_mode_get;
*swig_entity_mode_set = *LibreDwgc::Dwg_Object_Entity_entity_mode_set;
*swig_num_reactors_get = *LibreDwgc::Dwg_Object_Entity_num_reactors_get;
*swig_num_reactors_set = *LibreDwgc::Dwg_Object_Entity_num_reactors_set;
*swig_xdic_missing_flag_get = *LibreDwgc::Dwg_Object_Entity_xdic_missing_flag_get;
*swig_xdic_missing_flag_set = *LibreDwgc::Dwg_Object_Entity_xdic_missing_flag_set;
*swig_isbylayerlt_get = *LibreDwgc::Dwg_Object_Entity_isbylayerlt_get;
*swig_isbylayerlt_set = *LibreDwgc::Dwg_Object_Entity_isbylayerlt_set;
*swig_nolinks_get = *LibreDwgc::Dwg_Object_Entity_nolinks_get;
*swig_nolinks_set = *LibreDwgc::Dwg_Object_Entity_nolinks_set;
*swig_color_get = *LibreDwgc::Dwg_Object_Entity_color_get;
*swig_color_set = *LibreDwgc::Dwg_Object_Entity_color_set;
*swig_linetype_scale_get = *LibreDwgc::Dwg_Object_Entity_linetype_scale_get;
*swig_linetype_scale_set = *LibreDwgc::Dwg_Object_Entity_linetype_scale_set;
*swig_linetype_flags_get = *LibreDwgc::Dwg_Object_Entity_linetype_flags_get;
*swig_linetype_flags_set = *LibreDwgc::Dwg_Object_Entity_linetype_flags_set;
*swig_plotstyle_flags_get = *LibreDwgc::Dwg_Object_Entity_plotstyle_flags_get;
*swig_plotstyle_flags_set = *LibreDwgc::Dwg_Object_Entity_plotstyle_flags_set;
*swig_material_flags_get = *LibreDwgc::Dwg_Object_Entity_material_flags_get;
*swig_material_flags_set = *LibreDwgc::Dwg_Object_Entity_material_flags_set;
*swig_shadow_flags_get = *LibreDwgc::Dwg_Object_Entity_shadow_flags_get;
*swig_shadow_flags_set = *LibreDwgc::Dwg_Object_Entity_shadow_flags_set;
*swig_invisible_get = *LibreDwgc::Dwg_Object_Entity_invisible_get;
*swig_invisible_set = *LibreDwgc::Dwg_Object_Entity_invisible_set;
*swig_lineweight_get = *LibreDwgc::Dwg_Object_Entity_lineweight_get;
*swig_lineweight_set = *LibreDwgc::Dwg_Object_Entity_lineweight_set;
*swig_num_handles_get = *LibreDwgc::Dwg_Object_Entity_num_handles_get;
*swig_num_handles_set = *LibreDwgc::Dwg_Object_Entity_num_handles_set;
*swig_subentity_get = *LibreDwgc::Dwg_Object_Entity_subentity_get;
*swig_subentity_set = *LibreDwgc::Dwg_Object_Entity_subentity_set;
*swig_reactors_get = *LibreDwgc::Dwg_Object_Entity_reactors_get;
*swig_reactors_set = *LibreDwgc::Dwg_Object_Entity_reactors_set;
*swig_xdicobjhandle_get = *LibreDwgc::Dwg_Object_Entity_xdicobjhandle_get;
*swig_xdicobjhandle_set = *LibreDwgc::Dwg_Object_Entity_xdicobjhandle_set;
*swig_prev_entity_get = *LibreDwgc::Dwg_Object_Entity_prev_entity_get;
*swig_prev_entity_set = *LibreDwgc::Dwg_Object_Entity_prev_entity_set;
*swig_next_entity_get = *LibreDwgc::Dwg_Object_Entity_next_entity_get;
*swig_next_entity_set = *LibreDwgc::Dwg_Object_Entity_next_entity_set;
*swig_layer_get = *LibreDwgc::Dwg_Object_Entity_layer_get;
*swig_layer_set = *LibreDwgc::Dwg_Object_Entity_layer_set;
*swig_ltype_get = *LibreDwgc::Dwg_Object_Entity_ltype_get;
*swig_ltype_set = *LibreDwgc::Dwg_Object_Entity_ltype_set;
*swig_plotstyle_get = *LibreDwgc::Dwg_Object_Entity_plotstyle_get;
*swig_plotstyle_set = *LibreDwgc::Dwg_Object_Entity_plotstyle_set;
*swig_material_get = *LibreDwgc::Dwg_Object_Entity_material_get;
*swig_material_set = *LibreDwgc::Dwg_Object_Entity_material_set;
*swig_tio_get = *LibreDwgc::Dwg_Object_Entity_tio_get;
*swig_tio_set = *LibreDwgc::Dwg_Object_Entity_tio_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_Entity(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_Entity($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_Entity_tio ##############

package LibreDwg::Dwg_Object_Entity_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_UNUSED_get = *LibreDwgc::Dwg_Object_Entity_tio_UNUSED_get;
*swig_UNUSED_set = *LibreDwgc::Dwg_Object_Entity_tio_UNUSED_set;
*swig_TEXT_get = *LibreDwgc::Dwg_Object_Entity_tio_TEXT_get;
*swig_TEXT_set = *LibreDwgc::Dwg_Object_Entity_tio_TEXT_set;
*swig_ATTRIB_get = *LibreDwgc::Dwg_Object_Entity_tio_ATTRIB_get;
*swig_ATTRIB_set = *LibreDwgc::Dwg_Object_Entity_tio_ATTRIB_set;
*swig_ATTDEF_get = *LibreDwgc::Dwg_Object_Entity_tio_ATTDEF_get;
*swig_ATTDEF_set = *LibreDwgc::Dwg_Object_Entity_tio_ATTDEF_set;
*swig_BLOCK_get = *LibreDwgc::Dwg_Object_Entity_tio_BLOCK_get;
*swig_BLOCK_set = *LibreDwgc::Dwg_Object_Entity_tio_BLOCK_set;
*swig_ENDBLK_get = *LibreDwgc::Dwg_Object_Entity_tio_ENDBLK_get;
*swig_ENDBLK_set = *LibreDwgc::Dwg_Object_Entity_tio_ENDBLK_set;
*swig_SEQEND_get = *LibreDwgc::Dwg_Object_Entity_tio_SEQEND_get;
*swig_SEQEND_set = *LibreDwgc::Dwg_Object_Entity_tio_SEQEND_set;
*swig_INSERT_get = *LibreDwgc::Dwg_Object_Entity_tio_INSERT_get;
*swig_INSERT_set = *LibreDwgc::Dwg_Object_Entity_tio_INSERT_set;
*swig_MINSERT_get = *LibreDwgc::Dwg_Object_Entity_tio_MINSERT_get;
*swig_MINSERT_set = *LibreDwgc::Dwg_Object_Entity_tio_MINSERT_set;
*swig_VERTEX_2D_get = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_2D_get;
*swig_VERTEX_2D_set = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_2D_set;
*swig_VERTEX_3D_get = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_3D_get;
*swig_VERTEX_3D_set = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_3D_set;
*swig_VERTEX_MESH_get = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_MESH_get;
*swig_VERTEX_MESH_set = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_MESH_set;
*swig_VERTEX_PFACE_get = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_PFACE_get;
*swig_VERTEX_PFACE_set = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_PFACE_set;
*swig_VERTEX_PFACE_FACE_get = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_PFACE_FACE_get;
*swig_VERTEX_PFACE_FACE_set = *LibreDwgc::Dwg_Object_Entity_tio_VERTEX_PFACE_FACE_set;
*swig_POLYLINE_2D_get = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_2D_get;
*swig_POLYLINE_2D_set = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_2D_set;
*swig_POLYLINE_3D_get = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_3D_get;
*swig_POLYLINE_3D_set = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_3D_set;
*swig_ARC_get = *LibreDwgc::Dwg_Object_Entity_tio_ARC_get;
*swig_ARC_set = *LibreDwgc::Dwg_Object_Entity_tio_ARC_set;
*swig_CIRCLE_get = *LibreDwgc::Dwg_Object_Entity_tio_CIRCLE_get;
*swig_CIRCLE_set = *LibreDwgc::Dwg_Object_Entity_tio_CIRCLE_set;
*swig_LINE_get = *LibreDwgc::Dwg_Object_Entity_tio_LINE_get;
*swig_LINE_set = *LibreDwgc::Dwg_Object_Entity_tio_LINE_set;
*swig_DIMENSION_ORDINATE_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ORDINATE_get;
*swig_DIMENSION_ORDINATE_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ORDINATE_set;
*swig_DIMENSION_LINEAR_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_LINEAR_get;
*swig_DIMENSION_LINEAR_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_LINEAR_set;
*swig_DIMENSION_ALIGNED_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ALIGNED_get;
*swig_DIMENSION_ALIGNED_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ALIGNED_set;
*swig_DIMENSION_ANG3PT_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ANG3PT_get;
*swig_DIMENSION_ANG3PT_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ANG3PT_set;
*swig_DIMENSION_ANG2LN_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ANG2LN_get;
*swig_DIMENSION_ANG2LN_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_ANG2LN_set;
*swig_DIMENSION_RADIUS_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_RADIUS_get;
*swig_DIMENSION_RADIUS_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_RADIUS_set;
*swig_DIMENSION_DIAMETER_get = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_DIAMETER_get;
*swig_DIMENSION_DIAMETER_set = *LibreDwgc::Dwg_Object_Entity_tio_DIMENSION_DIAMETER_set;
*swig_POINT_get = *LibreDwgc::Dwg_Object_Entity_tio_POINT_get;
*swig_POINT_set = *LibreDwgc::Dwg_Object_Entity_tio_POINT_set;
*swig__3DFACE_get = *LibreDwgc::Dwg_Object_Entity_tio__3DFACE_get;
*swig__3DFACE_set = *LibreDwgc::Dwg_Object_Entity_tio__3DFACE_set;
*swig_POLYLINE_PFACE_get = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_PFACE_get;
*swig_POLYLINE_PFACE_set = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_PFACE_set;
*swig_POLYLINE_MESH_get = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_MESH_get;
*swig_POLYLINE_MESH_set = *LibreDwgc::Dwg_Object_Entity_tio_POLYLINE_MESH_set;
*swig_SOLID_get = *LibreDwgc::Dwg_Object_Entity_tio_SOLID_get;
*swig_SOLID_set = *LibreDwgc::Dwg_Object_Entity_tio_SOLID_set;
*swig_TRACE_get = *LibreDwgc::Dwg_Object_Entity_tio_TRACE_get;
*swig_TRACE_set = *LibreDwgc::Dwg_Object_Entity_tio_TRACE_set;
*swig_SHAPE_get = *LibreDwgc::Dwg_Object_Entity_tio_SHAPE_get;
*swig_SHAPE_set = *LibreDwgc::Dwg_Object_Entity_tio_SHAPE_set;
*swig_VIEWPORT_get = *LibreDwgc::Dwg_Object_Entity_tio_VIEWPORT_get;
*swig_VIEWPORT_set = *LibreDwgc::Dwg_Object_Entity_tio_VIEWPORT_set;
*swig_ELLIPSE_get = *LibreDwgc::Dwg_Object_Entity_tio_ELLIPSE_get;
*swig_ELLIPSE_set = *LibreDwgc::Dwg_Object_Entity_tio_ELLIPSE_set;
*swig_SPLINE_get = *LibreDwgc::Dwg_Object_Entity_tio_SPLINE_get;
*swig_SPLINE_set = *LibreDwgc::Dwg_Object_Entity_tio_SPLINE_set;
*swig__3DSOLID_get = *LibreDwgc::Dwg_Object_Entity_tio__3DSOLID_get;
*swig__3DSOLID_set = *LibreDwgc::Dwg_Object_Entity_tio__3DSOLID_set;
*swig_REGION_get = *LibreDwgc::Dwg_Object_Entity_tio_REGION_get;
*swig_REGION_set = *LibreDwgc::Dwg_Object_Entity_tio_REGION_set;
*swig_BODY_get = *LibreDwgc::Dwg_Object_Entity_tio_BODY_get;
*swig_BODY_set = *LibreDwgc::Dwg_Object_Entity_tio_BODY_set;
*swig_RAY_get = *LibreDwgc::Dwg_Object_Entity_tio_RAY_get;
*swig_RAY_set = *LibreDwgc::Dwg_Object_Entity_tio_RAY_set;
*swig_XLINE_get = *LibreDwgc::Dwg_Object_Entity_tio_XLINE_get;
*swig_XLINE_set = *LibreDwgc::Dwg_Object_Entity_tio_XLINE_set;
*swig_MTEXT_get = *LibreDwgc::Dwg_Object_Entity_tio_MTEXT_get;
*swig_MTEXT_set = *LibreDwgc::Dwg_Object_Entity_tio_MTEXT_set;
*swig_LEADER_get = *LibreDwgc::Dwg_Object_Entity_tio_LEADER_get;
*swig_LEADER_set = *LibreDwgc::Dwg_Object_Entity_tio_LEADER_set;
*swig_TOLERANCE_get = *LibreDwgc::Dwg_Object_Entity_tio_TOLERANCE_get;
*swig_TOLERANCE_set = *LibreDwgc::Dwg_Object_Entity_tio_TOLERANCE_set;
*swig_MLINE_get = *LibreDwgc::Dwg_Object_Entity_tio_MLINE_get;
*swig_MLINE_set = *LibreDwgc::Dwg_Object_Entity_tio_MLINE_set;
*swig_IMAGE_get = *LibreDwgc::Dwg_Object_Entity_tio_IMAGE_get;
*swig_IMAGE_set = *LibreDwgc::Dwg_Object_Entity_tio_IMAGE_set;
*swig_LWPLINE_get = *LibreDwgc::Dwg_Object_Entity_tio_LWPLINE_get;
*swig_LWPLINE_set = *LibreDwgc::Dwg_Object_Entity_tio_LWPLINE_set;
*swig_OLE2FRAME_get = *LibreDwgc::Dwg_Object_Entity_tio_OLE2FRAME_get;
*swig_OLE2FRAME_set = *LibreDwgc::Dwg_Object_Entity_tio_OLE2FRAME_set;
*swig_TABLE_get = *LibreDwgc::Dwg_Object_Entity_tio_TABLE_get;
*swig_TABLE_set = *LibreDwgc::Dwg_Object_Entity_tio_TABLE_set;
*swig_HATCH_get = *LibreDwgc::Dwg_Object_Entity_tio_HATCH_get;
*swig_HATCH_set = *LibreDwgc::Dwg_Object_Entity_tio_HATCH_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_Entity_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_Entity_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_Object ##############

package LibreDwg::Dwg_Object_Object;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_object_get = *LibreDwgc::Dwg_Object_Object_object_get;
*swig_object_set = *LibreDwgc::Dwg_Object_Object_object_set;
*swig_bitsize_get = *LibreDwgc::Dwg_Object_Object_bitsize_get;
*swig_bitsize_set = *LibreDwgc::Dwg_Object_Object_bitsize_set;
*swig_extended_size_get = *LibreDwgc::Dwg_Object_Object_extended_size_get;
*swig_extended_size_set = *LibreDwgc::Dwg_Object_Object_extended_size_set;
*swig_extended_handle_get = *LibreDwgc::Dwg_Object_Object_extended_handle_get;
*swig_extended_handle_set = *LibreDwgc::Dwg_Object_Object_extended_handle_set;
*swig_extended_get = *LibreDwgc::Dwg_Object_Object_extended_get;
*swig_extended_set = *LibreDwgc::Dwg_Object_Object_extended_set;
*swig_num_reactors_get = *LibreDwgc::Dwg_Object_Object_num_reactors_get;
*swig_num_reactors_set = *LibreDwgc::Dwg_Object_Object_num_reactors_set;
*swig_xdic_missing_flag_get = *LibreDwgc::Dwg_Object_Object_xdic_missing_flag_get;
*swig_xdic_missing_flag_set = *LibreDwgc::Dwg_Object_Object_xdic_missing_flag_set;
*swig_num_handles_get = *LibreDwgc::Dwg_Object_Object_num_handles_get;
*swig_num_handles_set = *LibreDwgc::Dwg_Object_Object_num_handles_set;
*swig_handleref_get = *LibreDwgc::Dwg_Object_Object_handleref_get;
*swig_handleref_set = *LibreDwgc::Dwg_Object_Object_handleref_set;
*swig_tio_get = *LibreDwgc::Dwg_Object_Object_tio_get;
*swig_tio_set = *LibreDwgc::Dwg_Object_Object_tio_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_Object(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_Object($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_Object_tio ##############

package LibreDwg::Dwg_Object_Object_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_DICTIONARY_get = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARY_get;
*swig_DICTIONARY_set = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARY_set;
*swig_BLOCK_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_BLOCK_CONTROL_get;
*swig_BLOCK_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_BLOCK_CONTROL_set;
*swig_BLOCK_HEADER_get = *LibreDwgc::Dwg_Object_Object_tio_BLOCK_HEADER_get;
*swig_BLOCK_HEADER_set = *LibreDwgc::Dwg_Object_Object_tio_BLOCK_HEADER_set;
*swig_LAYER_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_LAYER_CONTROL_get;
*swig_LAYER_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_LAYER_CONTROL_set;
*swig_LAYER_get = *LibreDwgc::Dwg_Object_Object_tio_LAYER_get;
*swig_LAYER_set = *LibreDwgc::Dwg_Object_Object_tio_LAYER_set;
*swig_SHAPEFILE_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_SHAPEFILE_CONTROL_get;
*swig_SHAPEFILE_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_SHAPEFILE_CONTROL_set;
*swig_SHAPEFILE_get = *LibreDwgc::Dwg_Object_Object_tio_SHAPEFILE_get;
*swig_SHAPEFILE_set = *LibreDwgc::Dwg_Object_Object_tio_SHAPEFILE_set;
*swig_LTYPE_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_LTYPE_CONTROL_get;
*swig_LTYPE_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_LTYPE_CONTROL_set;
*swig_LTYPE_get = *LibreDwgc::Dwg_Object_Object_tio_LTYPE_get;
*swig_LTYPE_set = *LibreDwgc::Dwg_Object_Object_tio_LTYPE_set;
*swig_VIEW_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_VIEW_CONTROL_get;
*swig_VIEW_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_VIEW_CONTROL_set;
*swig_VIEW_get = *LibreDwgc::Dwg_Object_Object_tio_VIEW_get;
*swig_VIEW_set = *LibreDwgc::Dwg_Object_Object_tio_VIEW_set;
*swig_UCS_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_UCS_CONTROL_get;
*swig_UCS_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_UCS_CONTROL_set;
*swig_UCS_get = *LibreDwgc::Dwg_Object_Object_tio_UCS_get;
*swig_UCS_set = *LibreDwgc::Dwg_Object_Object_tio_UCS_set;
*swig_VPORT_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_VPORT_CONTROL_get;
*swig_VPORT_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_VPORT_CONTROL_set;
*swig_VPORT_get = *LibreDwgc::Dwg_Object_Object_tio_VPORT_get;
*swig_VPORT_set = *LibreDwgc::Dwg_Object_Object_tio_VPORT_set;
*swig_APPID_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_APPID_CONTROL_get;
*swig_APPID_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_APPID_CONTROL_set;
*swig_APPID_get = *LibreDwgc::Dwg_Object_Object_tio_APPID_get;
*swig_APPID_set = *LibreDwgc::Dwg_Object_Object_tio_APPID_set;
*swig_DIMSTYLE_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_DIMSTYLE_CONTROL_get;
*swig_DIMSTYLE_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_DIMSTYLE_CONTROL_set;
*swig_DIMSTYLE_get = *LibreDwgc::Dwg_Object_Object_tio_DIMSTYLE_get;
*swig_DIMSTYLE_set = *LibreDwgc::Dwg_Object_Object_tio_DIMSTYLE_set;
*swig_VP_ENT_HDR_CONTROL_get = *LibreDwgc::Dwg_Object_Object_tio_VP_ENT_HDR_CONTROL_get;
*swig_VP_ENT_HDR_CONTROL_set = *LibreDwgc::Dwg_Object_Object_tio_VP_ENT_HDR_CONTROL_set;
*swig_VP_ENT_HDR_get = *LibreDwgc::Dwg_Object_Object_tio_VP_ENT_HDR_get;
*swig_VP_ENT_HDR_set = *LibreDwgc::Dwg_Object_Object_tio_VP_ENT_HDR_set;
*swig_GROUP_get = *LibreDwgc::Dwg_Object_Object_tio_GROUP_get;
*swig_GROUP_set = *LibreDwgc::Dwg_Object_Object_tio_GROUP_set;
*swig_MLINESTYLE_get = *LibreDwgc::Dwg_Object_Object_tio_MLINESTYLE_get;
*swig_MLINESTYLE_set = *LibreDwgc::Dwg_Object_Object_tio_MLINESTYLE_set;
*swig_DICTIONARYVAR_get = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARYVAR_get;
*swig_DICTIONARYVAR_set = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARYVAR_set;
*swig_DICTIONARYWDLFT_get = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARYWDLFT_get;
*swig_DICTIONARYWDLFT_set = *LibreDwgc::Dwg_Object_Object_tio_DICTIONARYWDLFT_set;
*swig_IDBUFFER_get = *LibreDwgc::Dwg_Object_Object_tio_IDBUFFER_get;
*swig_IDBUFFER_set = *LibreDwgc::Dwg_Object_Object_tio_IDBUFFER_set;
*swig_IMAGEDEF_get = *LibreDwgc::Dwg_Object_Object_tio_IMAGEDEF_get;
*swig_IMAGEDEF_set = *LibreDwgc::Dwg_Object_Object_tio_IMAGEDEF_set;
*swig_IMAGEDEFREACTOR_get = *LibreDwgc::Dwg_Object_Object_tio_IMAGEDEFREACTOR_get;
*swig_IMAGEDEFREACTOR_set = *LibreDwgc::Dwg_Object_Object_tio_IMAGEDEFREACTOR_set;
*swig_LAYER_INDEX_get = *LibreDwgc::Dwg_Object_Object_tio_LAYER_INDEX_get;
*swig_LAYER_INDEX_set = *LibreDwgc::Dwg_Object_Object_tio_LAYER_INDEX_set;
*swig_LAYOUT_get = *LibreDwgc::Dwg_Object_Object_tio_LAYOUT_get;
*swig_LAYOUT_set = *LibreDwgc::Dwg_Object_Object_tio_LAYOUT_set;
*swig_PROXY_get = *LibreDwgc::Dwg_Object_Object_tio_PROXY_get;
*swig_PROXY_set = *LibreDwgc::Dwg_Object_Object_tio_PROXY_set;
*swig_PLACEHOLDER_get = *LibreDwgc::Dwg_Object_Object_tio_PLACEHOLDER_get;
*swig_PLACEHOLDER_set = *LibreDwgc::Dwg_Object_Object_tio_PLACEHOLDER_set;
*swig_RASTERVARIABLES_get = *LibreDwgc::Dwg_Object_Object_tio_RASTERVARIABLES_get;
*swig_RASTERVARIABLES_set = *LibreDwgc::Dwg_Object_Object_tio_RASTERVARIABLES_set;
*swig_SORTENTSTABLE_get = *LibreDwgc::Dwg_Object_Object_tio_SORTENTSTABLE_get;
*swig_SORTENTSTABLE_set = *LibreDwgc::Dwg_Object_Object_tio_SORTENTSTABLE_set;
*swig_SPATIAL_FILTER_get = *LibreDwgc::Dwg_Object_Object_tio_SPATIAL_FILTER_get;
*swig_SPATIAL_FILTER_set = *LibreDwgc::Dwg_Object_Object_tio_SPATIAL_FILTER_set;
*swig_SPATIAL_INDEX_get = *LibreDwgc::Dwg_Object_Object_tio_SPATIAL_INDEX_get;
*swig_SPATIAL_INDEX_set = *LibreDwgc::Dwg_Object_Object_tio_SPATIAL_INDEX_set;
*swig_XRECORD_get = *LibreDwgc::Dwg_Object_Object_tio_XRECORD_get;
*swig_XRECORD_set = *LibreDwgc::Dwg_Object_Object_tio_XRECORD_set;
*swig_VBA_PROJECT_get = *LibreDwgc::Dwg_Object_Object_tio_VBA_PROJECT_get;
*swig_VBA_PROJECT_set = *LibreDwgc::Dwg_Object_Object_tio_VBA_PROJECT_set;
*swig_WIPEOUTVARIABLE_get = *LibreDwgc::Dwg_Object_Object_tio_WIPEOUTVARIABLE_get;
*swig_WIPEOUTVARIABLE_set = *LibreDwgc::Dwg_Object_Object_tio_WIPEOUTVARIABLE_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_Object_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_Object_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object ##############

package LibreDwg::Dwg_Object;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDwgc::Dwg_Object_size_get;
*swig_size_set = *LibreDwgc::Dwg_Object_size_set;
*swig_type_get = *LibreDwgc::Dwg_Object_type_get;
*swig_type_set = *LibreDwgc::Dwg_Object_type_set;
*swig_ckr_get = *LibreDwgc::Dwg_Object_ckr_get;
*swig_ckr_set = *LibreDwgc::Dwg_Object_ckr_set;
*swig_index_get = *LibreDwgc::Dwg_Object_index_get;
*swig_index_set = *LibreDwgc::Dwg_Object_index_set;
*swig_supertype_get = *LibreDwgc::Dwg_Object_supertype_get;
*swig_supertype_set = *LibreDwgc::Dwg_Object_supertype_set;
*swig_handle_get = *LibreDwgc::Dwg_Object_handle_get;
*swig_handle_set = *LibreDwgc::Dwg_Object_handle_set;
*swig_parent_get = *LibreDwgc::Dwg_Object_parent_get;
*swig_parent_set = *LibreDwgc::Dwg_Object_parent_set;
*swig_tio_get = *LibreDwgc::Dwg_Object_tio_get;
*swig_tio_set = *LibreDwgc::Dwg_Object_tio_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Object_tio ##############

package LibreDwg::Dwg_Object_tio;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_entity_get = *LibreDwgc::Dwg_Object_tio_entity_get;
*swig_entity_set = *LibreDwgc::Dwg_Object_tio_entity_set;
*swig_object_get = *LibreDwgc::Dwg_Object_tio_object_get;
*swig_object_set = *LibreDwgc::Dwg_Object_tio_object_set;
*swig_unknown_get = *LibreDwgc::Dwg_Object_tio_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Object_tio_unknown_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Object_tio(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Object_tio($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Class ##############

package LibreDwg::Dwg_Class;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_number_get = *LibreDwgc::Dwg_Class_number_get;
*swig_number_set = *LibreDwgc::Dwg_Class_number_set;
*swig_version_get = *LibreDwgc::Dwg_Class_version_get;
*swig_version_set = *LibreDwgc::Dwg_Class_version_set;
*swig_appname_get = *LibreDwgc::Dwg_Class_appname_get;
*swig_appname_set = *LibreDwgc::Dwg_Class_appname_set;
*swig_cppname_get = *LibreDwgc::Dwg_Class_cppname_get;
*swig_cppname_set = *LibreDwgc::Dwg_Class_cppname_set;
*swig_dxfname_get = *LibreDwgc::Dwg_Class_dxfname_get;
*swig_dxfname_set = *LibreDwgc::Dwg_Class_dxfname_set;
*swig_wasazombie_get = *LibreDwgc::Dwg_Class_wasazombie_get;
*swig_wasazombie_set = *LibreDwgc::Dwg_Class_wasazombie_set;
*swig_item_class_id_get = *LibreDwgc::Dwg_Class_item_class_id_get;
*swig_item_class_id_set = *LibreDwgc::Dwg_Class_item_class_id_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Class(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Class($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Chain ##############

package LibreDwg::Dwg_Chain;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_chain_get = *LibreDwgc::Dwg_Chain_chain_get;
*swig_chain_set = *LibreDwgc::Dwg_Chain_chain_set;
*swig_size_get = *LibreDwgc::Dwg_Chain_size_get;
*swig_size_set = *LibreDwgc::Dwg_Chain_size_set;
*swig_byte_get = *LibreDwgc::Dwg_Chain_byte_get;
*swig_byte_set = *LibreDwgc::Dwg_Chain_byte_set;
*swig_bit_get = *LibreDwgc::Dwg_Chain_bit_get;
*swig_bit_set = *LibreDwgc::Dwg_Chain_bit_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Chain(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Chain($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Section ##############

package LibreDwg::Dwg_Section;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_number_get = *LibreDwgc::Dwg_Section_number_get;
*swig_number_set = *LibreDwgc::Dwg_Section_number_set;
*swig_address_get = *LibreDwgc::Dwg_Section_address_get;
*swig_address_set = *LibreDwgc::Dwg_Section_address_set;
*swig_size_get = *LibreDwgc::Dwg_Section_size_get;
*swig_size_set = *LibreDwgc::Dwg_Section_size_set;
*swig_parent_get = *LibreDwgc::Dwg_Section_parent_get;
*swig_parent_set = *LibreDwgc::Dwg_Section_parent_set;
*swig_left_get = *LibreDwgc::Dwg_Section_left_get;
*swig_left_set = *LibreDwgc::Dwg_Section_left_set;
*swig_right_get = *LibreDwgc::Dwg_Section_right_get;
*swig_right_set = *LibreDwgc::Dwg_Section_right_set;
*swig_x00_get = *LibreDwgc::Dwg_Section_x00_get;
*swig_x00_set = *LibreDwgc::Dwg_Section_x00_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Section(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Section($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Section_Info ##############

package LibreDwg::Dwg_Section_Info;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDwgc::Dwg_Section_Info_size_get;
*swig_size_set = *LibreDwgc::Dwg_Section_Info_size_set;
*swig_unknown1_get = *LibreDwgc::Dwg_Section_Info_unknown1_get;
*swig_unknown1_set = *LibreDwgc::Dwg_Section_Info_unknown1_set;
*swig_num_sections_get = *LibreDwgc::Dwg_Section_Info_num_sections_get;
*swig_num_sections_set = *LibreDwgc::Dwg_Section_Info_num_sections_set;
*swig_max_decomp_size_get = *LibreDwgc::Dwg_Section_Info_max_decomp_size_get;
*swig_max_decomp_size_set = *LibreDwgc::Dwg_Section_Info_max_decomp_size_set;
*swig_unknown2_get = *LibreDwgc::Dwg_Section_Info_unknown2_get;
*swig_unknown2_set = *LibreDwgc::Dwg_Section_Info_unknown2_set;
*swig_compressed_get = *LibreDwgc::Dwg_Section_Info_compressed_get;
*swig_compressed_set = *LibreDwgc::Dwg_Section_Info_compressed_set;
*swig_type_get = *LibreDwgc::Dwg_Section_Info_type_get;
*swig_type_set = *LibreDwgc::Dwg_Section_Info_type_set;
*swig_encrypted_get = *LibreDwgc::Dwg_Section_Info_encrypted_get;
*swig_encrypted_set = *LibreDwgc::Dwg_Section_Info_encrypted_set;
*swig_name_get = *LibreDwgc::Dwg_Section_Info_name_get;
*swig_name_set = *LibreDwgc::Dwg_Section_Info_name_set;
*swig_sections_get = *LibreDwgc::Dwg_Section_Info_sections_get;
*swig_sections_set = *LibreDwgc::Dwg_Section_Info_sections_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Section_Info(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Section_Info($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Data ##############

package LibreDwg::Dwg_Data;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown1_get = *LibreDwgc::Dwg_Data_unknown1_get;
*swig_unknown1_set = *LibreDwgc::Dwg_Data_unknown1_set;
*swig_picture_get = *LibreDwgc::Dwg_Data_picture_get;
*swig_picture_set = *LibreDwgc::Dwg_Data_picture_set;
*swig_header_vars_get = *LibreDwgc::Dwg_Data_header_vars_get;
*swig_header_vars_set = *LibreDwgc::Dwg_Data_header_vars_set;
*swig_num_classes_get = *LibreDwgc::Dwg_Data_num_classes_get;
*swig_num_classes_set = *LibreDwgc::Dwg_Data_num_classes_set;
*swig_dwg_class_get = *LibreDwgc::Dwg_Data_dwg_class_get;
*swig_dwg_class_set = *LibreDwgc::Dwg_Data_dwg_class_set;
*swig_num_objects_get = *LibreDwgc::Dwg_Data_num_objects_get;
*swig_num_objects_set = *LibreDwgc::Dwg_Data_num_objects_set;
*swig_object_get = *LibreDwgc::Dwg_Data_object_get;
*swig_object_set = *LibreDwgc::Dwg_Data_object_set;
*swig_num_layers_get = *LibreDwgc::Dwg_Data_num_layers_get;
*swig_num_layers_set = *LibreDwgc::Dwg_Data_num_layers_set;
*swig_num_entities_get = *LibreDwgc::Dwg_Data_num_entities_get;
*swig_num_entities_set = *LibreDwgc::Dwg_Data_num_entities_set;
*swig_num_object_refs_get = *LibreDwgc::Dwg_Data_num_object_refs_get;
*swig_num_object_refs_set = *LibreDwgc::Dwg_Data_num_object_refs_set;
*swig_object_ref_get = *LibreDwgc::Dwg_Data_object_ref_get;
*swig_object_ref_set = *LibreDwgc::Dwg_Data_object_ref_set;
*swig_layer_control_get = *LibreDwgc::Dwg_Data_layer_control_get;
*swig_layer_control_set = *LibreDwgc::Dwg_Data_layer_control_set;
*swig_measurement_get = *LibreDwgc::Dwg_Data_measurement_get;
*swig_measurement_set = *LibreDwgc::Dwg_Data_measurement_set;
*swig_dwg_ot_layout_get = *LibreDwgc::Dwg_Data_dwg_ot_layout_get;
*swig_dwg_ot_layout_set = *LibreDwgc::Dwg_Data_dwg_ot_layout_set;
*swig_bit_chain_get = *LibreDwgc::Dwg_Data_bit_chain_get;
*swig_bit_chain_set = *LibreDwgc::Dwg_Data_bit_chain_set;
*swig_second_header_get = *LibreDwgc::Dwg_Data_second_header_get;
*swig_second_header_set = *LibreDwgc::Dwg_Data_second_header_set;
*swig_header_get = *LibreDwgc::Dwg_Data_header_get;
*swig_header_set = *LibreDwgc::Dwg_Data_header_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Data(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Data($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Data_second_header ##############

package LibreDwg::Dwg_Data_second_header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_unknown_get = *LibreDwgc::Dwg_Data_second_header_unknown_get;
*swig_unknown_set = *LibreDwgc::Dwg_Data_second_header_unknown_set;
*swig_handlerik_get = *LibreDwgc::Dwg_Data_second_header_handlerik_get;
*swig_handlerik_set = *LibreDwgc::Dwg_Data_second_header_handlerik_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Data_second_header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Data_second_header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Data_second_header_handlerik ##############

package LibreDwg::Dwg_Data_second_header_handlerik;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_size_get = *LibreDwgc::Dwg_Data_second_header_handlerik_size_get;
*swig_size_set = *LibreDwgc::Dwg_Data_second_header_handlerik_size_set;
*swig_chain_get = *LibreDwgc::Dwg_Data_second_header_handlerik_chain_get;
*swig_chain_set = *LibreDwgc::Dwg_Data_second_header_handlerik_chain_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Data_second_header_handlerik(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Data_second_header_handlerik($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : LibreDwg::Dwg_Data_header ##############

package LibreDwg::Dwg_Data_header;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( LibreDwg );
%OWNER = ();
%ITERATORS = ();
*swig_version_get = *LibreDwgc::Dwg_Data_header_version_get;
*swig_version_set = *LibreDwgc::Dwg_Data_header_version_set;
*swig_codepage_get = *LibreDwgc::Dwg_Data_header_codepage_get;
*swig_codepage_set = *LibreDwgc::Dwg_Data_header_codepage_set;
*swig_num_sections_get = *LibreDwgc::Dwg_Data_header_num_sections_get;
*swig_num_sections_set = *LibreDwgc::Dwg_Data_header_num_sections_set;
*swig_section_get = *LibreDwgc::Dwg_Data_header_section_get;
*swig_section_set = *LibreDwgc::Dwg_Data_header_section_set;
*swig_num_descriptions_get = *LibreDwgc::Dwg_Data_header_num_descriptions_get;
*swig_num_descriptions_set = *LibreDwgc::Dwg_Data_header_num_descriptions_set;
*swig_section_info_get = *LibreDwgc::Dwg_Data_header_section_info_get;
*swig_section_info_set = *LibreDwgc::Dwg_Data_header_section_info_set;
sub new {
    my $pkg = shift;
    my $self = LibreDwgc::new_Dwg_Data_header(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        LibreDwgc::delete_Dwg_Data_header($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package LibreDwg;

*FORMAT_RC = *LibreDwgc::FORMAT_RC;
*FORMAT_MC = *LibreDwgc::FORMAT_MC;
*FORMAT_MS = *LibreDwgc::FORMAT_MS;
*FORMAT_B = *LibreDwgc::FORMAT_B;
*FORMAT_BB = *LibreDwgc::FORMAT_BB;
*FORMAT_BS = *LibreDwgc::FORMAT_BS;
*FORMAT_RS = *LibreDwgc::FORMAT_RS;
*FORMAT_RL = *LibreDwgc::FORMAT_RL;
*FORMAT_RD = *LibreDwgc::FORMAT_RD;
*FORMAT_BL = *LibreDwgc::FORMAT_BL;
*FORMAT_TV = *LibreDwgc::FORMAT_TV;
*FORMAT_BT = *LibreDwgc::FORMAT_BT;
*FORMAT_DD = *LibreDwgc::FORMAT_DD;
*FORMAT_BD = *LibreDwgc::FORMAT_BD;
*FORMAT_4BITS = *LibreDwgc::FORMAT_4BITS;
*DWG_SUPERTYPE_UNKNOWN = *LibreDwgc::DWG_SUPERTYPE_UNKNOWN;
*DWG_SUPERTYPE_ENTITY = *LibreDwgc::DWG_SUPERTYPE_ENTITY;
*DWG_SUPERTYPE_OBJECT = *LibreDwgc::DWG_SUPERTYPE_OBJECT;
*DWG_TYPE_UNUSED = *LibreDwgc::DWG_TYPE_UNUSED;
*DWG_TYPE_TEXT = *LibreDwgc::DWG_TYPE_TEXT;
*DWG_TYPE_ATTRIB = *LibreDwgc::DWG_TYPE_ATTRIB;
*DWG_TYPE_ATTDEF = *LibreDwgc::DWG_TYPE_ATTDEF;
*DWG_TYPE_BLOCK = *LibreDwgc::DWG_TYPE_BLOCK;
*DWG_TYPE_ENDBLK = *LibreDwgc::DWG_TYPE_ENDBLK;
*DWG_TYPE_SEQEND = *LibreDwgc::DWG_TYPE_SEQEND;
*DWG_TYPE_INSERT = *LibreDwgc::DWG_TYPE_INSERT;
*DWG_TYPE_MINSERT = *LibreDwgc::DWG_TYPE_MINSERT;
*DWG_TYPE_VERTEX_2D = *LibreDwgc::DWG_TYPE_VERTEX_2D;
*DWG_TYPE_VERTEX_3D = *LibreDwgc::DWG_TYPE_VERTEX_3D;
*DWG_TYPE_VERTEX_MESH = *LibreDwgc::DWG_TYPE_VERTEX_MESH;
*DWG_TYPE_VERTEX_PFACE = *LibreDwgc::DWG_TYPE_VERTEX_PFACE;
*DWG_TYPE_VERTEX_PFACE_FACE = *LibreDwgc::DWG_TYPE_VERTEX_PFACE_FACE;
*DWG_TYPE_POLYLINE_2D = *LibreDwgc::DWG_TYPE_POLYLINE_2D;
*DWG_TYPE_POLYLINE_3D = *LibreDwgc::DWG_TYPE_POLYLINE_3D;
*DWG_TYPE_ARC = *LibreDwgc::DWG_TYPE_ARC;
*DWG_TYPE_CIRCLE = *LibreDwgc::DWG_TYPE_CIRCLE;
*DWG_TYPE_LINE = *LibreDwgc::DWG_TYPE_LINE;
*DWG_TYPE_DIMENSION_ORDINATE = *LibreDwgc::DWG_TYPE_DIMENSION_ORDINATE;
*DWG_TYPE_DIMENSION_LINEAR = *LibreDwgc::DWG_TYPE_DIMENSION_LINEAR;
*DWG_TYPE_DIMENSION_ALIGNED = *LibreDwgc::DWG_TYPE_DIMENSION_ALIGNED;
*DWG_TYPE_DIMENSION_ANG3PT = *LibreDwgc::DWG_TYPE_DIMENSION_ANG3PT;
*DWG_TYPE_DIMENSION_ANG2LN = *LibreDwgc::DWG_TYPE_DIMENSION_ANG2LN;
*DWG_TYPE_DIMENSION_RADIUS = *LibreDwgc::DWG_TYPE_DIMENSION_RADIUS;
*DWG_TYPE_DIMENSION_DIAMETER = *LibreDwgc::DWG_TYPE_DIMENSION_DIAMETER;
*DWG_TYPE_POINT = *LibreDwgc::DWG_TYPE_POINT;
*DWG_TYPE__3DFACE = *LibreDwgc::DWG_TYPE__3DFACE;
*DWG_TYPE_POLYLINE_PFACE = *LibreDwgc::DWG_TYPE_POLYLINE_PFACE;
*DWG_TYPE_POLYLINE_MESH = *LibreDwgc::DWG_TYPE_POLYLINE_MESH;
*DWG_TYPE_SOLID = *LibreDwgc::DWG_TYPE_SOLID;
*DWG_TYPE_TRACE = *LibreDwgc::DWG_TYPE_TRACE;
*DWG_TYPE_SHAPE = *LibreDwgc::DWG_TYPE_SHAPE;
*DWG_TYPE_VIEWPORT = *LibreDwgc::DWG_TYPE_VIEWPORT;
*DWG_TYPE_ELLIPSE = *LibreDwgc::DWG_TYPE_ELLIPSE;
*DWG_TYPE_SPLINE = *LibreDwgc::DWG_TYPE_SPLINE;
*DWG_TYPE_REGION = *LibreDwgc::DWG_TYPE_REGION;
*DWG_TYPE_3DSOLID = *LibreDwgc::DWG_TYPE_3DSOLID;
*DWG_TYPE_BODY = *LibreDwgc::DWG_TYPE_BODY;
*DWG_TYPE_RAY = *LibreDwgc::DWG_TYPE_RAY;
*DWG_TYPE_XLINE = *LibreDwgc::DWG_TYPE_XLINE;
*DWG_TYPE_DICTIONARY = *LibreDwgc::DWG_TYPE_DICTIONARY;
*DWG_TYPE_MTEXT = *LibreDwgc::DWG_TYPE_MTEXT;
*DWG_TYPE_LEADER = *LibreDwgc::DWG_TYPE_LEADER;
*DWG_TYPE_TOLERANCE = *LibreDwgc::DWG_TYPE_TOLERANCE;
*DWG_TYPE_MLINE = *LibreDwgc::DWG_TYPE_MLINE;
*DWG_TYPE_BLOCK_CONTROL = *LibreDwgc::DWG_TYPE_BLOCK_CONTROL;
*DWG_TYPE_BLOCK_HEADER = *LibreDwgc::DWG_TYPE_BLOCK_HEADER;
*DWG_TYPE_LAYER_CONTROL = *LibreDwgc::DWG_TYPE_LAYER_CONTROL;
*DWG_TYPE_LAYER = *LibreDwgc::DWG_TYPE_LAYER;
*DWG_TYPE_SHAPEFILE_CONTROL = *LibreDwgc::DWG_TYPE_SHAPEFILE_CONTROL;
*DWG_TYPE_SHAPEFILE = *LibreDwgc::DWG_TYPE_SHAPEFILE;
*DWG_TYPE_LTYPE_CONTROL = *LibreDwgc::DWG_TYPE_LTYPE_CONTROL;
*DWG_TYPE_LTYPE = *LibreDwgc::DWG_TYPE_LTYPE;
*DWG_TYPE_VIEW_CONTROL = *LibreDwgc::DWG_TYPE_VIEW_CONTROL;
*DWG_TYPE_VIEW = *LibreDwgc::DWG_TYPE_VIEW;
*DWG_TYPE_UCS_CONTROL = *LibreDwgc::DWG_TYPE_UCS_CONTROL;
*DWG_TYPE_UCS = *LibreDwgc::DWG_TYPE_UCS;
*DWG_TYPE_VPORT_CONTROL = *LibreDwgc::DWG_TYPE_VPORT_CONTROL;
*DWG_TYPE_VPORT = *LibreDwgc::DWG_TYPE_VPORT;
*DWG_TYPE_APPID_CONTROL = *LibreDwgc::DWG_TYPE_APPID_CONTROL;
*DWG_TYPE_APPID = *LibreDwgc::DWG_TYPE_APPID;
*DWG_TYPE_DIMSTYLE_CONTROL = *LibreDwgc::DWG_TYPE_DIMSTYLE_CONTROL;
*DWG_TYPE_DIMSTYLE = *LibreDwgc::DWG_TYPE_DIMSTYLE;
*DWG_TYPE_VP_ENT_HDR_CONTROL = *LibreDwgc::DWG_TYPE_VP_ENT_HDR_CONTROL;
*DWG_TYPE_VP_ENT_HDR = *LibreDwgc::DWG_TYPE_VP_ENT_HDR;
*DWG_TYPE_GROUP = *LibreDwgc::DWG_TYPE_GROUP;
*DWG_TYPE_MLINESTYLE = *LibreDwgc::DWG_TYPE_MLINESTYLE;
*DWG_TYPE_LWPLINE = *LibreDwgc::DWG_TYPE_LWPLINE;
*DWG_TYPE_HATCH = *LibreDwgc::DWG_TYPE_HATCH;
*DWG_TYPE_XRECORD = *LibreDwgc::DWG_TYPE_XRECORD;
*DWG_TYPE_PLACEHOLDER = *LibreDwgc::DWG_TYPE_PLACEHOLDER;
*DWG_TYPE_LAYOUT = *LibreDwgc::DWG_TYPE_LAYOUT;
*SECTION_HEADER = *LibreDwgc::SECTION_HEADER;
*SECTION_AUXHEADER = *LibreDwgc::SECTION_AUXHEADER;
*SECTION_CLASSES = *LibreDwgc::SECTION_CLASSES;
*SECTION_HANDLES = *LibreDwgc::SECTION_HANDLES;
*SECTION_TEMPLATE = *LibreDwgc::SECTION_TEMPLATE;
*SECTION_OBJFREESPACE = *LibreDwgc::SECTION_OBJFREESPACE;
*SECTION_DBOBJECTS = *LibreDwgc::SECTION_DBOBJECTS;
*SECTION_REVHISTORY = *LibreDwgc::SECTION_REVHISTORY;
*SECTION_SUMMARYINFO = *LibreDwgc::SECTION_SUMMARYINFO;
*SECTION_PREVIEW = *LibreDwgc::SECTION_PREVIEW;
*SECTION_APPINFO = *LibreDwgc::SECTION_APPINFO;
*SECTION_APPINFOHISTORY = *LibreDwgc::SECTION_APPINFOHISTORY;
*SECTION_FILEDEPLIST = *LibreDwgc::SECTION_FILEDEPLIST;
*SECTION_SECURITY = *LibreDwgc::SECTION_SECURITY;
*SECTION_VBAPROJECT = *LibreDwgc::SECTION_VBAPROJECT;
*SECTION_SIGNATURE = *LibreDwgc::SECTION_SIGNATURE;
*DWG_UNKNOWN1_SIZE = *LibreDwgc::DWG_UNKNOWN1_SIZE;
1;
